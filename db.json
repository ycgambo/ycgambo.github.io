{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/tools_test_ab/response_time_chart.png","path":"images/tools_test_ab/response_time_chart.png","modified":1,"renderable":0},{"_id":"source/images/tools_test_ab/with_opcache.png","path":"images/tools_test_ab/with_opcache.png","modified":1,"renderable":0},{"_id":"source/images/tools_test_ab/without_opcache.png","path":"images/tools_test_ab/without_opcache.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"bc22888568e481fbcc46a23d3ef7ba757d92266d","modified":1509096260000},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1509118441000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1509118441000},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1509118441000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1509118441000},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1509118441000},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1509118441000},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1509118441000},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1509118441000},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1509118441000},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1509118441000},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1509118441000},{"_id":"themes/hexo-theme-next/README.md","hash":"1a79f01601517b777cfb238916635d4df7368473","modified":1509118441000},{"_id":"themes/hexo-theme-next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1509118441000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"42da48b1adc529d87aa1c9aa95f17812f3734970","modified":1509116431000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1509118441000},{"_id":"themes/hexo-theme-next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1509118441000},{"_id":"themes/hexo-theme-next/package-lock.json","hash":"12a3557021ecf4570f4ae6f6ce603177a2d1044e","modified":1509118441000},{"_id":"source/_posts/bootstrap-css-layout.sublime-workspace","hash":"b48a37f36e735ecb124a985c7dc0243466b277a3","modified":1509168088000},{"_id":"source/_posts/php_observer+factory.md","hash":"2b3e3ec3196de7b0f5ef999a21c90119e9e3429a","modified":1509609379000},{"_id":"source/_posts/php_observer.md","hash":"8b778aaaea6ca62a4062973921479191fe8bdf97","modified":1509609378000},{"_id":"source/_posts/php_singleton.md","hash":"b0cdb1ba2ae06baebe0bb6bccff33ce137d01181","modified":1509609377000},{"_id":"source/_posts/tools_test_ab.md","hash":"c46d03caa93f433705e72cbe31ab905d529ee58a","modified":1509609381000},{"_id":"source/_posts/tools_zookeeper.md","hash":"cbce93bfdbf4a677de4739c87e562d95941a9369","modified":1509613661000},{"_id":"source/_posts/vbs_copyFileFromUDisk.md","hash":"60587c684490dc7a7f1d1b4a80562260438f400c","modified":1509609379000},{"_id":"source/images/avatar.jpg","hash":"baead5c03f1deaa8e28e9e4aac0baf8652bd243f","modified":1509114948000},{"_id":"source/categories/index.md","hash":"aa29b5c54c23e352e58272675e064ba57f433dfb","modified":1509103439000},{"_id":"source/tags/index.md","hash":"1837981b2dd892ef13986f622214b7920e31744e","modified":1509103434000},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/index","hash":"9b31e915ffe8800bece324d66d85dbc29c5b46db","modified":1509118446000},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"7e806b843ef97e9f8b8efdb0ff36b73e9ffc76be","modified":1509118441000},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1509118441000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1509118441000},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1509118441000},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1509118441000},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"26bd9be87576eaab53aaf178b5ddd84d8bb4cabf","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1509118441000},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1509118441000},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1509118441000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1509117726000},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"a35a4dc15a2757b299c714ec94fae4d6dfdc81cd","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"7a64914a0a3c893c1aaa8b5349b85898f95af314","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"044bc872d7b59655e46f6fb1cf14f767e31a4dfa","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1509118441000},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1509118441000},{"_id":"source/images/tools_test_ab/response_time_chart.png","hash":"e85ae36c2d136269937f2e4f349154af37a68f0f","modified":1509263811000},{"_id":"source/images/tools_test_ab/with_opcache.png","hash":"0a15027a43570d5052e79c6710ae8fe8c09d3938","modified":1509263795000},{"_id":"source/images/tools_test_ab/without_opcache.png","hash":"343f5319d1c4ccb7d1f5b4ce367b836ae2452bf4","modified":1509263614000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"189b4966e0f0f45b56b68ab8930aaba51e2cf14d","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"f780973e0f8c2e52a70ac5e927af845d7b547b71","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"a35a4dc15a2757b299c714ec94fae4d6dfdc81cd","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1509118441000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"a35a4dc15a2757b299c714ec94fae4d6dfdc81cd","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-cdc8a5a3ef9b09839da094406ea1e9edf4e8be73.idx","hash":"87ec2ade299b2292f999f6eac9225498876e29cd","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1509118441000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1509118441000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-cdc8a5a3ef9b09839da094406ea1e9edf4e8be73.pack","hash":"844bd86e9f7cce86bbca2452c473c15ba83bb6d8","modified":1509118441000}],"Category":[],"Data":[],"Page":[{"layout":"page","type":"categories","date":"2017-10-27T11:16:46.000Z","comment":false,"_content":"","source":"categories/index.md","raw":"---\nlayout: page\ntype: \"categories\"\ndate: 2017-10-27 19:16:46\ncomment: false\n---\n","updated":"2017-10-27T11:23:59.000Z","path":"categories/index.html","title":"","comments":1,"_id":"cj9i9inxw00015vs8geu7puk3","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","type":"tags","date":"2017-10-27T11:16:24.000Z","comment":false,"_content":"","source":"tags/index.md","raw":"---\nlayout: page\ntype: \"tags\"\ndate: 2017-10-27 19:16:24\ncomment: false\n---\n","updated":"2017-10-27T11:23:54.000Z","path":"tags/index.html","title":"","comments":1,"_id":"cj9i9iny100035vs88vr3lefm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"PHP观察者模式+工厂模式组合应用","date":"2017-07-01T16:00:00.000Z","_content":"\n工厂模式把类的创建者和创建的类分离开来，负责产生正确的被观察对象，然后控制器将观察者绑定在需要被观察的对象上。采用这种组合的好处是类间的关系十分松散，可以灵活应对需求的变更：\n- 需求功能的增减（如增加某个日志、增加某些监管）\n- 需求类型的增减（如扩展某种类、新增一些类）\n- 按照接口编程，控制器需要改动的代码很少\n\n目录：\n<!-- MarkdownTOC -->\n\n- [定义抽象request类型](#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B)\n- [定义观察者和被观察者类型](#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B)\n- [扩展request为http类型](#%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B)\n- [构造观察者](#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85)\n- [定义工厂管理者](#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85)\n- [定义工厂接口](#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3)\n- [构造request工厂管理者](#%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85)\n- [构造Request_http工厂](#%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82)\n- [控制器](#%E6%8E%A7%E5%88%B6%E5%99%A8)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n下面用request类（被创建的类、被观察对象）和一些辅助类（观察者、工厂管理者、工厂）做说明。\n\n<a name=\"%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\"></a>\n## 定义抽象request类型\n\nrequest可能来自http，也可能来自app或者其他请求，采用`$_type`标明。\n\n所有的request实体均需继承自该类。\n\n```php\nabstract class Request\n{\n    protected $_type;\n    \n    public function getType()\n    {\n        return $this->_type;\n    }\n}\n```\n\n<a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\"></a>\n## 定义观察者和被观察者类型\n\n被观察者接口：\n\n```php\ninterface IObservable\n{\n    public function attach(IObserver $observer);\n    public function detach(IObserver $observer);\n    public function notify();\n}\n```\n\nattach用于绑定观察者，detach用于解绑，notify用于触发观察者。\n\n观察者接口：\n\n```php\ninterface IObserver\n{\n    public function update(IObservable $observable);\n}\n```\n\nupdate用于观察者实现自身的行为，或者更新被观察者的状态。\n\n<a name=\"%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\"></a>\n## 扩展request为http类型\n\n继承Request对象，并实现被观察者接口。\n\n其实也可以将上面的IObservable接口定义为抽象类，以减少attach、detach以及notify这部分代码的重复。\n\n请注意notify方法，该方法依次调用观察者的update方法，并 **传递被观察者本身** 作为参数，这也是观察者模式最重要的一点。\n\n```php\nclass Request_http extends Request implements IObservable\n{\n    private $_observers;\n    \n    public function __construct()\n    {\n        $this->_type = 'http';\n        $this->_observers = array();\n    }\n\n    public function attach(IObserver $observer)\n    {\n        if (!in_array($observer, $this->_observers)) {\n            $this->_observers[] = $observer;\n        }\n    }\n    public function detach(IObserver $observer)\n    {\n        if (in_array($observer, $this->_observers)) {\n            $newobservers = array();\n            foreach ($this->_observers as $obs) {\n                if ($obs !== $observer) {\n                    $newobservers[] = $obs;\n                }\n            }\n            $this->_observers = $newobservers;\n        }\n        \n    }\n    public function notify()\n    {\n        foreach ($this->_observers as $obs) {\n            $obs->update($this);\n        }\n    }\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n## 构造观察者\n\n构造一个简单的安全处理模块。\n\n```php\nclass RequestSecurityObserver implements IObserver\n{\n    public function update(IObservable $observable)\n    {\n        // security handler\n        // do some check here\n    }\n}\n```\n\n至此，我们已经实现了一个Request_http类，作为被观察对象。以及一个RequestSecurityObserver类，作为观察者。\n\n下面实现工厂模式，构造Request_http类，并返回该类给控制器。\n\n<a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a>\n## 定义工厂管理者\n\n为了方便对不同request的特殊处理，应该为每一个类构造对应的工厂，因此需要一个管理者来操作正确的工厂。\n\n每组类型的工厂都可能需要一个管理者（如request、database、view），因此只需抽象的定义一个getObject方法即可。\n\n```php\ninterface IGeneraterManager\n{\n    public function getObject();\n}\n```\n\n<a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\"></a>\n## 定义工厂接口\n\n工厂方法也只定义了一个generate方法，用于生成该工厂对应的类。\n\n```php\ninterface IGenerater\n{\n    public function generate();\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a>\n## 构造request工厂管理者\n\n`IGeneraterManager`忽视了各类工厂管理者的具体职能，此处需要赋予request工厂管理者 **特定** 的职能。\n\n这里只简要地加以说明。\n\n该工厂管理者的构造函数引入了Request抽象类，强制所有的工厂返回Request类型，这属于它的特定职能。\n\n```php\nclass RequestGeneraterManager implements IGeneraterManager\n{\n    private $_type;\n    private $_generater;\n\n    public function __construct()\n    {\n        $this->_determineType();\n        $this->_determineGenerater();\n        \n        include_once 'Request.abstract.php';\n    }\n\n    public function getObject()\n    {\n        return $this->_generater->generate();\n    }\n\n    private function _determineType()\n    {\n        // should do some check to determine request type\n        // but for clear, we just name a type for this here\n        $this->_type = 'http';\n    }\n    private function _determineGenerater()\n    {\n        switch ($this->_type) {\n            case 'http':\n                include_once 'RequestGenerater_http.class.php';\n                $this->_generater = new RequestGenerater_http();\n        }\n    }\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\"></a>\n## 构造Request_http工厂\n\n这个工厂返回Request_http类型，它还有权决定返回哪种Request_http类型，可能是Request_http_mobile以适应移动终端，也可能是Request_http_pc以适应桌面端。\n\n为了简单起见，这里只返回最基本的Request_http类型。\n\n```php\nclass RequestGenerater_http implements IGenerater\n{\n    public function generate()\n    {\n        include_once 'Request_http.class.php';\n        return new Request_http();\n    }\n}\n```\n\n至此，所有的类已经构造完毕。接下来是控制器的控制流。\n\n<a name=\"%E6%8E%A7%E5%88%B6%E5%99%A8\"></a>\n## 控制器\n\n首先在控制器中引入 *工厂管理者* 和各种 *观察者*。\n\n然后调用管理者的`getObject`方法获得正确的Request类，它同时也是被观察对象。\n\n接着将各种观察者绑定到Request上，或者解绑。\n\n最后通知观察者即可。\n\n```php\ninclude_once ROOT.'/models/datatype/request/RequestGeneraterManager.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestSecurityObserver.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestxxxxxxxxObserver.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestxxxxxxxxObserver.class.php';\n$request_generater_manager = new RequestGeneraterManager();\n$request = $request_generater_manager->getObject();\n$request->attach(new RequestSecurityObserver());\n$request->attach(new RequestxxxxxxxxObserver());\n$request->detach(new RequestxxxxxxxxObserver());\n$request->notify();\n```\n\n通过以上一系列的定义，Request类已经非常灵活，后期无论是新增功能（新建观察者），还是新增类型（新建工厂），都可以轻松应付。\n\n新增功能时，只要改动控制器的attach和detach即可。\n新增类型时，只要新建该类型，在工厂中做与其对应的处理即可。\n\n下面是程序流：\n\n1. 控制器实例化工厂管理者RequestGeneraterManager\n2. 控制器调用管理者的getObject方法获得Request对象\n    1. 工厂管理者调用适当工厂的generate方法\n    2. 工厂生成相应对象，并赋予其合适的属性\n3. 控制器为Request对象绑定各种观察者\n4. 控制器调用Request的notify方法，使观察者依次操作Request对象\n5. 控制器重新拥有Request对象的控制权","source":"_posts/php_observer+factory.md","raw":"---\ntitle: PHP观察者模式+工厂模式组合应用\ndate: 2017/07/02\ntag: [PHP, 设计模式]\n---\n\n工厂模式把类的创建者和创建的类分离开来，负责产生正确的被观察对象，然后控制器将观察者绑定在需要被观察的对象上。采用这种组合的好处是类间的关系十分松散，可以灵活应对需求的变更：\n- 需求功能的增减（如增加某个日志、增加某些监管）\n- 需求类型的增减（如扩展某种类、新增一些类）\n- 按照接口编程，控制器需要改动的代码很少\n\n目录：\n<!-- MarkdownTOC -->\n\n- [定义抽象request类型](#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B)\n- [定义观察者和被观察者类型](#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B)\n- [扩展request为http类型](#%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B)\n- [构造观察者](#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85)\n- [定义工厂管理者](#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85)\n- [定义工厂接口](#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3)\n- [构造request工厂管理者](#%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85)\n- [构造Request_http工厂](#%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82)\n- [控制器](#%E6%8E%A7%E5%88%B6%E5%99%A8)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n下面用request类（被创建的类、被观察对象）和一些辅助类（观察者、工厂管理者、工厂）做说明。\n\n<a name=\"%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\"></a>\n## 定义抽象request类型\n\nrequest可能来自http，也可能来自app或者其他请求，采用`$_type`标明。\n\n所有的request实体均需继承自该类。\n\n```php\nabstract class Request\n{\n    protected $_type;\n    \n    public function getType()\n    {\n        return $this->_type;\n    }\n}\n```\n\n<a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\"></a>\n## 定义观察者和被观察者类型\n\n被观察者接口：\n\n```php\ninterface IObservable\n{\n    public function attach(IObserver $observer);\n    public function detach(IObserver $observer);\n    public function notify();\n}\n```\n\nattach用于绑定观察者，detach用于解绑，notify用于触发观察者。\n\n观察者接口：\n\n```php\ninterface IObserver\n{\n    public function update(IObservable $observable);\n}\n```\n\nupdate用于观察者实现自身的行为，或者更新被观察者的状态。\n\n<a name=\"%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\"></a>\n## 扩展request为http类型\n\n继承Request对象，并实现被观察者接口。\n\n其实也可以将上面的IObservable接口定义为抽象类，以减少attach、detach以及notify这部分代码的重复。\n\n请注意notify方法，该方法依次调用观察者的update方法，并 **传递被观察者本身** 作为参数，这也是观察者模式最重要的一点。\n\n```php\nclass Request_http extends Request implements IObservable\n{\n    private $_observers;\n    \n    public function __construct()\n    {\n        $this->_type = 'http';\n        $this->_observers = array();\n    }\n\n    public function attach(IObserver $observer)\n    {\n        if (!in_array($observer, $this->_observers)) {\n            $this->_observers[] = $observer;\n        }\n    }\n    public function detach(IObserver $observer)\n    {\n        if (in_array($observer, $this->_observers)) {\n            $newobservers = array();\n            foreach ($this->_observers as $obs) {\n                if ($obs !== $observer) {\n                    $newobservers[] = $obs;\n                }\n            }\n            $this->_observers = $newobservers;\n        }\n        \n    }\n    public function notify()\n    {\n        foreach ($this->_observers as $obs) {\n            $obs->update($this);\n        }\n    }\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n## 构造观察者\n\n构造一个简单的安全处理模块。\n\n```php\nclass RequestSecurityObserver implements IObserver\n{\n    public function update(IObservable $observable)\n    {\n        // security handler\n        // do some check here\n    }\n}\n```\n\n至此，我们已经实现了一个Request_http类，作为被观察对象。以及一个RequestSecurityObserver类，作为观察者。\n\n下面实现工厂模式，构造Request_http类，并返回该类给控制器。\n\n<a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a>\n## 定义工厂管理者\n\n为了方便对不同request的特殊处理，应该为每一个类构造对应的工厂，因此需要一个管理者来操作正确的工厂。\n\n每组类型的工厂都可能需要一个管理者（如request、database、view），因此只需抽象的定义一个getObject方法即可。\n\n```php\ninterface IGeneraterManager\n{\n    public function getObject();\n}\n```\n\n<a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\"></a>\n## 定义工厂接口\n\n工厂方法也只定义了一个generate方法，用于生成该工厂对应的类。\n\n```php\ninterface IGenerater\n{\n    public function generate();\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a>\n## 构造request工厂管理者\n\n`IGeneraterManager`忽视了各类工厂管理者的具体职能，此处需要赋予request工厂管理者 **特定** 的职能。\n\n这里只简要地加以说明。\n\n该工厂管理者的构造函数引入了Request抽象类，强制所有的工厂返回Request类型，这属于它的特定职能。\n\n```php\nclass RequestGeneraterManager implements IGeneraterManager\n{\n    private $_type;\n    private $_generater;\n\n    public function __construct()\n    {\n        $this->_determineType();\n        $this->_determineGenerater();\n        \n        include_once 'Request.abstract.php';\n    }\n\n    public function getObject()\n    {\n        return $this->_generater->generate();\n    }\n\n    private function _determineType()\n    {\n        // should do some check to determine request type\n        // but for clear, we just name a type for this here\n        $this->_type = 'http';\n    }\n    private function _determineGenerater()\n    {\n        switch ($this->_type) {\n            case 'http':\n                include_once 'RequestGenerater_http.class.php';\n                $this->_generater = new RequestGenerater_http();\n        }\n    }\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\"></a>\n## 构造Request_http工厂\n\n这个工厂返回Request_http类型，它还有权决定返回哪种Request_http类型，可能是Request_http_mobile以适应移动终端，也可能是Request_http_pc以适应桌面端。\n\n为了简单起见，这里只返回最基本的Request_http类型。\n\n```php\nclass RequestGenerater_http implements IGenerater\n{\n    public function generate()\n    {\n        include_once 'Request_http.class.php';\n        return new Request_http();\n    }\n}\n```\n\n至此，所有的类已经构造完毕。接下来是控制器的控制流。\n\n<a name=\"%E6%8E%A7%E5%88%B6%E5%99%A8\"></a>\n## 控制器\n\n首先在控制器中引入 *工厂管理者* 和各种 *观察者*。\n\n然后调用管理者的`getObject`方法获得正确的Request类，它同时也是被观察对象。\n\n接着将各种观察者绑定到Request上，或者解绑。\n\n最后通知观察者即可。\n\n```php\ninclude_once ROOT.'/models/datatype/request/RequestGeneraterManager.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestSecurityObserver.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestxxxxxxxxObserver.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestxxxxxxxxObserver.class.php';\n$request_generater_manager = new RequestGeneraterManager();\n$request = $request_generater_manager->getObject();\n$request->attach(new RequestSecurityObserver());\n$request->attach(new RequestxxxxxxxxObserver());\n$request->detach(new RequestxxxxxxxxObserver());\n$request->notify();\n```\n\n通过以上一系列的定义，Request类已经非常灵活，后期无论是新增功能（新建观察者），还是新增类型（新建工厂），都可以轻松应付。\n\n新增功能时，只要改动控制器的attach和detach即可。\n新增类型时，只要新建该类型，在工厂中做与其对应的处理即可。\n\n下面是程序流：\n\n1. 控制器实例化工厂管理者RequestGeneraterManager\n2. 控制器调用管理者的getObject方法获得Request对象\n    1. 工厂管理者调用适当工厂的generate方法\n    2. 工厂生成相应对象，并赋予其合适的属性\n3. 控制器为Request对象绑定各种观察者\n4. 控制器调用Request的notify方法，使观察者依次操作Request对象\n5. 控制器重新拥有Request对象的控制权","slug":"php_observer+factory","published":1,"updated":"2017-11-02T07:56:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9i9inxs00005vs8c7pqa8s6","content":"<p>工厂模式把类的创建者和创建的类分离开来，负责产生正确的被观察对象，然后控制器将观察者绑定在需要被观察的对象上。采用这种组合的好处是类间的关系十分松散，可以灵活应对需求的变更：</p>\n<ul>\n<li>需求功能的增减（如增加某个日志、增加某些监管）</li>\n<li>需求类型的增减（如扩展某种类、新增一些类）</li>\n<li>按照接口编程，控制器需要改动的代码很少</li>\n</ul>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\">定义抽象request类型</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\">定义观察者和被观察者类型</a></li>\n<li><a href=\"#%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\">扩展request为http类型</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\">构造观察者</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\">定义工厂管理者</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\">定义工厂接口</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\">构造request工厂管理者</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\">构造Request_http工厂</a></li>\n<li><a href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8\">控制器</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<p>下面用request类（被创建的类、被观察对象）和一些辅助类（观察者、工厂管理者、工厂）做说明。</p>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"定义抽象request类型\"><a href=\"#定义抽象request类型\" class=\"headerlink\" title=\"定义抽象request类型\"></a>定义抽象request类型</h2><p>request可能来自http，也可能来自app或者其他请求，采用<code>$_type</code>标明。</p>\n<p>所有的request实体均需继承自该类。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> $_type;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getType</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_type;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"定义观察者和被观察者类型\"><a href=\"#定义观察者和被观察者类型\" class=\"headerlink\" title=\"定义观察者和被观察者类型\"></a>定义观察者和被观察者类型</h2><p>被观察者接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IObservable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(IObserver $observer)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(IObserver $observer)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>attach用于绑定观察者，detach用于解绑，notify用于触发观察者。</p>\n<p>观察者接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IObserver</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(IObservable $observable)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>update用于观察者实现自身的行为，或者更新被观察者的状态。</p>\n<p><a name=\"%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"扩展request为http类型\"><a href=\"#扩展request为http类型\" class=\"headerlink\" title=\"扩展request为http类型\"></a>扩展request为http类型</h2><p>继承Request对象，并实现被观察者接口。</p>\n<p>其实也可以将上面的IObservable接口定义为抽象类，以减少attach、detach以及notify这部分代码的重复。</p>\n<p>请注意notify方法，该方法依次调用观察者的update方法，并 <strong>传递被观察者本身</strong> 作为参数，这也是观察者模式最重要的一点。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request_http</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span> <span class=\"keyword\">implements</span> <span class=\"title\">IObservable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_type = <span class=\"string\">'http'</span>;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_observers = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(IObserver $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!in_array($observer, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_observers[] = $observer;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(IObserver $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($observer, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            $newobservers = <span class=\"keyword\">array</span>();</div><div class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $obs) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ($obs !== $observer) &#123;</div><div class=\"line\">                    $newobservers[] = $obs;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_observers = $newobservers;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $obs) &#123;</div><div class=\"line\">            $obs-&gt;update(<span class=\"keyword\">$this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h2 id=\"构造观察者\"><a href=\"#构造观察者\" class=\"headerlink\" title=\"构造观察者\"></a>构造观察者</h2><p>构造一个简单的安全处理模块。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestSecurityObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">IObserver</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(IObservable $observable)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// security handler</span></div><div class=\"line\">        <span class=\"comment\">// do some check here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，我们已经实现了一个Request_http类，作为被观察对象。以及一个RequestSecurityObserver类，作为观察者。</p>\n<p>下面实现工厂模式，构造Request_http类，并返回该类给控制器。</p>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a></p>\n<h2 id=\"定义工厂管理者\"><a href=\"#定义工厂管理者\" class=\"headerlink\" title=\"定义工厂管理者\"></a>定义工厂管理者</h2><p>为了方便对不同request的特殊处理，应该为每一个类构造对应的工厂，因此需要一个管理者来操作正确的工厂。</p>\n<p>每组类型的工厂都可能需要一个管理者（如request、database、view），因此只需抽象的定义一个getObject方法即可。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGeneraterManager</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getObject</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\"></a></p>\n<h2 id=\"定义工厂接口\"><a href=\"#定义工厂接口\" class=\"headerlink\" title=\"定义工厂接口\"></a>定义工厂接口</h2><p>工厂方法也只定义了一个generate方法，用于生成该工厂对应的类。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGenerater</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a></p>\n<h2 id=\"构造request工厂管理者\"><a href=\"#构造request工厂管理者\" class=\"headerlink\" title=\"构造request工厂管理者\"></a>构造request工厂管理者</h2><p><code>IGeneraterManager</code>忽视了各类工厂管理者的具体职能，此处需要赋予request工厂管理者 <strong>特定</strong> 的职能。</p>\n<p>这里只简要地加以说明。</p>\n<p>该工厂管理者的构造函数引入了Request抽象类，强制所有的工厂返回Request类型，这属于它的特定职能。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestGeneraterManager</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGeneraterManager</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_type;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_generater;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_determineType();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_determineGenerater();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">'Request.abstract.php'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getObject</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_generater-&gt;generate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_determineType</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// should do some check to determine request type</span></div><div class=\"line\">        <span class=\"comment\">// but for clear, we just name a type for this here</span></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_type = <span class=\"string\">'http'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_determineGenerater</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">$this</span>-&gt;_type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'http'</span>:</div><div class=\"line\">                <span class=\"keyword\">include_once</span> <span class=\"string\">'RequestGenerater_http.class.php'</span>;</div><div class=\"line\">                <span class=\"keyword\">$this</span>-&gt;_generater = <span class=\"keyword\">new</span> RequestGenerater_http();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\"></a></p>\n<h2 id=\"构造Request-http工厂\"><a href=\"#构造Request-http工厂\" class=\"headerlink\" title=\"构造Request_http工厂\"></a>构造Request_http工厂</h2><p>这个工厂返回Request_http类型，它还有权决定返回哪种Request_http类型，可能是Request_http_mobile以适应移动终端，也可能是Request_http_pc以适应桌面端。</p>\n<p>为了简单起见，这里只返回最基本的Request_http类型。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestGenerater_http</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGenerater</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">'Request_http.class.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Request_http();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，所有的类已经构造完毕。接下来是控制器的控制流。</p>\n<p><a name=\"%E6%8E%A7%E5%88%B6%E5%99%A8\"></a></p>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><p>首先在控制器中引入 <em>工厂管理者</em> 和各种 <em>观察者</em>。</p>\n<p>然后调用管理者的<code>getObject</code>方法获得正确的Request类，它同时也是被观察对象。</p>\n<p>接着将各种观察者绑定到Request上，或者解绑。</p>\n<p>最后通知观察者即可。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestGeneraterManager.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestSecurityObserver.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestxxxxxxxxObserver.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestxxxxxxxxObserver.class.php'</span>;</div><div class=\"line\">$request_generater_manager = <span class=\"keyword\">new</span> RequestGeneraterManager();</div><div class=\"line\">$request = $request_generater_manager-&gt;getObject();</div><div class=\"line\">$request-&gt;attach(<span class=\"keyword\">new</span> RequestSecurityObserver());</div><div class=\"line\">$request-&gt;attach(<span class=\"keyword\">new</span> RequestxxxxxxxxObserver());</div><div class=\"line\">$request-&gt;detach(<span class=\"keyword\">new</span> RequestxxxxxxxxObserver());</div><div class=\"line\">$request-&gt;notify();</div></pre></td></tr></table></figure>\n<p>通过以上一系列的定义，Request类已经非常灵活，后期无论是新增功能（新建观察者），还是新增类型（新建工厂），都可以轻松应付。</p>\n<p>新增功能时，只要改动控制器的attach和detach即可。<br>新增类型时，只要新建该类型，在工厂中做与其对应的处理即可。</p>\n<p>下面是程序流：</p>\n<ol>\n<li>控制器实例化工厂管理者RequestGeneraterManager</li>\n<li>控制器调用管理者的getObject方法获得Request对象<ol>\n<li>工厂管理者调用适当工厂的generate方法</li>\n<li>工厂生成相应对象，并赋予其合适的属性</li>\n</ol>\n</li>\n<li>控制器为Request对象绑定各种观察者</li>\n<li>控制器调用Request的notify方法，使观察者依次操作Request对象</li>\n<li>控制器重新拥有Request对象的控制权</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>工厂模式把类的创建者和创建的类分离开来，负责产生正确的被观察对象，然后控制器将观察者绑定在需要被观察的对象上。采用这种组合的好处是类间的关系十分松散，可以灵活应对需求的变更：</p>\n<ul>\n<li>需求功能的增减（如增加某个日志、增加某些监管）</li>\n<li>需求类型的增减（如扩展某种类、新增一些类）</li>\n<li>按照接口编程，控制器需要改动的代码很少</li>\n</ul>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\">定义抽象request类型</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\">定义观察者和被观察者类型</a></li>\n<li><a href=\"#%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\">扩展request为http类型</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\">构造观察者</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\">定义工厂管理者</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\">定义工厂接口</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\">构造request工厂管理者</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\">构造Request_http工厂</a></li>\n<li><a href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8\">控制器</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<p>下面用request类（被创建的类、被观察对象）和一些辅助类（观察者、工厂管理者、工厂）做说明。</p>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"定义抽象request类型\"><a href=\"#定义抽象request类型\" class=\"headerlink\" title=\"定义抽象request类型\"></a>定义抽象request类型</h2><p>request可能来自http，也可能来自app或者其他请求，采用<code>$_type</code>标明。</p>\n<p>所有的request实体均需继承自该类。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> $_type;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getType</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_type;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"定义观察者和被观察者类型\"><a href=\"#定义观察者和被观察者类型\" class=\"headerlink\" title=\"定义观察者和被观察者类型\"></a>定义观察者和被观察者类型</h2><p>被观察者接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IObservable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(IObserver $observer)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(IObserver $observer)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>attach用于绑定观察者，detach用于解绑，notify用于触发观察者。</p>\n<p>观察者接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IObserver</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(IObservable $observable)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>update用于观察者实现自身的行为，或者更新被观察者的状态。</p>\n<p><a name=\"%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"扩展request为http类型\"><a href=\"#扩展request为http类型\" class=\"headerlink\" title=\"扩展request为http类型\"></a>扩展request为http类型</h2><p>继承Request对象，并实现被观察者接口。</p>\n<p>其实也可以将上面的IObservable接口定义为抽象类，以减少attach、detach以及notify这部分代码的重复。</p>\n<p>请注意notify方法，该方法依次调用观察者的update方法，并 <strong>传递被观察者本身</strong> 作为参数，这也是观察者模式最重要的一点。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request_http</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span> <span class=\"keyword\">implements</span> <span class=\"title\">IObservable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_type = <span class=\"string\">'http'</span>;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_observers = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(IObserver $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!in_array($observer, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_observers[] = $observer;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(IObserver $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($observer, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            $newobservers = <span class=\"keyword\">array</span>();</div><div class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $obs) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ($obs !== $observer) &#123;</div><div class=\"line\">                    $newobservers[] = $obs;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_observers = $newobservers;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $obs) &#123;</div><div class=\"line\">            $obs-&gt;update(<span class=\"keyword\">$this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h2 id=\"构造观察者\"><a href=\"#构造观察者\" class=\"headerlink\" title=\"构造观察者\"></a>构造观察者</h2><p>构造一个简单的安全处理模块。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestSecurityObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">IObserver</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(IObservable $observable)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// security handler</span></div><div class=\"line\">        <span class=\"comment\">// do some check here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，我们已经实现了一个Request_http类，作为被观察对象。以及一个RequestSecurityObserver类，作为观察者。</p>\n<p>下面实现工厂模式，构造Request_http类，并返回该类给控制器。</p>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a></p>\n<h2 id=\"定义工厂管理者\"><a href=\"#定义工厂管理者\" class=\"headerlink\" title=\"定义工厂管理者\"></a>定义工厂管理者</h2><p>为了方便对不同request的特殊处理，应该为每一个类构造对应的工厂，因此需要一个管理者来操作正确的工厂。</p>\n<p>每组类型的工厂都可能需要一个管理者（如request、database、view），因此只需抽象的定义一个getObject方法即可。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGeneraterManager</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getObject</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\"></a></p>\n<h2 id=\"定义工厂接口\"><a href=\"#定义工厂接口\" class=\"headerlink\" title=\"定义工厂接口\"></a>定义工厂接口</h2><p>工厂方法也只定义了一个generate方法，用于生成该工厂对应的类。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGenerater</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a></p>\n<h2 id=\"构造request工厂管理者\"><a href=\"#构造request工厂管理者\" class=\"headerlink\" title=\"构造request工厂管理者\"></a>构造request工厂管理者</h2><p><code>IGeneraterManager</code>忽视了各类工厂管理者的具体职能，此处需要赋予request工厂管理者 <strong>特定</strong> 的职能。</p>\n<p>这里只简要地加以说明。</p>\n<p>该工厂管理者的构造函数引入了Request抽象类，强制所有的工厂返回Request类型，这属于它的特定职能。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestGeneraterManager</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGeneraterManager</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_type;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_generater;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_determineType();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_determineGenerater();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">'Request.abstract.php'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getObject</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_generater-&gt;generate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_determineType</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// should do some check to determine request type</span></div><div class=\"line\">        <span class=\"comment\">// but for clear, we just name a type for this here</span></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_type = <span class=\"string\">'http'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_determineGenerater</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">$this</span>-&gt;_type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'http'</span>:</div><div class=\"line\">                <span class=\"keyword\">include_once</span> <span class=\"string\">'RequestGenerater_http.class.php'</span>;</div><div class=\"line\">                <span class=\"keyword\">$this</span>-&gt;_generater = <span class=\"keyword\">new</span> RequestGenerater_http();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\"></a></p>\n<h2 id=\"构造Request-http工厂\"><a href=\"#构造Request-http工厂\" class=\"headerlink\" title=\"构造Request_http工厂\"></a>构造Request_http工厂</h2><p>这个工厂返回Request_http类型，它还有权决定返回哪种Request_http类型，可能是Request_http_mobile以适应移动终端，也可能是Request_http_pc以适应桌面端。</p>\n<p>为了简单起见，这里只返回最基本的Request_http类型。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestGenerater_http</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGenerater</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">'Request_http.class.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Request_http();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，所有的类已经构造完毕。接下来是控制器的控制流。</p>\n<p><a name=\"%E6%8E%A7%E5%88%B6%E5%99%A8\"></a></p>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><p>首先在控制器中引入 <em>工厂管理者</em> 和各种 <em>观察者</em>。</p>\n<p>然后调用管理者的<code>getObject</code>方法获得正确的Request类，它同时也是被观察对象。</p>\n<p>接着将各种观察者绑定到Request上，或者解绑。</p>\n<p>最后通知观察者即可。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestGeneraterManager.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestSecurityObserver.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestxxxxxxxxObserver.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestxxxxxxxxObserver.class.php'</span>;</div><div class=\"line\">$request_generater_manager = <span class=\"keyword\">new</span> RequestGeneraterManager();</div><div class=\"line\">$request = $request_generater_manager-&gt;getObject();</div><div class=\"line\">$request-&gt;attach(<span class=\"keyword\">new</span> RequestSecurityObserver());</div><div class=\"line\">$request-&gt;attach(<span class=\"keyword\">new</span> RequestxxxxxxxxObserver());</div><div class=\"line\">$request-&gt;detach(<span class=\"keyword\">new</span> RequestxxxxxxxxObserver());</div><div class=\"line\">$request-&gt;notify();</div></pre></td></tr></table></figure>\n<p>通过以上一系列的定义，Request类已经非常灵活，后期无论是新增功能（新建观察者），还是新增类型（新建工厂），都可以轻松应付。</p>\n<p>新增功能时，只要改动控制器的attach和detach即可。<br>新增类型时，只要新建该类型，在工厂中做与其对应的处理即可。</p>\n<p>下面是程序流：</p>\n<ol>\n<li>控制器实例化工厂管理者RequestGeneraterManager</li>\n<li>控制器调用管理者的getObject方法获得Request对象<ol>\n<li>工厂管理者调用适当工厂的generate方法</li>\n<li>工厂生成相应对象，并赋予其合适的属性</li>\n</ol>\n</li>\n<li>控制器为Request对象绑定各种观察者</li>\n<li>控制器调用Request的notify方法，使观察者依次操作Request对象</li>\n<li>控制器重新拥有Request对象的控制权</li>\n</ol>"},{"title":"PHP观察者模式与发布订阅模式","date":"2017-10-27T16:00:00.000Z","_content":"\n>观察者模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。\n\n发布订阅模式实现了相同的功能，所以很多人认为观察者模式和发布订阅模式是一种A和A的别名的关系，其实不然：\n- 观察者模式\n    + 被观察者中注册了许多观察者，因此被观察者需要关心有哪些观察者需要注册\n    + 观察者拥有被观察者的引用，因此观察者可以读取、检测甚至更改被观察者的状态\n- 发布订阅模式\n    + 发布者不关心有多少订阅者，不关心他们的状态，只用通知消息中心即可\n    + 订阅者不关心谁是发布者，不关心发布者的状态，只用订阅消息中心即可\n\n观察者模式更像是一种监督：嘿，观察者，你得盯着我，如果发现什么问题，帮我处理一下。\n发布订阅模式则像一种广播体系：我们收听一些频道内容，而不去关心谁在维护这些频道内容。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [观察者模式](#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F)\n    - [定义观察者和被观察者接口](#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3)\n    - [构造被观察者](#%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85)\n    - [构造观察者](#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85)\n    - [测试与说明](#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E)\n- [发布订阅模式](#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F)\n    - [消息中心](#%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83)\n    - [发布者和订阅者](#%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85)\n    - [测试与说明](#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n<a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"></a>\n## 观察者模式\n\n<a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\"></a>\n### 定义观察者和被观察者接口\n\n```php\ninterface Observer\n{\n    function update(Observable $observee);\n}\n\ninterface Observable\n{\n    function attach(Observer $observer);\n    function detach(Observer $obesrver);\n    function notify();\n}\n```\n\n观察者接收被观察者并调用自身的update方法进行适当更新；被观察者利用attach注册观察者，detach解除某个注册，notify通知观察者进行更新。\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n### 构造被观察者\n\n```php\nclass MyObservee implements Observable\n{\n    private $_observers = [];\n    public $val = 0;\n\n    function attach(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    function detach(Observer $observer)\n    {\n        foreach ($this->_observers as $_index => $_observer) {\n            if ($_observer === $observer) {\n                unset($this->_observers[$_index]);\n                $this->_observers = array_values($this->_observers);\n                return;\n            }\n        }\n    }\n\n    function notify()\n    {\n        foreach ($this->_observers as $_observer) {\n            $_observer->update($this);\n        }\n    }\n}\n```\n\n注意notify方法中传递了$this。被观察者的val属性是为了测试使用，以便解释观察者是如何修改被观察者的状态的。\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n### 构造观察者\n\n```php\nclass MyObserver_1 implements Observer\n{\n    function update(Observable $observee)\n    {\n        $observee->val += 1;\n    }\n}\n\nclass MyObserver_2 implements Observer\n{\n    function update(Observable $observee)\n    {\n        $observee->val += 2;\n    }\n}\n```\n\n<a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\"></a>\n### 测试与说明\n\n```php\n$observee = new MyObservee();\n$observer = new MyObserver_1();\n\n$observee->attach($observer);\n$observee->attach(new MyObserver_2());\n$observee->notify();\necho $observee->val;    // 3\n\n$observee->detach($observer);\n$observee->notify();\necho $observee->val;    // 5\n```\n\n观察者模式中，观察者和被观察者存在一定的耦合，被观察者在请求观察者监控自己的同时，也赋予了观察者修改自身的能力。有时候这种副作用是我们想要的，比如设置一些flag，但同时也会为debug造成不便。\n\n<a name=\"%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"></a>\n## 发布订阅模式\n\n<a name=\"%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\"></a>\n### 消息中心\n\n```php\nclass MessageCenter\n{\n    // stores all the topic that can be subscribed\n    private static $_topics = [];\n\n    public static function publish($topic, $data = null)\n    {\n        if (isset(self::$_topics[$topic])) {\n            foreach (self::$_topics[$topic] as $_subscriber) {\n                call_user_func($_subscriber, $data);\n            }\n        }\n    }\n\n    public static function subscribe($topic, $callback)\n    {\n        if (!is_callable($callback)) {\n            return false;\n        }\n\n        if (!isset(self::$_topics[$topic])) {\n            self::$_topics[$topic] = [];\n        }\n        self::$_topics[$topic][] = $callback;\n        return true;\n    }\n\n    public static function getAllTopics()\n    {\n        return array_keys(self::$_topics);\n    }\n}\n```\n\n消息中心将消息频道保存在topics静态数组中，同时开发以下三个接口：\n- publish为发布者提供服务，供发布者发布消息，并允许发布者为消息附加解释数据\n- subscribe为订阅者服务，供其订阅服务，并要求其注册回调，以在有新消息时可以通知订阅者\n- getAllTopics获取当前存在的订阅服务\n\n在publish时，发布者不需要关心订阅者状态，因此消息中心在有订阅者存在时通知订阅者，没有订阅者存在时直接忽略这条publish。\n\n<a name=\"%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\"></a>\n### 发布者和订阅者\n\n我们虚构一个发布者Hollywood和一个MovieFans。MovieFans很喜欢Hollywood，我们为他订阅了Hoolywood的一些推送。\n\n```php\nclass Hollywood\n{\n    public function publishMovie()\n    {\n        $data = new \\stdClass();\n        $data->message = 'new movie comes!';\n        MessageCenter::publish('Hollywood\\movie', $data);\n    }\n\n    public function sayHelloToFans()\n    {\n        MessageCenter::publish('Hollywood\\hello');\n    }\n}\n\nclass MovieFans\n{\n    public function __construct()\n    {\n        MessageCenter::subscribe('Hollywood\\movie', [__CLASS__, 'checkMovie']);\n        MessageCenter::subscribe('Hollywood\\hello', [__CLASS__, 'feelHappy']);\n\n    }\n\n    public function checkMovie($data) {\n        echo 'WOW. Hollywood relased a new movie and said: ' . $data->message . PHP_EOL;\n    }\n\n    public function feelHappy() {\n        echo 'OH MY GOD ! ! ! Hollywood just said hello to me ! ! !' . PHP_EOL;\n    }\n}\n```\n\n<a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\"></a>\n### 测试与说明\n\n```php\n$hollywood = new Hollywood();\n$movieFans = new movieFans();\n$hollywood->publishMovie();\n$hollywood->sayHelloToFans();\n// echo: WOW. Hollywood relased a new movie and said: new movie comes!\n// echo: OH MY GOD ! ! ! Hollywood just said hello to me ! ! !\n```\n\nHollywood推送了一些消息，他的粉丝MovieFans订阅了这些服务，很开心能收到通知。\n\n更进一步，Hollywood可能有很多部门都在向同一个频道发布更新，这时只要消息中心进行一定的权限认证，保证这些推送是正规有效的，那么我们的订阅者则可以获得Hollywood的推送服务，而不必关心这些推送来自哪个部门。\n\n通过发布订阅模式，我们解除了发布者和订阅者之间的依赖，他们成为相互独立的对象。发布者专心做自己的事情，然后推送更新到消息中心；订阅者只需在消息中心订阅想要的服务，在其更新时便能收到消息中心的通知。","source":"_posts/php_observer.md","raw":"---\ntitle: PHP观察者模式与发布订阅模式\ndate: 2017/10/28\ntag: [PHP, 设计模式]\n---\n\n>观察者模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。\n\n发布订阅模式实现了相同的功能，所以很多人认为观察者模式和发布订阅模式是一种A和A的别名的关系，其实不然：\n- 观察者模式\n    + 被观察者中注册了许多观察者，因此被观察者需要关心有哪些观察者需要注册\n    + 观察者拥有被观察者的引用，因此观察者可以读取、检测甚至更改被观察者的状态\n- 发布订阅模式\n    + 发布者不关心有多少订阅者，不关心他们的状态，只用通知消息中心即可\n    + 订阅者不关心谁是发布者，不关心发布者的状态，只用订阅消息中心即可\n\n观察者模式更像是一种监督：嘿，观察者，你得盯着我，如果发现什么问题，帮我处理一下。\n发布订阅模式则像一种广播体系：我们收听一些频道内容，而不去关心谁在维护这些频道内容。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [观察者模式](#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F)\n    - [定义观察者和被观察者接口](#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3)\n    - [构造被观察者](#%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85)\n    - [构造观察者](#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85)\n    - [测试与说明](#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E)\n- [发布订阅模式](#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F)\n    - [消息中心](#%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83)\n    - [发布者和订阅者](#%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85)\n    - [测试与说明](#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n<a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"></a>\n## 观察者模式\n\n<a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\"></a>\n### 定义观察者和被观察者接口\n\n```php\ninterface Observer\n{\n    function update(Observable $observee);\n}\n\ninterface Observable\n{\n    function attach(Observer $observer);\n    function detach(Observer $obesrver);\n    function notify();\n}\n```\n\n观察者接收被观察者并调用自身的update方法进行适当更新；被观察者利用attach注册观察者，detach解除某个注册，notify通知观察者进行更新。\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n### 构造被观察者\n\n```php\nclass MyObservee implements Observable\n{\n    private $_observers = [];\n    public $val = 0;\n\n    function attach(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    function detach(Observer $observer)\n    {\n        foreach ($this->_observers as $_index => $_observer) {\n            if ($_observer === $observer) {\n                unset($this->_observers[$_index]);\n                $this->_observers = array_values($this->_observers);\n                return;\n            }\n        }\n    }\n\n    function notify()\n    {\n        foreach ($this->_observers as $_observer) {\n            $_observer->update($this);\n        }\n    }\n}\n```\n\n注意notify方法中传递了$this。被观察者的val属性是为了测试使用，以便解释观察者是如何修改被观察者的状态的。\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n### 构造观察者\n\n```php\nclass MyObserver_1 implements Observer\n{\n    function update(Observable $observee)\n    {\n        $observee->val += 1;\n    }\n}\n\nclass MyObserver_2 implements Observer\n{\n    function update(Observable $observee)\n    {\n        $observee->val += 2;\n    }\n}\n```\n\n<a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\"></a>\n### 测试与说明\n\n```php\n$observee = new MyObservee();\n$observer = new MyObserver_1();\n\n$observee->attach($observer);\n$observee->attach(new MyObserver_2());\n$observee->notify();\necho $observee->val;    // 3\n\n$observee->detach($observer);\n$observee->notify();\necho $observee->val;    // 5\n```\n\n观察者模式中，观察者和被观察者存在一定的耦合，被观察者在请求观察者监控自己的同时，也赋予了观察者修改自身的能力。有时候这种副作用是我们想要的，比如设置一些flag，但同时也会为debug造成不便。\n\n<a name=\"%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"></a>\n## 发布订阅模式\n\n<a name=\"%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\"></a>\n### 消息中心\n\n```php\nclass MessageCenter\n{\n    // stores all the topic that can be subscribed\n    private static $_topics = [];\n\n    public static function publish($topic, $data = null)\n    {\n        if (isset(self::$_topics[$topic])) {\n            foreach (self::$_topics[$topic] as $_subscriber) {\n                call_user_func($_subscriber, $data);\n            }\n        }\n    }\n\n    public static function subscribe($topic, $callback)\n    {\n        if (!is_callable($callback)) {\n            return false;\n        }\n\n        if (!isset(self::$_topics[$topic])) {\n            self::$_topics[$topic] = [];\n        }\n        self::$_topics[$topic][] = $callback;\n        return true;\n    }\n\n    public static function getAllTopics()\n    {\n        return array_keys(self::$_topics);\n    }\n}\n```\n\n消息中心将消息频道保存在topics静态数组中，同时开发以下三个接口：\n- publish为发布者提供服务，供发布者发布消息，并允许发布者为消息附加解释数据\n- subscribe为订阅者服务，供其订阅服务，并要求其注册回调，以在有新消息时可以通知订阅者\n- getAllTopics获取当前存在的订阅服务\n\n在publish时，发布者不需要关心订阅者状态，因此消息中心在有订阅者存在时通知订阅者，没有订阅者存在时直接忽略这条publish。\n\n<a name=\"%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\"></a>\n### 发布者和订阅者\n\n我们虚构一个发布者Hollywood和一个MovieFans。MovieFans很喜欢Hollywood，我们为他订阅了Hoolywood的一些推送。\n\n```php\nclass Hollywood\n{\n    public function publishMovie()\n    {\n        $data = new \\stdClass();\n        $data->message = 'new movie comes!';\n        MessageCenter::publish('Hollywood\\movie', $data);\n    }\n\n    public function sayHelloToFans()\n    {\n        MessageCenter::publish('Hollywood\\hello');\n    }\n}\n\nclass MovieFans\n{\n    public function __construct()\n    {\n        MessageCenter::subscribe('Hollywood\\movie', [__CLASS__, 'checkMovie']);\n        MessageCenter::subscribe('Hollywood\\hello', [__CLASS__, 'feelHappy']);\n\n    }\n\n    public function checkMovie($data) {\n        echo 'WOW. Hollywood relased a new movie and said: ' . $data->message . PHP_EOL;\n    }\n\n    public function feelHappy() {\n        echo 'OH MY GOD ! ! ! Hollywood just said hello to me ! ! !' . PHP_EOL;\n    }\n}\n```\n\n<a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\"></a>\n### 测试与说明\n\n```php\n$hollywood = new Hollywood();\n$movieFans = new movieFans();\n$hollywood->publishMovie();\n$hollywood->sayHelloToFans();\n// echo: WOW. Hollywood relased a new movie and said: new movie comes!\n// echo: OH MY GOD ! ! ! Hollywood just said hello to me ! ! !\n```\n\nHollywood推送了一些消息，他的粉丝MovieFans订阅了这些服务，很开心能收到通知。\n\n更进一步，Hollywood可能有很多部门都在向同一个频道发布更新，这时只要消息中心进行一定的权限认证，保证这些推送是正规有效的，那么我们的订阅者则可以获得Hollywood的推送服务，而不必关心这些推送来自哪个部门。\n\n通过发布订阅模式，我们解除了发布者和订阅者之间的依赖，他们成为相互独立的对象。发布者专心做自己的事情，然后推送更新到消息中心；订阅者只需在消息中心订阅想要的服务，在其更新时便能收到消息中心的通知。","slug":"php_observer","published":1,"updated":"2017-11-02T07:56:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9i9inxx00025vs8zd4zvzbd","content":"<blockquote>\n<p>观察者模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。</p>\n</blockquote>\n<p>发布订阅模式实现了相同的功能，所以很多人认为观察者模式和发布订阅模式是一种A和A的别名的关系，其实不然：</p>\n<ul>\n<li>观察者模式<ul>\n<li>被观察者中注册了许多观察者，因此被观察者需要关心有哪些观察者需要注册</li>\n<li>观察者拥有被观察者的引用，因此观察者可以读取、检测甚至更改被观察者的状态</li>\n</ul>\n</li>\n<li>发布订阅模式<ul>\n<li>发布者不关心有多少订阅者，不关心他们的状态，只用通知消息中心即可</li>\n<li>订阅者不关心谁是发布者，不关心发布者的状态，只用订阅消息中心即可</li>\n</ul>\n</li>\n</ul>\n<p>观察者模式更像是一种监督：嘿，观察者，你得盯着我，如果发现什么问题，帮我处理一下。<br>发布订阅模式则像一种广播体系：我们收听一些频道内容，而不去关心谁在维护这些频道内容。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">观察者模式</a><ul>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\">定义观察者和被观察者接口</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\">构造被观察者</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\">构造观察者</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\">测试与说明</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\">发布订阅模式</a><ul>\n<li><a href=\"#%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\">消息中心</a></li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\">发布者和订阅者</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\">测试与说明</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<p><a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"></a></p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p><a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\"></a></p>\n<h3 id=\"定义观察者和被观察者接口\"><a href=\"#定义观察者和被观察者接口\" class=\"headerlink\" title=\"定义观察者和被观察者接口\"></a>定义观察者和被观察者接口</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $obesrver)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>观察者接收被观察者并调用自身的update方法进行适当更新；被观察者利用attach注册观察者，detach解除某个注册，notify通知观察者进行更新。</p>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h3 id=\"构造被观察者\"><a href=\"#构造被观察者\" class=\"headerlink\" title=\"构造被观察者\"></a>构造被观察者</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObservee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers = [];</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers[] = $observer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $_index =&gt; $_observer) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($_observer === $observer) &#123;</div><div class=\"line\">                <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_observers[$_index]);</div><div class=\"line\">                <span class=\"keyword\">$this</span>-&gt;_observers = array_values(<span class=\"keyword\">$this</span>-&gt;_observers);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $_observer) &#123;</div><div class=\"line\">            $_observer-&gt;update(<span class=\"keyword\">$this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意notify方法中传递了$this。被观察者的val属性是为了测试使用，以便解释观察者是如何修改被观察者的状态的。</p>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h3 id=\"构造观察者\"><a href=\"#构造观察者\" class=\"headerlink\" title=\"构造观察者\"></a>构造观察者</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver_1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $observee-&gt;val += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver_2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $observee-&gt;val += <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\"></a></p>\n<h3 id=\"测试与说明\"><a href=\"#测试与说明\" class=\"headerlink\" title=\"测试与说明\"></a>测试与说明</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$observee = <span class=\"keyword\">new</span> MyObservee();</div><div class=\"line\">$observer = <span class=\"keyword\">new</span> MyObserver_1();</div><div class=\"line\"></div><div class=\"line\">$observee-&gt;attach($observer);</div><div class=\"line\">$observee-&gt;attach(<span class=\"keyword\">new</span> MyObserver_2());</div><div class=\"line\">$observee-&gt;notify();</div><div class=\"line\"><span class=\"keyword\">echo</span> $observee-&gt;val;    <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\">$observee-&gt;detach($observer);</div><div class=\"line\">$observee-&gt;notify();</div><div class=\"line\"><span class=\"keyword\">echo</span> $observee-&gt;val;    <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>观察者模式中，观察者和被观察者存在一定的耦合，被观察者在请求观察者监控自己的同时，也赋予了观察者修改自身的能力。有时候这种副作用是我们想要的，比如设置一些flag，但同时也会为debug造成不便。</p>\n<p><a name=\"%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"></a></p>\n<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p><a name=\"%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\"></a></p>\n<h3 id=\"消息中心\"><a href=\"#消息中心\" class=\"headerlink\" title=\"消息中心\"></a>消息中心</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageCenter</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// stores all the topic that can be subscribed</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_topics = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publish</span><span class=\"params\">($topic, $data = null)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_topics[$topic])) &#123;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">self</span>::$_topics[$topic] <span class=\"keyword\">as</span> $_subscriber) &#123;</div><div class=\"line\">                call_user_func($_subscriber, $data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span><span class=\"params\">($topic, $callback)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!is_callable($callback)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_topics[$topic])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_topics[$topic] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>::$_topics[$topic][] = $callback;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAllTopics</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> array_keys(<span class=\"keyword\">self</span>::$_topics);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>消息中心将消息频道保存在topics静态数组中，同时开发以下三个接口：</p>\n<ul>\n<li>publish为发布者提供服务，供发布者发布消息，并允许发布者为消息附加解释数据</li>\n<li>subscribe为订阅者服务，供其订阅服务，并要求其注册回调，以在有新消息时可以通知订阅者</li>\n<li>getAllTopics获取当前存在的订阅服务</li>\n</ul>\n<p>在publish时，发布者不需要关心订阅者状态，因此消息中心在有订阅者存在时通知订阅者，没有订阅者存在时直接忽略这条publish。</p>\n<p><a name=\"%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\"></a></p>\n<h3 id=\"发布者和订阅者\"><a href=\"#发布者和订阅者\" class=\"headerlink\" title=\"发布者和订阅者\"></a>发布者和订阅者</h3><p>我们虚构一个发布者Hollywood和一个MovieFans。MovieFans很喜欢Hollywood，我们为他订阅了Hoolywood的一些推送。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hollywood</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publishMovie</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $data = <span class=\"keyword\">new</span> \\stdClass();</div><div class=\"line\">        $data-&gt;message = <span class=\"string\">'new movie comes!'</span>;</div><div class=\"line\">        MessageCenter::publish(<span class=\"string\">'Hollywood\\movie'</span>, $data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHelloToFans</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        MessageCenter::publish(<span class=\"string\">'Hollywood\\hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieFans</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        MessageCenter::subscribe(<span class=\"string\">'Hollywood\\movie'</span>, [<span class=\"keyword\">__CLASS__</span>, <span class=\"string\">'checkMovie'</span>]);</div><div class=\"line\">        MessageCenter::subscribe(<span class=\"string\">'Hollywood\\hello'</span>, [<span class=\"keyword\">__CLASS__</span>, <span class=\"string\">'feelHappy'</span>]);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMovie</span><span class=\"params\">($data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'WOW. Hollywood relased a new movie and said: '</span> . $data-&gt;message . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">feelHappy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'OH MY GOD ! ! ! Hollywood just said hello to me ! ! !'</span> . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\"></a></p>\n<h3 id=\"测试与说明-1\"><a href=\"#测试与说明-1\" class=\"headerlink\" title=\"测试与说明\"></a>测试与说明</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hollywood = <span class=\"keyword\">new</span> Hollywood();</div><div class=\"line\">$movieFans = <span class=\"keyword\">new</span> movieFans();</div><div class=\"line\">$hollywood-&gt;publishMovie();</div><div class=\"line\">$hollywood-&gt;sayHelloToFans();</div><div class=\"line\"><span class=\"comment\">// echo: WOW. Hollywood relased a new movie and said: new movie comes!</span></div><div class=\"line\"><span class=\"comment\">// echo: OH MY GOD ! ! ! Hollywood just said hello to me ! ! !</span></div></pre></td></tr></table></figure>\n<p>Hollywood推送了一些消息，他的粉丝MovieFans订阅了这些服务，很开心能收到通知。</p>\n<p>更进一步，Hollywood可能有很多部门都在向同一个频道发布更新，这时只要消息中心进行一定的权限认证，保证这些推送是正规有效的，那么我们的订阅者则可以获得Hollywood的推送服务，而不必关心这些推送来自哪个部门。</p>\n<p>通过发布订阅模式，我们解除了发布者和订阅者之间的依赖，他们成为相互独立的对象。发布者专心做自己的事情，然后推送更新到消息中心；订阅者只需在消息中心订阅想要的服务，在其更新时便能收到消息中心的通知。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>观察者模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。</p>\n</blockquote>\n<p>发布订阅模式实现了相同的功能，所以很多人认为观察者模式和发布订阅模式是一种A和A的别名的关系，其实不然：</p>\n<ul>\n<li>观察者模式<ul>\n<li>被观察者中注册了许多观察者，因此被观察者需要关心有哪些观察者需要注册</li>\n<li>观察者拥有被观察者的引用，因此观察者可以读取、检测甚至更改被观察者的状态</li>\n</ul>\n</li>\n<li>发布订阅模式<ul>\n<li>发布者不关心有多少订阅者，不关心他们的状态，只用通知消息中心即可</li>\n<li>订阅者不关心谁是发布者，不关心发布者的状态，只用订阅消息中心即可</li>\n</ul>\n</li>\n</ul>\n<p>观察者模式更像是一种监督：嘿，观察者，你得盯着我，如果发现什么问题，帮我处理一下。<br>发布订阅模式则像一种广播体系：我们收听一些频道内容，而不去关心谁在维护这些频道内容。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">观察者模式</a><ul>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\">定义观察者和被观察者接口</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\">构造被观察者</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\">构造观察者</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\">测试与说明</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\">发布订阅模式</a><ul>\n<li><a href=\"#%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\">消息中心</a></li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\">发布者和订阅者</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\">测试与说明</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<p><a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"></a></p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p><a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\"></a></p>\n<h3 id=\"定义观察者和被观察者接口\"><a href=\"#定义观察者和被观察者接口\" class=\"headerlink\" title=\"定义观察者和被观察者接口\"></a>定义观察者和被观察者接口</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $obesrver)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>观察者接收被观察者并调用自身的update方法进行适当更新；被观察者利用attach注册观察者，detach解除某个注册，notify通知观察者进行更新。</p>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h3 id=\"构造被观察者\"><a href=\"#构造被观察者\" class=\"headerlink\" title=\"构造被观察者\"></a>构造被观察者</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObservee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers = [];</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers[] = $observer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $_index =&gt; $_observer) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($_observer === $observer) &#123;</div><div class=\"line\">                <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_observers[$_index]);</div><div class=\"line\">                <span class=\"keyword\">$this</span>-&gt;_observers = array_values(<span class=\"keyword\">$this</span>-&gt;_observers);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $_observer) &#123;</div><div class=\"line\">            $_observer-&gt;update(<span class=\"keyword\">$this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意notify方法中传递了$this。被观察者的val属性是为了测试使用，以便解释观察者是如何修改被观察者的状态的。</p>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h3 id=\"构造观察者\"><a href=\"#构造观察者\" class=\"headerlink\" title=\"构造观察者\"></a>构造观察者</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver_1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $observee-&gt;val += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver_2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $observee-&gt;val += <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\"></a></p>\n<h3 id=\"测试与说明\"><a href=\"#测试与说明\" class=\"headerlink\" title=\"测试与说明\"></a>测试与说明</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$observee = <span class=\"keyword\">new</span> MyObservee();</div><div class=\"line\">$observer = <span class=\"keyword\">new</span> MyObserver_1();</div><div class=\"line\"></div><div class=\"line\">$observee-&gt;attach($observer);</div><div class=\"line\">$observee-&gt;attach(<span class=\"keyword\">new</span> MyObserver_2());</div><div class=\"line\">$observee-&gt;notify();</div><div class=\"line\"><span class=\"keyword\">echo</span> $observee-&gt;val;    <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\">$observee-&gt;detach($observer);</div><div class=\"line\">$observee-&gt;notify();</div><div class=\"line\"><span class=\"keyword\">echo</span> $observee-&gt;val;    <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>观察者模式中，观察者和被观察者存在一定的耦合，被观察者在请求观察者监控自己的同时，也赋予了观察者修改自身的能力。有时候这种副作用是我们想要的，比如设置一些flag，但同时也会为debug造成不便。</p>\n<p><a name=\"%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"></a></p>\n<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p><a name=\"%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\"></a></p>\n<h3 id=\"消息中心\"><a href=\"#消息中心\" class=\"headerlink\" title=\"消息中心\"></a>消息中心</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageCenter</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// stores all the topic that can be subscribed</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_topics = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publish</span><span class=\"params\">($topic, $data = null)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_topics[$topic])) &#123;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">self</span>::$_topics[$topic] <span class=\"keyword\">as</span> $_subscriber) &#123;</div><div class=\"line\">                call_user_func($_subscriber, $data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span><span class=\"params\">($topic, $callback)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!is_callable($callback)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_topics[$topic])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_topics[$topic] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>::$_topics[$topic][] = $callback;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAllTopics</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> array_keys(<span class=\"keyword\">self</span>::$_topics);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>消息中心将消息频道保存在topics静态数组中，同时开发以下三个接口：</p>\n<ul>\n<li>publish为发布者提供服务，供发布者发布消息，并允许发布者为消息附加解释数据</li>\n<li>subscribe为订阅者服务，供其订阅服务，并要求其注册回调，以在有新消息时可以通知订阅者</li>\n<li>getAllTopics获取当前存在的订阅服务</li>\n</ul>\n<p>在publish时，发布者不需要关心订阅者状态，因此消息中心在有订阅者存在时通知订阅者，没有订阅者存在时直接忽略这条publish。</p>\n<p><a name=\"%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\"></a></p>\n<h3 id=\"发布者和订阅者\"><a href=\"#发布者和订阅者\" class=\"headerlink\" title=\"发布者和订阅者\"></a>发布者和订阅者</h3><p>我们虚构一个发布者Hollywood和一个MovieFans。MovieFans很喜欢Hollywood，我们为他订阅了Hoolywood的一些推送。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hollywood</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publishMovie</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $data = <span class=\"keyword\">new</span> \\stdClass();</div><div class=\"line\">        $data-&gt;message = <span class=\"string\">'new movie comes!'</span>;</div><div class=\"line\">        MessageCenter::publish(<span class=\"string\">'Hollywood\\movie'</span>, $data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHelloToFans</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        MessageCenter::publish(<span class=\"string\">'Hollywood\\hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieFans</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        MessageCenter::subscribe(<span class=\"string\">'Hollywood\\movie'</span>, [<span class=\"keyword\">__CLASS__</span>, <span class=\"string\">'checkMovie'</span>]);</div><div class=\"line\">        MessageCenter::subscribe(<span class=\"string\">'Hollywood\\hello'</span>, [<span class=\"keyword\">__CLASS__</span>, <span class=\"string\">'feelHappy'</span>]);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMovie</span><span class=\"params\">($data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'WOW. Hollywood relased a new movie and said: '</span> . $data-&gt;message . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">feelHappy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'OH MY GOD ! ! ! Hollywood just said hello to me ! ! !'</span> . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\"></a></p>\n<h3 id=\"测试与说明-1\"><a href=\"#测试与说明-1\" class=\"headerlink\" title=\"测试与说明\"></a>测试与说明</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hollywood = <span class=\"keyword\">new</span> Hollywood();</div><div class=\"line\">$movieFans = <span class=\"keyword\">new</span> movieFans();</div><div class=\"line\">$hollywood-&gt;publishMovie();</div><div class=\"line\">$hollywood-&gt;sayHelloToFans();</div><div class=\"line\"><span class=\"comment\">// echo: WOW. Hollywood relased a new movie and said: new movie comes!</span></div><div class=\"line\"><span class=\"comment\">// echo: OH MY GOD ! ! ! Hollywood just said hello to me ! ! !</span></div></pre></td></tr></table></figure>\n<p>Hollywood推送了一些消息，他的粉丝MovieFans订阅了这些服务，很开心能收到通知。</p>\n<p>更进一步，Hollywood可能有很多部门都在向同一个频道发布更新，这时只要消息中心进行一定的权限认证，保证这些推送是正规有效的，那么我们的订阅者则可以获得Hollywood的推送服务，而不必关心这些推送来自哪个部门。</p>\n<p>通过发布订阅模式，我们解除了发布者和订阅者之间的依赖，他们成为相互独立的对象。发布者专心做自己的事情，然后推送更新到消息中心；订阅者只需在消息中心订阅想要的服务，在其更新时便能收到消息中心的通知。</p>"},{"title":"记第一次压测","date":"2017-10-28T16:00:00.000Z","_content":"\n>ab(apache bench)是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要显示所安装的Apache每秒可以处理多少个请求。\n\n它不仅可以对apache服务器进行网站访问压力测试，也可以对其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。\n\n此次测试使用的机器为：\n- Mac下2G内存双CPU虚拟机\n- CentOS 6\n- nginx/1.12.1\n- PHP7.0\n- 测试页面为YII2.0框架初始页\n- 1-1000并发keep-alive\n\n目录：\n<!-- MarkdownTOC -->\n\n- [不使用opcache缓存](#%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98)\n- [使用opcache缓存](#%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98)\n- [响应时间比较](#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n安装ab：\n\n    yum install httpd-tools\n\n安装opcache：\n\n    yum install php70w-opcache\n\n<a name=\"%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a>\n## 不使用opcache缓存\n\n![without_opcache](/images/tools_test_ab/without_opcache.png)\n\n<a name=\"%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a>\n## 使用opcache缓存\n\n![with_opcache](/images/tools_test_ab/with_opcache.png)\n\n<a name=\"%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\"></a>\n## 响应时间比较\n\n![response_time_chart](/images/tools_test_ab/response_time_chart.png)\n\n\n","source":"_posts/tools_test_ab.md","raw":"---\ntitle: 记第一次压测\ndate: 2017/10/29\ntag: [Tool, Server]\n---\n\n>ab(apache bench)是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要显示所安装的Apache每秒可以处理多少个请求。\n\n它不仅可以对apache服务器进行网站访问压力测试，也可以对其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。\n\n此次测试使用的机器为：\n- Mac下2G内存双CPU虚拟机\n- CentOS 6\n- nginx/1.12.1\n- PHP7.0\n- 测试页面为YII2.0框架初始页\n- 1-1000并发keep-alive\n\n目录：\n<!-- MarkdownTOC -->\n\n- [不使用opcache缓存](#%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98)\n- [使用opcache缓存](#%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98)\n- [响应时间比较](#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n安装ab：\n\n    yum install httpd-tools\n\n安装opcache：\n\n    yum install php70w-opcache\n\n<a name=\"%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a>\n## 不使用opcache缓存\n\n![without_opcache](/images/tools_test_ab/without_opcache.png)\n\n<a name=\"%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a>\n## 使用opcache缓存\n\n![with_opcache](/images/tools_test_ab/with_opcache.png)\n\n<a name=\"%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\"></a>\n## 响应时间比较\n\n![response_time_chart](/images/tools_test_ab/response_time_chart.png)\n\n\n","slug":"tools_test_ab","published":1,"updated":"2017-11-02T07:56:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9i9iny500055vs8j4u1wy4q","content":"<blockquote>\n<p>ab(apache bench)是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要显示所安装的Apache每秒可以处理多少个请求。</p>\n</blockquote>\n<p>它不仅可以对apache服务器进行网站访问压力测试，也可以对其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。</p>\n<p>此次测试使用的机器为：</p>\n<ul>\n<li>Mac下2G内存双CPU虚拟机</li>\n<li>CentOS 6</li>\n<li>nginx/1.12.1</li>\n<li>PHP7.0</li>\n<li>测试页面为YII2.0框架初始页</li>\n<li>1-1000并发keep-alive</li>\n</ul>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\">不使用opcache缓存</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\">使用opcache缓存</a></li>\n<li><a href=\"#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\">响应时间比较</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<p>安装ab：</p>\n<pre><code>yum install httpd-tools\n</code></pre><p>安装opcache：</p>\n<pre><code>yum install php70w-opcache\n</code></pre><p><a name=\"%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a></p>\n<h2 id=\"不使用opcache缓存\"><a href=\"#不使用opcache缓存\" class=\"headerlink\" title=\"不使用opcache缓存\"></a>不使用opcache缓存</h2><p><img src=\"/images/tools_test_ab/without_opcache.png\" alt=\"without_opcache\"></p>\n<p><a name=\"%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a></p>\n<h2 id=\"使用opcache缓存\"><a href=\"#使用opcache缓存\" class=\"headerlink\" title=\"使用opcache缓存\"></a>使用opcache缓存</h2><p><img src=\"/images/tools_test_ab/with_opcache.png\" alt=\"with_opcache\"></p>\n<p><a name=\"%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\"></a></p>\n<h2 id=\"响应时间比较\"><a href=\"#响应时间比较\" class=\"headerlink\" title=\"响应时间比较\"></a>响应时间比较</h2><p><img src=\"/images/tools_test_ab/response_time_chart.png\" alt=\"response_time_chart\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>ab(apache bench)是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要显示所安装的Apache每秒可以处理多少个请求。</p>\n</blockquote>\n<p>它不仅可以对apache服务器进行网站访问压力测试，也可以对其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。</p>\n<p>此次测试使用的机器为：</p>\n<ul>\n<li>Mac下2G内存双CPU虚拟机</li>\n<li>CentOS 6</li>\n<li>nginx/1.12.1</li>\n<li>PHP7.0</li>\n<li>测试页面为YII2.0框架初始页</li>\n<li>1-1000并发keep-alive</li>\n</ul>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\">不使用opcache缓存</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\">使用opcache缓存</a></li>\n<li><a href=\"#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\">响应时间比较</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<p>安装ab：</p>\n<pre><code>yum install httpd-tools\n</code></pre><p>安装opcache：</p>\n<pre><code>yum install php70w-opcache\n</code></pre><p><a name=\"%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a></p>\n<h2 id=\"不使用opcache缓存\"><a href=\"#不使用opcache缓存\" class=\"headerlink\" title=\"不使用opcache缓存\"></a>不使用opcache缓存</h2><p><img src=\"/images/tools_test_ab/without_opcache.png\" alt=\"without_opcache\"></p>\n<p><a name=\"%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a></p>\n<h2 id=\"使用opcache缓存\"><a href=\"#使用opcache缓存\" class=\"headerlink\" title=\"使用opcache缓存\"></a>使用opcache缓存</h2><p><img src=\"/images/tools_test_ab/with_opcache.png\" alt=\"with_opcache\"></p>\n<p><a name=\"%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\"></a></p>\n<h2 id=\"响应时间比较\"><a href=\"#响应时间比较\" class=\"headerlink\" title=\"响应时间比较\"></a>响应时间比较</h2><p><img src=\"/images/tools_test_ab/response_time_chart.png\" alt=\"response_time_chart\"></p>"},{"title":"PHP单例模式","date":"2017-07-04T16:00:00.000Z","_content":"\n>单例最重要的方面在于对创建实例的限制能力。如果不这样做，潜在的多个实例将被创建，因而造成严重破坏\n\n如果在实例化时将类保存在全局变量，那么迟早会发生冲突。单例模式是一种对于全局变量的改进，可以保证全局只有一个单例类。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [一个简单的单例类](#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB)\n- [解决代码复用的问题](#%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98)\n    - [使用Traits](#%E4%BD%BF%E7%94%A8traits)\n    - [使用继承](#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF)\n- [解决复用类的问题](#%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98)\n- [对隐藏依赖的解释](#%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n<a name=\"%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\"></a>\n## 一个简单的单例类\n\n```php\nclass Singleton\n{\n    // This static variable stores this Singleton itself\n    private static $_instance = null;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do something here\n    }\n\n    // Prevent `clone` method to copy a Singleton\n    private function __clone()\n    {\n    }\n\n    // The only way to get this Singleton\n    public static function getInstance()\n    {\n        if (!isset(self::$_instance)) {\n            self::$_instance = new Singleton();\n        }\n        return self::$_instance;\n    }\n}\n\n$test = Singleton::getInstance();\n$test->val = 1;\n$test2 = Singleton::getInstance();\necho $test2->val;   // 1\n```\n\n上面实现了最原始的单例类：\n- 通过一个私有的静态变量保存自身\n- 私有化构造函数和克隆函数，使该类仅能从该类自身内部创建\n- 开放getInstance接口，在初次获取单例时创建单例并调用构造函数，之后始终返回该单例\n\n但同时也产生了一些问题：\n- 代码复用。两个单例类仅在构造时有较大差异时，是否只能拷贝代码？(比如连接两个不同的数据库)\n- 重用类。当需要同一个类的两个单例时，似乎无能为力。(比如需要同一数据库的两个独立连接)\n- 可能隐藏依赖。如果别的类中调用了单例类，这种依赖十分隐蔽。\n\n<a name=\"%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"></a>\n## 解决代码复用的问题\n\n两个类只在构造函数有所不同，其他方法和属性基本相似，此时有两种解决方法：\n- 使用Traits\n- 继承\n\n<a name=\"%E4%BD%BF%E7%94%A8traits\"></a>\n### 使用Traits\n\nTarits的最基本形式被认为是一种辅助编译器的复制粘贴技术。\n\n```php\ntrait Singleton\n{\n    // This static variable stores this Singleton itself\n    private static $_instance = null;\n\n    // Prevent `clone` method to copy a Singleton\n    private function __clone()\n    {\n    }\n\n    // The only way to get this Singleton\n    public static function getInstance()\n    {\n        if (!isset(self::$_instance)) {\n            $class = __CLASS__;\n            self::$_instance = new $class();\n        }\n        return self::$_instance;\n    }\n\n    // Some common methods goes here\n}\n\nclass Singleton_1\n{\n    use Singleton;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do something here\n    }\n}\n\nclass Singleton_2\n{\n    use Singleton;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do aother thing here\n    }\n}\n```\n\nTraits通过动态检测调用getInstance方法时的类，区分两个单例类，调用他们不同的构造方法，但同时又可以在trait结构体中实现相同的属性和方法。\n\n但是这种实现无法解决重用类的问题，如果需要两个Singleton_1的实例，Traits将束手无策。\n\n<a name=\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\"></a>\n### 使用继承\n\n```php\nabstract class SingletonClass\n{\n    /**\n     * @var array [instanceNeedle => instance]\n     * instanceNeedle equals \"className\".\n     */\n    private static $_instanceMap;\n\n    // Make the constructor protected either to prevent `new` method or to grant access to its implementer\n    final protected function __construct()\n    {\n    }\n\n    // Either to prevent `clone` method or to grant access to its implementer\n    final protected function __clone()\n    {\n    }\n\n    // The only way to get a Singleton\n    public function getInstance()\n    {\n        $class = get_called_class();\n\n        if (!isset(self::$_instanceMap[$instanceNeedle])) {\n            self::$_instanceMap[$instanceNeedle] = new $class();\n        }\n        return self::$_instanceMap[$instanceNeedle];\n    }\n}\n\nclass Singleton_1 extends SingletonClass\n{\n    public $val = 0;\n}\n\nclass Singleton_2 extends SingletonClass\n{\n    public $val = 0;\n}\n\n$test1 = Singleton_1::getInstance();\n$test2 = Singleton_2::getInstance();\n$test1->val = 1;\n$test2->val = 2;\necho $test1->val . $test2->val;   // 12\n```\n\n通过继承实现有以下要点：\n- 通过一个私有的静态数组保存单例类的映射\n- 受保护的构造函数和克隆函数，使该类可以从抽象类创建而不能从外部环境创建\n- 开放getInstance接口，初次获取某一单例时创建单例并调用构造函数，然后将其保存至数组中供将来使用\n\n接下来我们可以扩展该抽象，使其可以复用类\n\n<a name=\"%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\"></a>\n## 解决复用类的问题\n\n```php\nabstract class SingletonClass\n{\n    /**\n     * @var array [instanceNeedle => instance]\n     * instanceNeedle equals \"className\" (default) or \"className/instanceNeedle\" (specified instanceNeedle).\n     * all instanceNeedle will be saved in lower case, so it's case insensitive.\n     */\n    private static $_instanceMap;\n\n    // Make the constructor protected either to prevent `new` method or to grant access to its implementer\n    final protected function __construct()\n    {\n    }\n\n    // Either to prevent `clone` method or to grant access to its implementer\n    final protected function __clone()\n    {\n    }\n\n    // Grant its implementer a power to init itself\n    protected function init()\n    {\n    }\n\n    // The only way to get a Singleton\n    public function getInstance($instanceNeedle = '')\n    {\n        $class = get_called_class();\n        $instanceNeedle = empty($instanceNeedle) ? $class : $class . '/' . $instanceNeedle;\n        $instanceNeedle = strtolower($instanceNeedle);\n\n        if (!isset(self::$_instanceMap[$instanceNeedle])) {\n            self::$_instanceMap[$instanceNeedle] = new $class();\n            self::$_instanceMap[$instanceNeedle]->init();\n        }\n        return self::$_instanceMap[$instanceNeedle];\n    }\n}\n\nclass Singleton_1 extends SingletonClass\n{\n    public $val = 0;\n}\n\nclass Singleton_2 extends SingletonClass\n{\n    public $val = 0;\n}\n\n$test1 = Singleton_1::getInstance();\n$test2 = Singleton_2::getInstance();\n$test3 = Singleton_2::getInstance('test2');\n$test1->val = 1;\n$test2->val = 2;\n$test3->val = 3;\necho $test1->val . $test2->val . $test3->val;   // 123 \n```\n\n较之前的实现，该类在以下几处做了扩展：\n- 通过init方法，赋予子类初始化的能力\n- 可选的Needle，在指明Needle时，返回对应的单例，实现了复用类的能力\n\n\n<a name=\"%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\"></a>\n## 对隐藏依赖的解释\n\n现代化的PHP应用采用autoload方法加载类，这对单例类来说似乎非常友好。\n\n```php\nnamespace \\namespace\\to\\this\\class;\n\nuse \\class1\\in\\some\\namespace;\nuse \\class22\\in\\some\\namespace;\nuse \\Singleton\\in\\some\\namespace;\nuse \\class99\\in\\some\\namespace;\n\nclass SomeClass\n{\n    public val1;\n    public val2;\n    public val99;\n\n    function func1()\n    {\n    }\n\n    function func2()\n    {\n        // some code goes here\n        $var = Singleton::getInstance();\n        $var->doSomeThing();\n        // some other code\n    }\n\n    function func99()\n    {\n    }\n}\n```\n\n这个类文件中包含了命名空间声明，使用该类时，PHP会自动加载单例类的依赖，但这并不意味着不存在依赖。\n\n设想这么一种情况：\n- 单例类S用来保存数据库连接\n- 类A会为S注册数据库连接\n- 类B会利用S操作数据库\n\n如果A的实现者忘记了为S注册数据库连接，那么B操作数据库失败时，就只能去单例类S找原因，而真正的原因则藏在A中，可怜的B甚至不知道A的存在。\n","source":"_posts/php_singleton.md","raw":"---\ntitle: PHP单例模式\ndate: 2017/07/05\ntag: [PHP, 设计模式]\n---\n\n>单例最重要的方面在于对创建实例的限制能力。如果不这样做，潜在的多个实例将被创建，因而造成严重破坏\n\n如果在实例化时将类保存在全局变量，那么迟早会发生冲突。单例模式是一种对于全局变量的改进，可以保证全局只有一个单例类。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [一个简单的单例类](#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB)\n- [解决代码复用的问题](#%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98)\n    - [使用Traits](#%E4%BD%BF%E7%94%A8traits)\n    - [使用继承](#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF)\n- [解决复用类的问题](#%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98)\n- [对隐藏依赖的解释](#%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n<a name=\"%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\"></a>\n## 一个简单的单例类\n\n```php\nclass Singleton\n{\n    // This static variable stores this Singleton itself\n    private static $_instance = null;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do something here\n    }\n\n    // Prevent `clone` method to copy a Singleton\n    private function __clone()\n    {\n    }\n\n    // The only way to get this Singleton\n    public static function getInstance()\n    {\n        if (!isset(self::$_instance)) {\n            self::$_instance = new Singleton();\n        }\n        return self::$_instance;\n    }\n}\n\n$test = Singleton::getInstance();\n$test->val = 1;\n$test2 = Singleton::getInstance();\necho $test2->val;   // 1\n```\n\n上面实现了最原始的单例类：\n- 通过一个私有的静态变量保存自身\n- 私有化构造函数和克隆函数，使该类仅能从该类自身内部创建\n- 开放getInstance接口，在初次获取单例时创建单例并调用构造函数，之后始终返回该单例\n\n但同时也产生了一些问题：\n- 代码复用。两个单例类仅在构造时有较大差异时，是否只能拷贝代码？(比如连接两个不同的数据库)\n- 重用类。当需要同一个类的两个单例时，似乎无能为力。(比如需要同一数据库的两个独立连接)\n- 可能隐藏依赖。如果别的类中调用了单例类，这种依赖十分隐蔽。\n\n<a name=\"%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"></a>\n## 解决代码复用的问题\n\n两个类只在构造函数有所不同，其他方法和属性基本相似，此时有两种解决方法：\n- 使用Traits\n- 继承\n\n<a name=\"%E4%BD%BF%E7%94%A8traits\"></a>\n### 使用Traits\n\nTarits的最基本形式被认为是一种辅助编译器的复制粘贴技术。\n\n```php\ntrait Singleton\n{\n    // This static variable stores this Singleton itself\n    private static $_instance = null;\n\n    // Prevent `clone` method to copy a Singleton\n    private function __clone()\n    {\n    }\n\n    // The only way to get this Singleton\n    public static function getInstance()\n    {\n        if (!isset(self::$_instance)) {\n            $class = __CLASS__;\n            self::$_instance = new $class();\n        }\n        return self::$_instance;\n    }\n\n    // Some common methods goes here\n}\n\nclass Singleton_1\n{\n    use Singleton;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do something here\n    }\n}\n\nclass Singleton_2\n{\n    use Singleton;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do aother thing here\n    }\n}\n```\n\nTraits通过动态检测调用getInstance方法时的类，区分两个单例类，调用他们不同的构造方法，但同时又可以在trait结构体中实现相同的属性和方法。\n\n但是这种实现无法解决重用类的问题，如果需要两个Singleton_1的实例，Traits将束手无策。\n\n<a name=\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\"></a>\n### 使用继承\n\n```php\nabstract class SingletonClass\n{\n    /**\n     * @var array [instanceNeedle => instance]\n     * instanceNeedle equals \"className\".\n     */\n    private static $_instanceMap;\n\n    // Make the constructor protected either to prevent `new` method or to grant access to its implementer\n    final protected function __construct()\n    {\n    }\n\n    // Either to prevent `clone` method or to grant access to its implementer\n    final protected function __clone()\n    {\n    }\n\n    // The only way to get a Singleton\n    public function getInstance()\n    {\n        $class = get_called_class();\n\n        if (!isset(self::$_instanceMap[$instanceNeedle])) {\n            self::$_instanceMap[$instanceNeedle] = new $class();\n        }\n        return self::$_instanceMap[$instanceNeedle];\n    }\n}\n\nclass Singleton_1 extends SingletonClass\n{\n    public $val = 0;\n}\n\nclass Singleton_2 extends SingletonClass\n{\n    public $val = 0;\n}\n\n$test1 = Singleton_1::getInstance();\n$test2 = Singleton_2::getInstance();\n$test1->val = 1;\n$test2->val = 2;\necho $test1->val . $test2->val;   // 12\n```\n\n通过继承实现有以下要点：\n- 通过一个私有的静态数组保存单例类的映射\n- 受保护的构造函数和克隆函数，使该类可以从抽象类创建而不能从外部环境创建\n- 开放getInstance接口，初次获取某一单例时创建单例并调用构造函数，然后将其保存至数组中供将来使用\n\n接下来我们可以扩展该抽象，使其可以复用类\n\n<a name=\"%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\"></a>\n## 解决复用类的问题\n\n```php\nabstract class SingletonClass\n{\n    /**\n     * @var array [instanceNeedle => instance]\n     * instanceNeedle equals \"className\" (default) or \"className/instanceNeedle\" (specified instanceNeedle).\n     * all instanceNeedle will be saved in lower case, so it's case insensitive.\n     */\n    private static $_instanceMap;\n\n    // Make the constructor protected either to prevent `new` method or to grant access to its implementer\n    final protected function __construct()\n    {\n    }\n\n    // Either to prevent `clone` method or to grant access to its implementer\n    final protected function __clone()\n    {\n    }\n\n    // Grant its implementer a power to init itself\n    protected function init()\n    {\n    }\n\n    // The only way to get a Singleton\n    public function getInstance($instanceNeedle = '')\n    {\n        $class = get_called_class();\n        $instanceNeedle = empty($instanceNeedle) ? $class : $class . '/' . $instanceNeedle;\n        $instanceNeedle = strtolower($instanceNeedle);\n\n        if (!isset(self::$_instanceMap[$instanceNeedle])) {\n            self::$_instanceMap[$instanceNeedle] = new $class();\n            self::$_instanceMap[$instanceNeedle]->init();\n        }\n        return self::$_instanceMap[$instanceNeedle];\n    }\n}\n\nclass Singleton_1 extends SingletonClass\n{\n    public $val = 0;\n}\n\nclass Singleton_2 extends SingletonClass\n{\n    public $val = 0;\n}\n\n$test1 = Singleton_1::getInstance();\n$test2 = Singleton_2::getInstance();\n$test3 = Singleton_2::getInstance('test2');\n$test1->val = 1;\n$test2->val = 2;\n$test3->val = 3;\necho $test1->val . $test2->val . $test3->val;   // 123 \n```\n\n较之前的实现，该类在以下几处做了扩展：\n- 通过init方法，赋予子类初始化的能力\n- 可选的Needle，在指明Needle时，返回对应的单例，实现了复用类的能力\n\n\n<a name=\"%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\"></a>\n## 对隐藏依赖的解释\n\n现代化的PHP应用采用autoload方法加载类，这对单例类来说似乎非常友好。\n\n```php\nnamespace \\namespace\\to\\this\\class;\n\nuse \\class1\\in\\some\\namespace;\nuse \\class22\\in\\some\\namespace;\nuse \\Singleton\\in\\some\\namespace;\nuse \\class99\\in\\some\\namespace;\n\nclass SomeClass\n{\n    public val1;\n    public val2;\n    public val99;\n\n    function func1()\n    {\n    }\n\n    function func2()\n    {\n        // some code goes here\n        $var = Singleton::getInstance();\n        $var->doSomeThing();\n        // some other code\n    }\n\n    function func99()\n    {\n    }\n}\n```\n\n这个类文件中包含了命名空间声明，使用该类时，PHP会自动加载单例类的依赖，但这并不意味着不存在依赖。\n\n设想这么一种情况：\n- 单例类S用来保存数据库连接\n- 类A会为S注册数据库连接\n- 类B会利用S操作数据库\n\n如果A的实现者忘记了为S注册数据库连接，那么B操作数据库失败时，就只能去单例类S找原因，而真正的原因则藏在A中，可怜的B甚至不知道A的存在。\n","slug":"php_singleton","published":1,"updated":"2017-11-02T07:56:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9i9iny700065vs8lo2vh56l","content":"<blockquote>\n<p>单例最重要的方面在于对创建实例的限制能力。如果不这样做，潜在的多个实例将被创建，因而造成严重破坏</p>\n</blockquote>\n<p>如果在实例化时将类保存在全局变量，那么迟早会发生冲突。单例模式是一种对于全局变量的改进，可以保证全局只有一个单例类。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\">一个简单的单例类</a></li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\">解决代码复用的问题</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8traits\">使用Traits</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\">使用继承</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\">解决复用类的问题</a></li>\n<li><a href=\"#%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\">对隐藏依赖的解释</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<p><a name=\"%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\"></a></p>\n<h2 id=\"一个简单的单例类\"><a href=\"#一个简单的单例类\" class=\"headerlink\" title=\"一个简单的单例类\"></a>一个简单的单例类</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// This static variable stores this Singleton itself</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something here</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent `clone` method to copy a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get this Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = Singleton::getInstance();</div><div class=\"line\">$test-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2 = Singleton::getInstance();</div><div class=\"line\"><span class=\"keyword\">echo</span> $test2-&gt;val;   <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>上面实现了最原始的单例类：</p>\n<ul>\n<li>通过一个私有的静态变量保存自身</li>\n<li>私有化构造函数和克隆函数，使该类仅能从该类自身内部创建</li>\n<li>开放getInstance接口，在初次获取单例时创建单例并调用构造函数，之后始终返回该单例</li>\n</ul>\n<p>但同时也产生了一些问题：</p>\n<ul>\n<li>代码复用。两个单例类仅在构造时有较大差异时，是否只能拷贝代码？(比如连接两个不同的数据库)</li>\n<li>重用类。当需要同一个类的两个单例时，似乎无能为力。(比如需要同一数据库的两个独立连接)</li>\n<li>可能隐藏依赖。如果别的类中调用了单例类，这种依赖十分隐蔽。</li>\n</ul>\n<p><a name=\"%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"></a></p>\n<h2 id=\"解决代码复用的问题\"><a href=\"#解决代码复用的问题\" class=\"headerlink\" title=\"解决代码复用的问题\"></a>解决代码复用的问题</h2><p>两个类只在构造函数有所不同，其他方法和属性基本相似，此时有两种解决方法：</p>\n<ul>\n<li>使用Traits</li>\n<li>继承</li>\n</ul>\n<p><a name=\"%E4%BD%BF%E7%94%A8traits\"></a></p>\n<h3 id=\"使用Traits\"><a href=\"#使用Traits\" class=\"headerlink\" title=\"使用Traits\"></a>使用Traits</h3><p>Tarits的最基本形式被认为是一种辅助编译器的复制粘贴技术。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">trait</span> Singleton</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// This static variable stores this Singleton itself</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent `clone` method to copy a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get this Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            $class = <span class=\"keyword\">__CLASS__</span>;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Some common methods goes here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do aother thing here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Traits通过动态检测调用getInstance方法时的类，区分两个单例类，调用他们不同的构造方法，但同时又可以在trait结构体中实现相同的属性和方法。</p>\n<p>但是这种实现无法解决重用类的问题，如果需要两个Singleton_1的实例，Traits将束手无策。</p>\n<p><a name=\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\"></a></p>\n<h3 id=\"使用继承\"><a href=\"#使用继承\" class=\"headerlink\" title=\"使用继承\"></a>使用继承</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array [instanceNeedle =&gt; instance]</span></div><div class=\"line\"><span class=\"comment\">     * instanceNeedle equals \"className\".</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instanceMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor protected either to prevent `new` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Either to prevent `clone` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $class = get_called_class();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle] = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test1 = Singleton_1::getInstance();</div><div class=\"line\">$test2 = Singleton_2::getInstance();</div><div class=\"line\">$test1-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2-&gt;val = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $test1-&gt;val . $test2-&gt;val;   <span class=\"comment\">// 12</span></div></pre></td></tr></table></figure>\n<p>通过继承实现有以下要点：</p>\n<ul>\n<li>通过一个私有的静态数组保存单例类的映射</li>\n<li>受保护的构造函数和克隆函数，使该类可以从抽象类创建而不能从外部环境创建</li>\n<li>开放getInstance接口，初次获取某一单例时创建单例并调用构造函数，然后将其保存至数组中供将来使用</li>\n</ul>\n<p>接下来我们可以扩展该抽象，使其可以复用类</p>\n<p><a name=\"%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\"></a></p>\n<h2 id=\"解决复用类的问题\"><a href=\"#解决复用类的问题\" class=\"headerlink\" title=\"解决复用类的问题\"></a>解决复用类的问题</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array [instanceNeedle =&gt; instance]</span></div><div class=\"line\"><span class=\"comment\">     * instanceNeedle equals \"className\" (default) or \"className/instanceNeedle\" (specified instanceNeedle).</span></div><div class=\"line\"><span class=\"comment\">     * all instanceNeedle will be saved in lower case, so it's case insensitive.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instanceMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor protected either to prevent `new` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Either to prevent `clone` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Grant its implementer a power to init itself</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">($instanceNeedle = <span class=\"string\">''</span>)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $class = get_called_class();</div><div class=\"line\">        $instanceNeedle = <span class=\"keyword\">empty</span>($instanceNeedle) ? $class : $class . <span class=\"string\">'/'</span> . $instanceNeedle;</div><div class=\"line\">        $instanceNeedle = strtolower($instanceNeedle);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle] = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle]-&gt;init();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test1 = Singleton_1::getInstance();</div><div class=\"line\">$test2 = Singleton_2::getInstance();</div><div class=\"line\">$test3 = Singleton_2::getInstance(<span class=\"string\">'test2'</span>);</div><div class=\"line\">$test1-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2-&gt;val = <span class=\"number\">2</span>;</div><div class=\"line\">$test3-&gt;val = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $test1-&gt;val . $test2-&gt;val . $test3-&gt;val;   <span class=\"comment\">// 123</span></div></pre></td></tr></table></figure>\n<p>较之前的实现，该类在以下几处做了扩展：</p>\n<ul>\n<li>通过init方法，赋予子类初始化的能力</li>\n<li>可选的Needle，在指明Needle时，返回对应的单例，实现了复用类的能力</li>\n</ul>\n<p><a name=\"%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\"></a></p>\n<h2 id=\"对隐藏依赖的解释\"><a href=\"#对隐藏依赖的解释\" class=\"headerlink\" title=\"对隐藏依赖的解释\"></a>对隐藏依赖的解释</h2><p>现代化的PHP应用采用autoload方法加载类，这对单例类来说似乎非常友好。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> \\<span class=\"title\">namespace</span>\\<span class=\"title\">to</span>\\<span class=\"title\">this</span>\\<span class=\"title\">class</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class1</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class22</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">Singleton</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class99</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> val1;</div><div class=\"line\">    <span class=\"keyword\">public</span> val2;</div><div class=\"line\">    <span class=\"keyword\">public</span> val99;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// some code goes here</span></div><div class=\"line\">        $var = Singleton::getInstance();</div><div class=\"line\">        $var-&gt;doSomeThing();</div><div class=\"line\">        <span class=\"comment\">// some other code</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func99</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个类文件中包含了命名空间声明，使用该类时，PHP会自动加载单例类的依赖，但这并不意味着不存在依赖。</p>\n<p>设想这么一种情况：</p>\n<ul>\n<li>单例类S用来保存数据库连接</li>\n<li>类A会为S注册数据库连接</li>\n<li>类B会利用S操作数据库</li>\n</ul>\n<p>如果A的实现者忘记了为S注册数据库连接，那么B操作数据库失败时，就只能去单例类S找原因，而真正的原因则藏在A中，可怜的B甚至不知道A的存在。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>单例最重要的方面在于对创建实例的限制能力。如果不这样做，潜在的多个实例将被创建，因而造成严重破坏</p>\n</blockquote>\n<p>如果在实例化时将类保存在全局变量，那么迟早会发生冲突。单例模式是一种对于全局变量的改进，可以保证全局只有一个单例类。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\">一个简单的单例类</a></li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\">解决代码复用的问题</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8traits\">使用Traits</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\">使用继承</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\">解决复用类的问题</a></li>\n<li><a href=\"#%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\">对隐藏依赖的解释</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<p><a name=\"%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\"></a></p>\n<h2 id=\"一个简单的单例类\"><a href=\"#一个简单的单例类\" class=\"headerlink\" title=\"一个简单的单例类\"></a>一个简单的单例类</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// This static variable stores this Singleton itself</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something here</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent `clone` method to copy a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get this Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = Singleton::getInstance();</div><div class=\"line\">$test-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2 = Singleton::getInstance();</div><div class=\"line\"><span class=\"keyword\">echo</span> $test2-&gt;val;   <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>上面实现了最原始的单例类：</p>\n<ul>\n<li>通过一个私有的静态变量保存自身</li>\n<li>私有化构造函数和克隆函数，使该类仅能从该类自身内部创建</li>\n<li>开放getInstance接口，在初次获取单例时创建单例并调用构造函数，之后始终返回该单例</li>\n</ul>\n<p>但同时也产生了一些问题：</p>\n<ul>\n<li>代码复用。两个单例类仅在构造时有较大差异时，是否只能拷贝代码？(比如连接两个不同的数据库)</li>\n<li>重用类。当需要同一个类的两个单例时，似乎无能为力。(比如需要同一数据库的两个独立连接)</li>\n<li>可能隐藏依赖。如果别的类中调用了单例类，这种依赖十分隐蔽。</li>\n</ul>\n<p><a name=\"%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"></a></p>\n<h2 id=\"解决代码复用的问题\"><a href=\"#解决代码复用的问题\" class=\"headerlink\" title=\"解决代码复用的问题\"></a>解决代码复用的问题</h2><p>两个类只在构造函数有所不同，其他方法和属性基本相似，此时有两种解决方法：</p>\n<ul>\n<li>使用Traits</li>\n<li>继承</li>\n</ul>\n<p><a name=\"%E4%BD%BF%E7%94%A8traits\"></a></p>\n<h3 id=\"使用Traits\"><a href=\"#使用Traits\" class=\"headerlink\" title=\"使用Traits\"></a>使用Traits</h3><p>Tarits的最基本形式被认为是一种辅助编译器的复制粘贴技术。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">trait</span> Singleton</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// This static variable stores this Singleton itself</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent `clone` method to copy a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get this Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            $class = <span class=\"keyword\">__CLASS__</span>;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Some common methods goes here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do aother thing here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Traits通过动态检测调用getInstance方法时的类，区分两个单例类，调用他们不同的构造方法，但同时又可以在trait结构体中实现相同的属性和方法。</p>\n<p>但是这种实现无法解决重用类的问题，如果需要两个Singleton_1的实例，Traits将束手无策。</p>\n<p><a name=\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\"></a></p>\n<h3 id=\"使用继承\"><a href=\"#使用继承\" class=\"headerlink\" title=\"使用继承\"></a>使用继承</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array [instanceNeedle =&gt; instance]</span></div><div class=\"line\"><span class=\"comment\">     * instanceNeedle equals \"className\".</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instanceMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor protected either to prevent `new` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Either to prevent `clone` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $class = get_called_class();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle] = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test1 = Singleton_1::getInstance();</div><div class=\"line\">$test2 = Singleton_2::getInstance();</div><div class=\"line\">$test1-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2-&gt;val = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $test1-&gt;val . $test2-&gt;val;   <span class=\"comment\">// 12</span></div></pre></td></tr></table></figure>\n<p>通过继承实现有以下要点：</p>\n<ul>\n<li>通过一个私有的静态数组保存单例类的映射</li>\n<li>受保护的构造函数和克隆函数，使该类可以从抽象类创建而不能从外部环境创建</li>\n<li>开放getInstance接口，初次获取某一单例时创建单例并调用构造函数，然后将其保存至数组中供将来使用</li>\n</ul>\n<p>接下来我们可以扩展该抽象，使其可以复用类</p>\n<p><a name=\"%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\"></a></p>\n<h2 id=\"解决复用类的问题\"><a href=\"#解决复用类的问题\" class=\"headerlink\" title=\"解决复用类的问题\"></a>解决复用类的问题</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array [instanceNeedle =&gt; instance]</span></div><div class=\"line\"><span class=\"comment\">     * instanceNeedle equals \"className\" (default) or \"className/instanceNeedle\" (specified instanceNeedle).</span></div><div class=\"line\"><span class=\"comment\">     * all instanceNeedle will be saved in lower case, so it's case insensitive.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instanceMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor protected either to prevent `new` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Either to prevent `clone` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Grant its implementer a power to init itself</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">($instanceNeedle = <span class=\"string\">''</span>)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $class = get_called_class();</div><div class=\"line\">        $instanceNeedle = <span class=\"keyword\">empty</span>($instanceNeedle) ? $class : $class . <span class=\"string\">'/'</span> . $instanceNeedle;</div><div class=\"line\">        $instanceNeedle = strtolower($instanceNeedle);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle] = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle]-&gt;init();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test1 = Singleton_1::getInstance();</div><div class=\"line\">$test2 = Singleton_2::getInstance();</div><div class=\"line\">$test3 = Singleton_2::getInstance(<span class=\"string\">'test2'</span>);</div><div class=\"line\">$test1-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2-&gt;val = <span class=\"number\">2</span>;</div><div class=\"line\">$test3-&gt;val = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $test1-&gt;val . $test2-&gt;val . $test3-&gt;val;   <span class=\"comment\">// 123</span></div></pre></td></tr></table></figure>\n<p>较之前的实现，该类在以下几处做了扩展：</p>\n<ul>\n<li>通过init方法，赋予子类初始化的能力</li>\n<li>可选的Needle，在指明Needle时，返回对应的单例，实现了复用类的能力</li>\n</ul>\n<p><a name=\"%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\"></a></p>\n<h2 id=\"对隐藏依赖的解释\"><a href=\"#对隐藏依赖的解释\" class=\"headerlink\" title=\"对隐藏依赖的解释\"></a>对隐藏依赖的解释</h2><p>现代化的PHP应用采用autoload方法加载类，这对单例类来说似乎非常友好。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> \\<span class=\"title\">namespace</span>\\<span class=\"title\">to</span>\\<span class=\"title\">this</span>\\<span class=\"title\">class</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class1</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class22</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">Singleton</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class99</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> val1;</div><div class=\"line\">    <span class=\"keyword\">public</span> val2;</div><div class=\"line\">    <span class=\"keyword\">public</span> val99;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// some code goes here</span></div><div class=\"line\">        $var = Singleton::getInstance();</div><div class=\"line\">        $var-&gt;doSomeThing();</div><div class=\"line\">        <span class=\"comment\">// some other code</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func99</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个类文件中包含了命名空间声明，使用该类时，PHP会自动加载单例类的依赖，但这并不意味着不存在依赖。</p>\n<p>设想这么一种情况：</p>\n<ul>\n<li>单例类S用来保存数据库连接</li>\n<li>类A会为S注册数据库连接</li>\n<li>类B会利用S操作数据库</li>\n</ul>\n<p>如果A的实现者忘记了为S注册数据库连接，那么B操作数据库失败时，就只能去单例类S找原因，而真正的原因则藏在A中，可怜的B甚至不知道A的存在。</p>"},{"title":"ZooKeeper分布式配置踩坑记","date":"2017-11-02T07:11:23.000Z","_content":"\n> ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.  \n\nZooKeeper是一个集中式服务。它可以维护配置信息、支持命名空间、提供分布式同步和组服务。\n\n换句话说，ZooKeeper：\n- 用来维护配置信息\n- 配置被管理在命名空间中\n- 可以扩展，提供分布式服务\n- 支持分布式同步：一处修改，其他机器同步更新\n\n这次配置出坑比较久，Mark一下。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [坑1：主机数要求至少3台](#%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0)\n- [坑2：myid文件](#%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6)\n- [坑3：网络不通](#%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A)\n    - [1. 端口是否配置正确](#1-%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE)\n    - [2. hosts映射是否正确](#2-hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE)\n    - [3. 服务器防火墙](#3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99)\n    - [4. 服务器供应商安全策略](#4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n运行zkServer start后，当前路径会生成zookeeper.out文件，其中保存了启动日志。\n\n<a name=\"%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\"></a>\n## 坑1：主机数要求至少3台\n\nZooKeeper会选举一台机器作为leader，其它机器作为follower。**如果希望F台机器挂掉时仍能提供服务，ZooKeeper集群至少需要2F+1台机器。**如果有3台机器，可以挂1台；4台可以挂1台；5台可以挂2台；6台可以挂2台。\n\n所以3台机器可以拿出来一台维护，但是不能承担维护时另外两台中任何一台挂掉。而5台机器可以在其中一台维护时，仍然具有容灾能力。\n\n<a name=\"%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\"></a>\n## 坑2：myid文件\n\n分布式的ZooKeeper在配置好zoo.cfg之后，还需要配置myid文件。\n\nmyid文件应该放在zoo.cfg中dataDir下，值为zoo.cfg中server.id所对应的这台机器的id。\n\n<a name=\"%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\"></a>\n## 坑3：网络不通\n\n依次排查：\n\n<a name=\"1-%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE\"></a>\n### 1. 端口是否配置正确\n\n- 检查zoo.cfg文件，端口是否冲突\n- 检查myid文件和zoo.cfg配置是否一致\n- 启动zkServer后，查看是否在监听相应端口\n\n该命令查看java监听的端口，会显示客户端端口port_0和同步端口port_2，如果是leader，还会有port_1。对应zoo.cfg中`clientPort=port_0`、`server.x=host_x:port_1:port_2`。\n```\n> netstat -anp |grep LISTEN|grep java\ntcp        0      0 0.0.0.0:port_0                0.0.0.0:*                   LISTEN      19641/java\ntcp        0      0 0.0.0.0:port_2                0.0.0.0:*                   LISTEN      19641/java\n```\n\n<a name=\"2-hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a>\n### 2. hosts映射是否正确\n\n如果在zoo.cfg中使用了别名，应该在hosts中设置。\n\n**本机别名对应的hosts应设为0.0.0.0**，因此每台机器的hosts都应该略有不同。\n\n<a name=\"3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\"></a>\n### 3. 服务器防火墙\n\n确保集群之间相互没有被墙\n\n<a name=\"4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\"></a>\n### 4. 服务器供应商安全策略\n\n服务器供应商的安全策略可能存在端口限制\n\n","source":"_posts/tools_zookeeper.md","raw":"---\ntitle: ZooKeeper分布式配置踩坑记\ndate: 2017/11/02 15:11:23\ntag: [Tool, 分布式, Server, ZooKeeper]\n---\n\n> ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.  \n\nZooKeeper是一个集中式服务。它可以维护配置信息、支持命名空间、提供分布式同步和组服务。\n\n换句话说，ZooKeeper：\n- 用来维护配置信息\n- 配置被管理在命名空间中\n- 可以扩展，提供分布式服务\n- 支持分布式同步：一处修改，其他机器同步更新\n\n这次配置出坑比较久，Mark一下。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [坑1：主机数要求至少3台](#%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0)\n- [坑2：myid文件](#%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6)\n- [坑3：网络不通](#%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A)\n    - [1. 端口是否配置正确](#1-%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE)\n    - [2. hosts映射是否正确](#2-hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE)\n    - [3. 服务器防火墙](#3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99)\n    - [4. 服务器供应商安全策略](#4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n运行zkServer start后，当前路径会生成zookeeper.out文件，其中保存了启动日志。\n\n<a name=\"%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\"></a>\n## 坑1：主机数要求至少3台\n\nZooKeeper会选举一台机器作为leader，其它机器作为follower。**如果希望F台机器挂掉时仍能提供服务，ZooKeeper集群至少需要2F+1台机器。**如果有3台机器，可以挂1台；4台可以挂1台；5台可以挂2台；6台可以挂2台。\n\n所以3台机器可以拿出来一台维护，但是不能承担维护时另外两台中任何一台挂掉。而5台机器可以在其中一台维护时，仍然具有容灾能力。\n\n<a name=\"%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\"></a>\n## 坑2：myid文件\n\n分布式的ZooKeeper在配置好zoo.cfg之后，还需要配置myid文件。\n\nmyid文件应该放在zoo.cfg中dataDir下，值为zoo.cfg中server.id所对应的这台机器的id。\n\n<a name=\"%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\"></a>\n## 坑3：网络不通\n\n依次排查：\n\n<a name=\"1-%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE\"></a>\n### 1. 端口是否配置正确\n\n- 检查zoo.cfg文件，端口是否冲突\n- 检查myid文件和zoo.cfg配置是否一致\n- 启动zkServer后，查看是否在监听相应端口\n\n该命令查看java监听的端口，会显示客户端端口port_0和同步端口port_2，如果是leader，还会有port_1。对应zoo.cfg中`clientPort=port_0`、`server.x=host_x:port_1:port_2`。\n```\n> netstat -anp |grep LISTEN|grep java\ntcp        0      0 0.0.0.0:port_0                0.0.0.0:*                   LISTEN      19641/java\ntcp        0      0 0.0.0.0:port_2                0.0.0.0:*                   LISTEN      19641/java\n```\n\n<a name=\"2-hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a>\n### 2. hosts映射是否正确\n\n如果在zoo.cfg中使用了别名，应该在hosts中设置。\n\n**本机别名对应的hosts应设为0.0.0.0**，因此每台机器的hosts都应该略有不同。\n\n<a name=\"3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\"></a>\n### 3. 服务器防火墙\n\n确保集群之间相互没有被墙\n\n<a name=\"4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\"></a>\n### 4. 服务器供应商安全策略\n\n服务器供应商的安全策略可能存在端口限制\n\n","slug":"tools_zookeeper","published":1,"updated":"2017-11-02T09:07:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9i9iny900075vs89cpc972v","content":"<blockquote>\n<p>ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.  </p>\n</blockquote>\n<p>ZooKeeper是一个集中式服务。它可以维护配置信息、支持命名空间、提供分布式同步和组服务。</p>\n<p>换句话说，ZooKeeper：</p>\n<ul>\n<li>用来维护配置信息</li>\n<li>配置被管理在命名空间中</li>\n<li>可以扩展，提供分布式服务</li>\n<li>支持分布式同步：一处修改，其他机器同步更新</li>\n</ul>\n<p>这次配置出坑比较久，Mark一下。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\">坑1：主机数要求至少3台</a></li>\n<li><a href=\"#%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\">坑2：myid文件</a></li>\n<li><a href=\"#%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\">坑3：网络不通</a><ul>\n<li><a href=\"#1-%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE\">1. 端口是否配置正确</a></li>\n<li><a href=\"#2-hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\">2. hosts映射是否正确</a></li>\n<li><a href=\"#3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\">3. 服务器防火墙</a></li>\n<li><a href=\"#4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\">4. 服务器供应商安全策略</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<p>运行zkServer start后，当前路径会生成zookeeper.out文件，其中保存了启动日志。</p>\n<p><a name=\"%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\"></a></p>\n<h2 id=\"坑1：主机数要求至少3台\"><a href=\"#坑1：主机数要求至少3台\" class=\"headerlink\" title=\"坑1：主机数要求至少3台\"></a>坑1：主机数要求至少3台</h2><p>ZooKeeper会选举一台机器作为leader，其它机器作为follower。<strong>如果希望F台机器挂掉时仍能提供服务，ZooKeeper集群至少需要2F+1台机器。</strong>如果有3台机器，可以挂1台；4台可以挂1台；5台可以挂2台；6台可以挂2台。</p>\n<p>所以3台机器可以拿出来一台维护，但是不能承担维护时另外两台中任何一台挂掉。而5台机器可以在其中一台维护时，仍然具有容灾能力。</p>\n<p><a name=\"%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\"></a></p>\n<h2 id=\"坑2：myid文件\"><a href=\"#坑2：myid文件\" class=\"headerlink\" title=\"坑2：myid文件\"></a>坑2：myid文件</h2><p>分布式的ZooKeeper在配置好zoo.cfg之后，还需要配置myid文件。</p>\n<p>myid文件应该放在zoo.cfg中dataDir下，值为zoo.cfg中server.id所对应的这台机器的id。</p>\n<p><a name=\"%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\"></a></p>\n<h2 id=\"坑3：网络不通\"><a href=\"#坑3：网络不通\" class=\"headerlink\" title=\"坑3：网络不通\"></a>坑3：网络不通</h2><p>依次排查：</p>\n<p><a name=\"1-%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE\"></a></p>\n<h3 id=\"1-端口是否配置正确\"><a href=\"#1-端口是否配置正确\" class=\"headerlink\" title=\"1. 端口是否配置正确\"></a>1. 端口是否配置正确</h3><ul>\n<li>检查zoo.cfg文件，端口是否冲突</li>\n<li>检查myid文件和zoo.cfg配置是否一致</li>\n<li>启动zkServer后，查看是否在监听相应端口</li>\n</ul>\n<p>该命令查看java监听的端口，会显示客户端端口port_0和同步端口port_2，如果是leader，还会有port_1。对应zoo.cfg中<code>clientPort=port_0</code>、<code>server.x=host_x:port_1:port_2</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; netstat -anp |grep LISTEN|grep java</div><div class=\"line\">tcp        0      0 0.0.0.0:port_0                0.0.0.0:*                   LISTEN      19641/java</div><div class=\"line\">tcp        0      0 0.0.0.0:port_2                0.0.0.0:*                   LISTEN      19641/java</div></pre></td></tr></table></figure></p>\n<p><a name=\"2-hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a></p>\n<h3 id=\"2-hosts映射是否正确\"><a href=\"#2-hosts映射是否正确\" class=\"headerlink\" title=\"2. hosts映射是否正确\"></a>2. hosts映射是否正确</h3><p>如果在zoo.cfg中使用了别名，应该在hosts中设置。</p>\n<p><strong>本机别名对应的hosts应设为0.0.0.0</strong>，因此每台机器的hosts都应该略有不同。</p>\n<p><a name=\"3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\"></a></p>\n<h3 id=\"3-服务器防火墙\"><a href=\"#3-服务器防火墙\" class=\"headerlink\" title=\"3. 服务器防火墙\"></a>3. 服务器防火墙</h3><p>确保集群之间相互没有被墙</p>\n<p><a name=\"4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\"></a></p>\n<h3 id=\"4-服务器供应商安全策略\"><a href=\"#4-服务器供应商安全策略\" class=\"headerlink\" title=\"4. 服务器供应商安全策略\"></a>4. 服务器供应商安全策略</h3><p>服务器供应商的安全策略可能存在端口限制</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.  </p>\n</blockquote>\n<p>ZooKeeper是一个集中式服务。它可以维护配置信息、支持命名空间、提供分布式同步和组服务。</p>\n<p>换句话说，ZooKeeper：</p>\n<ul>\n<li>用来维护配置信息</li>\n<li>配置被管理在命名空间中</li>\n<li>可以扩展，提供分布式服务</li>\n<li>支持分布式同步：一处修改，其他机器同步更新</li>\n</ul>\n<p>这次配置出坑比较久，Mark一下。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\">坑1：主机数要求至少3台</a></li>\n<li><a href=\"#%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\">坑2：myid文件</a></li>\n<li><a href=\"#%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\">坑3：网络不通</a><ul>\n<li><a href=\"#1-%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE\">1. 端口是否配置正确</a></li>\n<li><a href=\"#2-hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\">2. hosts映射是否正确</a></li>\n<li><a href=\"#3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\">3. 服务器防火墙</a></li>\n<li><a href=\"#4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\">4. 服务器供应商安全策略</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<p>运行zkServer start后，当前路径会生成zookeeper.out文件，其中保存了启动日志。</p>\n<p><a name=\"%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\"></a></p>\n<h2 id=\"坑1：主机数要求至少3台\"><a href=\"#坑1：主机数要求至少3台\" class=\"headerlink\" title=\"坑1：主机数要求至少3台\"></a>坑1：主机数要求至少3台</h2><p>ZooKeeper会选举一台机器作为leader，其它机器作为follower。<strong>如果希望F台机器挂掉时仍能提供服务，ZooKeeper集群至少需要2F+1台机器。</strong>如果有3台机器，可以挂1台；4台可以挂1台；5台可以挂2台；6台可以挂2台。</p>\n<p>所以3台机器可以拿出来一台维护，但是不能承担维护时另外两台中任何一台挂掉。而5台机器可以在其中一台维护时，仍然具有容灾能力。</p>\n<p><a name=\"%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\"></a></p>\n<h2 id=\"坑2：myid文件\"><a href=\"#坑2：myid文件\" class=\"headerlink\" title=\"坑2：myid文件\"></a>坑2：myid文件</h2><p>分布式的ZooKeeper在配置好zoo.cfg之后，还需要配置myid文件。</p>\n<p>myid文件应该放在zoo.cfg中dataDir下，值为zoo.cfg中server.id所对应的这台机器的id。</p>\n<p><a name=\"%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\"></a></p>\n<h2 id=\"坑3：网络不通\"><a href=\"#坑3：网络不通\" class=\"headerlink\" title=\"坑3：网络不通\"></a>坑3：网络不通</h2><p>依次排查：</p>\n<p><a name=\"1-%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE\"></a></p>\n<h3 id=\"1-端口是否配置正确\"><a href=\"#1-端口是否配置正确\" class=\"headerlink\" title=\"1. 端口是否配置正确\"></a>1. 端口是否配置正确</h3><ul>\n<li>检查zoo.cfg文件，端口是否冲突</li>\n<li>检查myid文件和zoo.cfg配置是否一致</li>\n<li>启动zkServer后，查看是否在监听相应端口</li>\n</ul>\n<p>该命令查看java监听的端口，会显示客户端端口port_0和同步端口port_2，如果是leader，还会有port_1。对应zoo.cfg中<code>clientPort=port_0</code>、<code>server.x=host_x:port_1:port_2</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; netstat -anp |grep LISTEN|grep java</div><div class=\"line\">tcp        0      0 0.0.0.0:port_0                0.0.0.0:*                   LISTEN      19641/java</div><div class=\"line\">tcp        0      0 0.0.0.0:port_2                0.0.0.0:*                   LISTEN      19641/java</div></pre></td></tr></table></figure></p>\n<p><a name=\"2-hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a></p>\n<h3 id=\"2-hosts映射是否正确\"><a href=\"#2-hosts映射是否正确\" class=\"headerlink\" title=\"2. hosts映射是否正确\"></a>2. hosts映射是否正确</h3><p>如果在zoo.cfg中使用了别名，应该在hosts中设置。</p>\n<p><strong>本机别名对应的hosts应设为0.0.0.0</strong>，因此每台机器的hosts都应该略有不同。</p>\n<p><a name=\"3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\"></a></p>\n<h3 id=\"3-服务器防火墙\"><a href=\"#3-服务器防火墙\" class=\"headerlink\" title=\"3. 服务器防火墙\"></a>3. 服务器防火墙</h3><p>确保集群之间相互没有被墙</p>\n<p><a name=\"4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\"></a></p>\n<h3 id=\"4-服务器供应商安全策略\"><a href=\"#4-服务器供应商安全策略\" class=\"headerlink\" title=\"4. 服务器供应商安全策略\"></a>4. 服务器供应商安全策略</h3><p>服务器供应商的安全策略可能存在端口限制</p>"},{"title":"VBS探索U盘","date":"2017-06-26T16:00:00.000Z","_content":"\n如果存在多个可移动磁盘，通过该脚本可以迅速拷贝目标文件，并分析磁盘结构。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [参数说明](#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E)\n- [源代码](#%E6%BA%90%E4%BB%A3%E7%A0%81)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n<a name=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"></a>\n## 参数说明\n\n```\n    ListLB：         列出大于该值的文件，0表示列出所有\n\n    ListDepthToStop：列表深度，0表示列出所有\n\n    RunFileCopy：    是否运行拷贝模块\n\n    CopyFrom：       进行拷贝搜索的根目录\n\n    CopyPattern：    拷贝搜索的正则表达式\n\n    CopyLB：         拷贝下界，0表示无下界\n\n    CopyUB：         拷贝上界，0表示无上界\n\n    InfoTo：         U盘信息保存目录\n\n    DriveInfoTo：    U盘信息保存文件\n\n    DriveListTo：    U盘文件信息保存文件\n```\n\n<a name=\"%E6%BA%90%E4%BB%A3%E7%A0%81\"></a>\n## 源代码\n\n```vbs\nListLB              = 0\nListDepthToStop     = 0\nRunFileCopy         = True\nCopyFrom            = \"\"\nCopyPattern         = \"\"\nCopyLB              = 0\nCopyUB              = 1024*1024*3\nInfoTo              = \"\"\nDriveInfoTo         = \"\"\nDriveListTo         = \"\"\n\nset FSO         = CreateObject(\"Scripting.FileSystemObject\")\nset Drives      = FSO.Drives\nset RE          = New RegExp\nCurDrive        = FSO.GetDriveName(FSO.GetAbsolutePathName(\".\"))\nRE.Pattern      = CopyPattern\n\nFor Each Drive In Drives\n    If  Drive.DriveType = 1 _\n    AND Drive.Path <> CurDrive Then\n        Randomize\n        SavingFolder    = FSO.BuildPath(CurDrive\\InfoTo\\Drive.VolumeName_Int(Rnd()*100))\n        Call MakeFolder(SavingFolder)\n\n        set F_DriveInfo = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveInfoTo), 2, True, -1)\n        set F_DriveList = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveListTo), 2, True, -1)\n        Call ListDrive(Drive.Path)\n        Call ListFolder(Drive.RootFolder.Path, 1)\n        F_DriveInfo.Close\n        F_DriveList.Close\n\n        IF CopyFrom = \"\" Then CopyFrom = Drive.RootFolder.Path\n        IF RunFileCopy = True AND FSO.FolderExists(CopyFrom) Then _\n            Call FileCopy(CopyFrom, SavingFolder)\n    End If\nNext\n\nFunction ListDrive (drive_path__)\n    set drive__     = FSO.GetDrive(drive_path__)\n    F_DriveInfo.WriteLine(\"Date:\" & \" \" & Date())\n    F_DriveInfo.WriteLine(\"VolumeName:\" & \" \" & drive__.VolumeName)\n    F_DriveInfo.WriteLine(\"FileSystem:\" & \" \" & drive__.FileSystem)\n    F_DriveInfo.WriteLine(\"TotalSize:\" & \" \" & drive__.TotalSize/1024/1024)\n    F_DriveInfo.WriteLine(\"FreeSpace:\" & \" \" & drive__.FreeSpace/1024/1024)\nEnd Function\n\nFunction ListFolder(cur_folder__, cur_depth__)\n    F_DriveList.WriteLine(Space((cur_depth__-1)*2) & \"+ \" & FSO.GetBaseName(cur_folder__))\n    For Each cur_file__ In FSO.GetFolder(cur_folder__).Files\n        If (ListLB = 0 OR cur_file__.Size > ListLB) Then _\n            F_DriveList.WriteLine(Space(cur_depth__*2) & cur_file__.Name)\n    Next\n    For Each sub_folder__ In FSO.GetFolder(cur_folder__).SubFolders\n        IF (DepthToStop = 0 OR cur_depth__ < DepthToStop) Then _\n            Call ListFolder(sub_folder__, cur_depth__ + 1)\n    Next\nEnd Function\n\nFunction FileCopy(src_folder__, sav_folder__)\n    For Each cur_file__ In FSO.GetFolder(src_folder__).Files\n        IF  (CopyUB = 0 OR cur_file__.Size < CopyUB) _\n        AND (CopyLB = 0 OR cur_file__.Size > CopyLB) _\n        AND (RE.Test(cur_file__.Name) = True) Then\n            IF Not FSO.FolderExists(sav_folder__) Then Call MakeFolder(sav_folder__)\n            FSO.CopyFile cur_file__.Path, FSO.BuildPath(sav_folder__, cur_file__.Name)\n        End If\n    Next\n    For Each sub_folder__ In FSO.GetFolder(src_folder__).SubFolders\n        Call FileCopy(sub_folder__,FSO.BuildPath(sav_folder__, FSO.GetBaseName(sub_folder__)))\n    Next\nEnd Function\n\nFunction MakeFolder(tar_path__)\n    If Not FSO.FolderExists(FSO.GetParentFolderName(tar_path__)) Then _\n        Call MakeFolder(FSO.GetParentFolderName(tar_path__))\n    If Not FSO.FolderExists(tar_path__) Then _\n        FSO.CreateFolder(tar_path__)\nEnd Function\n```","source":"_posts/vbs_copyFileFromUDisk.md","raw":"---\ntitle: VBS探索U盘\ndate: 2017/06/27\ntag: [VBS]\n---\n\n如果存在多个可移动磁盘，通过该脚本可以迅速拷贝目标文件，并分析磁盘结构。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [参数说明](#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E)\n- [源代码](#%E6%BA%90%E4%BB%A3%E7%A0%81)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n<a name=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"></a>\n## 参数说明\n\n```\n    ListLB：         列出大于该值的文件，0表示列出所有\n\n    ListDepthToStop：列表深度，0表示列出所有\n\n    RunFileCopy：    是否运行拷贝模块\n\n    CopyFrom：       进行拷贝搜索的根目录\n\n    CopyPattern：    拷贝搜索的正则表达式\n\n    CopyLB：         拷贝下界，0表示无下界\n\n    CopyUB：         拷贝上界，0表示无上界\n\n    InfoTo：         U盘信息保存目录\n\n    DriveInfoTo：    U盘信息保存文件\n\n    DriveListTo：    U盘文件信息保存文件\n```\n\n<a name=\"%E6%BA%90%E4%BB%A3%E7%A0%81\"></a>\n## 源代码\n\n```vbs\nListLB              = 0\nListDepthToStop     = 0\nRunFileCopy         = True\nCopyFrom            = \"\"\nCopyPattern         = \"\"\nCopyLB              = 0\nCopyUB              = 1024*1024*3\nInfoTo              = \"\"\nDriveInfoTo         = \"\"\nDriveListTo         = \"\"\n\nset FSO         = CreateObject(\"Scripting.FileSystemObject\")\nset Drives      = FSO.Drives\nset RE          = New RegExp\nCurDrive        = FSO.GetDriveName(FSO.GetAbsolutePathName(\".\"))\nRE.Pattern      = CopyPattern\n\nFor Each Drive In Drives\n    If  Drive.DriveType = 1 _\n    AND Drive.Path <> CurDrive Then\n        Randomize\n        SavingFolder    = FSO.BuildPath(CurDrive\\InfoTo\\Drive.VolumeName_Int(Rnd()*100))\n        Call MakeFolder(SavingFolder)\n\n        set F_DriveInfo = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveInfoTo), 2, True, -1)\n        set F_DriveList = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveListTo), 2, True, -1)\n        Call ListDrive(Drive.Path)\n        Call ListFolder(Drive.RootFolder.Path, 1)\n        F_DriveInfo.Close\n        F_DriveList.Close\n\n        IF CopyFrom = \"\" Then CopyFrom = Drive.RootFolder.Path\n        IF RunFileCopy = True AND FSO.FolderExists(CopyFrom) Then _\n            Call FileCopy(CopyFrom, SavingFolder)\n    End If\nNext\n\nFunction ListDrive (drive_path__)\n    set drive__     = FSO.GetDrive(drive_path__)\n    F_DriveInfo.WriteLine(\"Date:\" & \" \" & Date())\n    F_DriveInfo.WriteLine(\"VolumeName:\" & \" \" & drive__.VolumeName)\n    F_DriveInfo.WriteLine(\"FileSystem:\" & \" \" & drive__.FileSystem)\n    F_DriveInfo.WriteLine(\"TotalSize:\" & \" \" & drive__.TotalSize/1024/1024)\n    F_DriveInfo.WriteLine(\"FreeSpace:\" & \" \" & drive__.FreeSpace/1024/1024)\nEnd Function\n\nFunction ListFolder(cur_folder__, cur_depth__)\n    F_DriveList.WriteLine(Space((cur_depth__-1)*2) & \"+ \" & FSO.GetBaseName(cur_folder__))\n    For Each cur_file__ In FSO.GetFolder(cur_folder__).Files\n        If (ListLB = 0 OR cur_file__.Size > ListLB) Then _\n            F_DriveList.WriteLine(Space(cur_depth__*2) & cur_file__.Name)\n    Next\n    For Each sub_folder__ In FSO.GetFolder(cur_folder__).SubFolders\n        IF (DepthToStop = 0 OR cur_depth__ < DepthToStop) Then _\n            Call ListFolder(sub_folder__, cur_depth__ + 1)\n    Next\nEnd Function\n\nFunction FileCopy(src_folder__, sav_folder__)\n    For Each cur_file__ In FSO.GetFolder(src_folder__).Files\n        IF  (CopyUB = 0 OR cur_file__.Size < CopyUB) _\n        AND (CopyLB = 0 OR cur_file__.Size > CopyLB) _\n        AND (RE.Test(cur_file__.Name) = True) Then\n            IF Not FSO.FolderExists(sav_folder__) Then Call MakeFolder(sav_folder__)\n            FSO.CopyFile cur_file__.Path, FSO.BuildPath(sav_folder__, cur_file__.Name)\n        End If\n    Next\n    For Each sub_folder__ In FSO.GetFolder(src_folder__).SubFolders\n        Call FileCopy(sub_folder__,FSO.BuildPath(sav_folder__, FSO.GetBaseName(sub_folder__)))\n    Next\nEnd Function\n\nFunction MakeFolder(tar_path__)\n    If Not FSO.FolderExists(FSO.GetParentFolderName(tar_path__)) Then _\n        Call MakeFolder(FSO.GetParentFolderName(tar_path__))\n    If Not FSO.FolderExists(tar_path__) Then _\n        FSO.CreateFolder(tar_path__)\nEnd Function\n```","slug":"vbs_copyFileFromUDisk","published":1,"updated":"2017-11-02T07:56:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9i9inyc00095vs8cy4nyq0o","content":"<p>如果存在多个可移动磁盘，通过该脚本可以迅速拷贝目标文件，并分析磁盘结构。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<p><a name=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"></a></p>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListLB：         列出大于该值的文件，0表示列出所有</div><div class=\"line\"></div><div class=\"line\">ListDepthToStop：列表深度，0表示列出所有</div><div class=\"line\"></div><div class=\"line\">RunFileCopy：    是否运行拷贝模块</div><div class=\"line\"></div><div class=\"line\">CopyFrom：       进行拷贝搜索的根目录</div><div class=\"line\"></div><div class=\"line\">CopyPattern：    拷贝搜索的正则表达式</div><div class=\"line\"></div><div class=\"line\">CopyLB：         拷贝下界，0表示无下界</div><div class=\"line\"></div><div class=\"line\">CopyUB：         拷贝上界，0表示无上界</div><div class=\"line\"></div><div class=\"line\">InfoTo：         U盘信息保存目录</div><div class=\"line\"></div><div class=\"line\">DriveInfoTo：    U盘信息保存文件</div><div class=\"line\"></div><div class=\"line\">DriveListTo：    U盘文件信息保存文件</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%BA%90%E4%BB%A3%E7%A0%81\"></a></p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListLB              = <span class=\"number\">0</span></div><div class=\"line\">ListDepthToStop     = <span class=\"number\">0</span></div><div class=\"line\">RunFileCopy         = <span class=\"literal\">True</span></div><div class=\"line\">CopyFrom            = <span class=\"string\">\"\"</span></div><div class=\"line\">CopyPattern         = <span class=\"string\">\"\"</span></div><div class=\"line\">CopyLB              = <span class=\"number\">0</span></div><div class=\"line\">CopyUB              = <span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">3</span></div><div class=\"line\">InfoTo              = <span class=\"string\">\"\"</span></div><div class=\"line\">DriveInfoTo         = <span class=\"string\">\"\"</span></div><div class=\"line\">DriveListTo         = <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span> FSO         = <span class=\"built_in\">CreateObject</span>(<span class=\"string\">\"Scripting.FileSystemObject\"</span>)</div><div class=\"line\"><span class=\"keyword\">set</span> Drives      = FSO.Drives</div><div class=\"line\"><span class=\"keyword\">set</span> RE          = <span class=\"keyword\">New</span> <span class=\"built_in\">RegExp</span></div><div class=\"line\">CurDrive        = FSO.GetDriveName(FSO.GetAbsolutePathName(<span class=\"string\">\".\"</span>))</div><div class=\"line\">RE.Pattern      = CopyPattern</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> Drive <span class=\"keyword\">In</span> Drives</div><div class=\"line\">    <span class=\"keyword\">If</span>  Drive.DriveType = <span class=\"number\">1</span> _</div><div class=\"line\">    <span class=\"keyword\">AND</span> Drive.Path &lt;&gt; CurDrive <span class=\"keyword\">Then</span></div><div class=\"line\">        <span class=\"keyword\">Randomize</span></div><div class=\"line\">        SavingFolder    = FSO.BuildPath(CurDrive\\InfoTo\\Drive.VolumeName_Int(<span class=\"built_in\">Rnd</span>()*<span class=\"number\">100</span>))</div><div class=\"line\">        <span class=\"keyword\">Call</span> MakeFolder(SavingFolder)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> F_DriveInfo = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveInfoTo), <span class=\"number\">2</span>, <span class=\"literal\">True</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">set</span> F_DriveList = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveListTo), <span class=\"number\">2</span>, <span class=\"literal\">True</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">Call</span> ListDrive(Drive.Path)</div><div class=\"line\">        <span class=\"keyword\">Call</span> ListFolder(Drive.RootFolder.Path, <span class=\"number\">1</span>)</div><div class=\"line\">        F_DriveInfo.Close</div><div class=\"line\">        F_DriveList.Close</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">IF</span> CopyFrom = <span class=\"string\">\"\"</span> <span class=\"keyword\">Then</span> CopyFrom = Drive.RootFolder.Path</div><div class=\"line\">        <span class=\"keyword\">IF</span> RunFileCopy = <span class=\"literal\">True</span> <span class=\"keyword\">AND</span> FSO.FolderExists(CopyFrom) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            <span class=\"keyword\">Call</span> FileCopy(CopyFrom, SavingFolder)</div><div class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></div><div class=\"line\"><span class=\"keyword\">Next</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> ListDrive (drive_path__)</div><div class=\"line\">    <span class=\"keyword\">set</span> drive__     = FSO.GetDrive(drive_path__)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"Date:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; <span class=\"built_in\">Date</span>())</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"VolumeName:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.VolumeName)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"FileSystem:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.FileSystem)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"TotalSize:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.TotalSize/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"FreeSpace:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.FreeSpace/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>)</div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> ListFolder(cur_folder__, cur_depth__)</div><div class=\"line\">    F_DriveList.WriteLine(<span class=\"built_in\">Space</span>((cur_depth__<span class=\"number\">-1</span>)*<span class=\"number\">2</span>) &amp; <span class=\"string\">\"+ \"</span> &amp; FSO.GetBaseName(cur_folder__))</div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> cur_file__ <span class=\"keyword\">In</span> FSO.GetFolder(cur_folder__).Files</div><div class=\"line\">        <span class=\"keyword\">If</span> (ListLB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &gt; ListLB) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            F_DriveList.WriteLine(<span class=\"built_in\">Space</span>(cur_depth__*<span class=\"number\">2</span>) &amp; cur_file__.Name)</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> sub_folder__ <span class=\"keyword\">In</span> FSO.GetFolder(cur_folder__).SubFolders</div><div class=\"line\">        <span class=\"keyword\">IF</span> (DepthToStop = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_depth__ &lt; DepthToStop) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            <span class=\"keyword\">Call</span> ListFolder(sub_folder__, cur_depth__ + <span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> FileCopy(src_folder__, sav_folder__)</div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> cur_file__ <span class=\"keyword\">In</span> FSO.GetFolder(src_folder__).Files</div><div class=\"line\">        <span class=\"keyword\">IF</span>  (CopyUB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &lt; CopyUB) _</div><div class=\"line\">        <span class=\"keyword\">AND</span> (CopyLB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &gt; CopyLB) _</div><div class=\"line\">        <span class=\"keyword\">AND</span> (RE.Test(cur_file__.Name) = <span class=\"literal\">True</span>) <span class=\"keyword\">Then</span></div><div class=\"line\">            <span class=\"keyword\">IF</span> <span class=\"keyword\">Not</span> FSO.FolderExists(sav_folder__) <span class=\"keyword\">Then</span> <span class=\"keyword\">Call</span> MakeFolder(sav_folder__)</div><div class=\"line\">            FSO.CopyFile cur_file__.Path, FSO.BuildPath(sav_folder__, cur_file__.Name)</div><div class=\"line\">        <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> sub_folder__ <span class=\"keyword\">In</span> FSO.GetFolder(src_folder__).SubFolders</div><div class=\"line\">        <span class=\"keyword\">Call</span> FileCopy(sub_folder__,FSO.BuildPath(sav_folder__, FSO.GetBaseName(sub_folder__)))</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> MakeFolder(tar_path__)</div><div class=\"line\">    <span class=\"keyword\">If</span> <span class=\"keyword\">Not</span> FSO.FolderExists(FSO.GetParentFolderName(tar_path__)) <span class=\"keyword\">Then</span> _</div><div class=\"line\">        <span class=\"keyword\">Call</span> MakeFolder(FSO.GetParentFolderName(tar_path__))</div><div class=\"line\">    <span class=\"keyword\">If</span> <span class=\"keyword\">Not</span> FSO.FolderExists(tar_path__) <span class=\"keyword\">Then</span> _</div><div class=\"line\">        FSO.CreateFolder(tar_path__)</div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>如果存在多个可移动磁盘，通过该脚本可以迅速拷贝目标文件，并分析磁盘结构。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<p><a name=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"></a></p>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListLB：         列出大于该值的文件，0表示列出所有</div><div class=\"line\"></div><div class=\"line\">ListDepthToStop：列表深度，0表示列出所有</div><div class=\"line\"></div><div class=\"line\">RunFileCopy：    是否运行拷贝模块</div><div class=\"line\"></div><div class=\"line\">CopyFrom：       进行拷贝搜索的根目录</div><div class=\"line\"></div><div class=\"line\">CopyPattern：    拷贝搜索的正则表达式</div><div class=\"line\"></div><div class=\"line\">CopyLB：         拷贝下界，0表示无下界</div><div class=\"line\"></div><div class=\"line\">CopyUB：         拷贝上界，0表示无上界</div><div class=\"line\"></div><div class=\"line\">InfoTo：         U盘信息保存目录</div><div class=\"line\"></div><div class=\"line\">DriveInfoTo：    U盘信息保存文件</div><div class=\"line\"></div><div class=\"line\">DriveListTo：    U盘文件信息保存文件</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%BA%90%E4%BB%A3%E7%A0%81\"></a></p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListLB              = <span class=\"number\">0</span></div><div class=\"line\">ListDepthToStop     = <span class=\"number\">0</span></div><div class=\"line\">RunFileCopy         = <span class=\"literal\">True</span></div><div class=\"line\">CopyFrom            = <span class=\"string\">\"\"</span></div><div class=\"line\">CopyPattern         = <span class=\"string\">\"\"</span></div><div class=\"line\">CopyLB              = <span class=\"number\">0</span></div><div class=\"line\">CopyUB              = <span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">3</span></div><div class=\"line\">InfoTo              = <span class=\"string\">\"\"</span></div><div class=\"line\">DriveInfoTo         = <span class=\"string\">\"\"</span></div><div class=\"line\">DriveListTo         = <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span> FSO         = <span class=\"built_in\">CreateObject</span>(<span class=\"string\">\"Scripting.FileSystemObject\"</span>)</div><div class=\"line\"><span class=\"keyword\">set</span> Drives      = FSO.Drives</div><div class=\"line\"><span class=\"keyword\">set</span> RE          = <span class=\"keyword\">New</span> <span class=\"built_in\">RegExp</span></div><div class=\"line\">CurDrive        = FSO.GetDriveName(FSO.GetAbsolutePathName(<span class=\"string\">\".\"</span>))</div><div class=\"line\">RE.Pattern      = CopyPattern</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> Drive <span class=\"keyword\">In</span> Drives</div><div class=\"line\">    <span class=\"keyword\">If</span>  Drive.DriveType = <span class=\"number\">1</span> _</div><div class=\"line\">    <span class=\"keyword\">AND</span> Drive.Path &lt;&gt; CurDrive <span class=\"keyword\">Then</span></div><div class=\"line\">        <span class=\"keyword\">Randomize</span></div><div class=\"line\">        SavingFolder    = FSO.BuildPath(CurDrive\\InfoTo\\Drive.VolumeName_Int(<span class=\"built_in\">Rnd</span>()*<span class=\"number\">100</span>))</div><div class=\"line\">        <span class=\"keyword\">Call</span> MakeFolder(SavingFolder)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> F_DriveInfo = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveInfoTo), <span class=\"number\">2</span>, <span class=\"literal\">True</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">set</span> F_DriveList = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveListTo), <span class=\"number\">2</span>, <span class=\"literal\">True</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">Call</span> ListDrive(Drive.Path)</div><div class=\"line\">        <span class=\"keyword\">Call</span> ListFolder(Drive.RootFolder.Path, <span class=\"number\">1</span>)</div><div class=\"line\">        F_DriveInfo.Close</div><div class=\"line\">        F_DriveList.Close</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">IF</span> CopyFrom = <span class=\"string\">\"\"</span> <span class=\"keyword\">Then</span> CopyFrom = Drive.RootFolder.Path</div><div class=\"line\">        <span class=\"keyword\">IF</span> RunFileCopy = <span class=\"literal\">True</span> <span class=\"keyword\">AND</span> FSO.FolderExists(CopyFrom) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            <span class=\"keyword\">Call</span> FileCopy(CopyFrom, SavingFolder)</div><div class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></div><div class=\"line\"><span class=\"keyword\">Next</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> ListDrive (drive_path__)</div><div class=\"line\">    <span class=\"keyword\">set</span> drive__     = FSO.GetDrive(drive_path__)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"Date:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; <span class=\"built_in\">Date</span>())</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"VolumeName:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.VolumeName)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"FileSystem:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.FileSystem)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"TotalSize:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.TotalSize/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"FreeSpace:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.FreeSpace/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>)</div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> ListFolder(cur_folder__, cur_depth__)</div><div class=\"line\">    F_DriveList.WriteLine(<span class=\"built_in\">Space</span>((cur_depth__<span class=\"number\">-1</span>)*<span class=\"number\">2</span>) &amp; <span class=\"string\">\"+ \"</span> &amp; FSO.GetBaseName(cur_folder__))</div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> cur_file__ <span class=\"keyword\">In</span> FSO.GetFolder(cur_folder__).Files</div><div class=\"line\">        <span class=\"keyword\">If</span> (ListLB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &gt; ListLB) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            F_DriveList.WriteLine(<span class=\"built_in\">Space</span>(cur_depth__*<span class=\"number\">2</span>) &amp; cur_file__.Name)</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> sub_folder__ <span class=\"keyword\">In</span> FSO.GetFolder(cur_folder__).SubFolders</div><div class=\"line\">        <span class=\"keyword\">IF</span> (DepthToStop = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_depth__ &lt; DepthToStop) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            <span class=\"keyword\">Call</span> ListFolder(sub_folder__, cur_depth__ + <span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> FileCopy(src_folder__, sav_folder__)</div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> cur_file__ <span class=\"keyword\">In</span> FSO.GetFolder(src_folder__).Files</div><div class=\"line\">        <span class=\"keyword\">IF</span>  (CopyUB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &lt; CopyUB) _</div><div class=\"line\">        <span class=\"keyword\">AND</span> (CopyLB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &gt; CopyLB) _</div><div class=\"line\">        <span class=\"keyword\">AND</span> (RE.Test(cur_file__.Name) = <span class=\"literal\">True</span>) <span class=\"keyword\">Then</span></div><div class=\"line\">            <span class=\"keyword\">IF</span> <span class=\"keyword\">Not</span> FSO.FolderExists(sav_folder__) <span class=\"keyword\">Then</span> <span class=\"keyword\">Call</span> MakeFolder(sav_folder__)</div><div class=\"line\">            FSO.CopyFile cur_file__.Path, FSO.BuildPath(sav_folder__, cur_file__.Name)</div><div class=\"line\">        <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> sub_folder__ <span class=\"keyword\">In</span> FSO.GetFolder(src_folder__).SubFolders</div><div class=\"line\">        <span class=\"keyword\">Call</span> FileCopy(sub_folder__,FSO.BuildPath(sav_folder__, FSO.GetBaseName(sub_folder__)))</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> MakeFolder(tar_path__)</div><div class=\"line\">    <span class=\"keyword\">If</span> <span class=\"keyword\">Not</span> FSO.FolderExists(FSO.GetParentFolderName(tar_path__)) <span class=\"keyword\">Then</span> _</div><div class=\"line\">        <span class=\"keyword\">Call</span> MakeFolder(FSO.GetParentFolderName(tar_path__))</div><div class=\"line\">    <span class=\"keyword\">If</span> <span class=\"keyword\">Not</span> FSO.FolderExists(tar_path__) <span class=\"keyword\">Then</span> _</div><div class=\"line\">        FSO.CreateFolder(tar_path__)</div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj9i9inxs00005vs8c7pqa8s6","tag_id":"cj9i9iny200045vs8b6ud9xf8","_id":"cj9i9inyf000b5vs8mjyr1rie"},{"post_id":"cj9i9inxs00005vs8c7pqa8s6","tag_id":"cj9i9inyb00085vs829n0qyp9","_id":"cj9i9inyf000c5vs8kidxakbh"},{"post_id":"cj9i9inxx00025vs8zd4zvzbd","tag_id":"cj9i9iny200045vs8b6ud9xf8","_id":"cj9i9inyg000f5vs87s5fjiq9"},{"post_id":"cj9i9inxx00025vs8zd4zvzbd","tag_id":"cj9i9inyb00085vs829n0qyp9","_id":"cj9i9inyg000g5vs8azqoht8z"},{"post_id":"cj9i9iny500055vs8j4u1wy4q","tag_id":"cj9i9inyf000e5vs8d5luwn1i","_id":"cj9i9inyg000j5vs8tc9turfy"},{"post_id":"cj9i9iny500055vs8j4u1wy4q","tag_id":"cj9i9inyg000h5vs8zso72g8v","_id":"cj9i9inyg000k5vs8zrjqhh50"},{"post_id":"cj9i9iny700065vs8lo2vh56l","tag_id":"cj9i9iny200045vs8b6ud9xf8","_id":"cj9i9inyh000m5vs8dnaw7c9j"},{"post_id":"cj9i9iny700065vs8lo2vh56l","tag_id":"cj9i9inyb00085vs829n0qyp9","_id":"cj9i9inyh000n5vs8h8qbo5um"},{"post_id":"cj9i9iny900075vs89cpc972v","tag_id":"cj9i9inyf000e5vs8d5luwn1i","_id":"cj9i9inyj000s5vs8wkqg1aqv"},{"post_id":"cj9i9iny900075vs89cpc972v","tag_id":"cj9i9inyh000o5vs8dryltg41","_id":"cj9i9inyk000t5vs8cizi12ae"},{"post_id":"cj9i9iny900075vs89cpc972v","tag_id":"cj9i9inyg000h5vs8zso72g8v","_id":"cj9i9inyk000u5vs8pxfu15gb"},{"post_id":"cj9i9iny900075vs89cpc972v","tag_id":"cj9i9inyi000q5vs8a1yvosj1","_id":"cj9i9inyk000v5vs8ua825h1s"},{"post_id":"cj9i9inyc00095vs8cy4nyq0o","tag_id":"cj9i9inyj000r5vs8vvy8e9hr","_id":"cj9i9inyk000w5vs8hj239mlw"}],"Tag":[{"name":"PHP","_id":"cj9i9iny200045vs8b6ud9xf8"},{"name":"设计模式","_id":"cj9i9inyb00085vs829n0qyp9"},{"name":"Tool","_id":"cj9i9inyf000e5vs8d5luwn1i"},{"name":"Server","_id":"cj9i9inyg000h5vs8zso72g8v"},{"name":"分布式","_id":"cj9i9inyh000o5vs8dryltg41"},{"name":"ZooKeeper","_id":"cj9i9inyi000q5vs8a1yvosj1"},{"name":"VBS","_id":"cj9i9inyj000r5vs8vvy8e9hr"}]}}