{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/menu_bg.png","path":"images/menu_bg.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/Operation/testing_ab/performance_YII.png","path":"images/Operation/testing_ab/performance_YII.png","modified":1,"renderable":0},{"_id":"source/images/PHP/extension_socket/severNotify.png","path":"images/PHP/extension_socket/severNotify.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"source/images/Operation/testing_ab/response_time_chart.png","path":"images/Operation/testing_ab/response_time_chart.png","modified":1,"renderable":0},{"_id":"source/images/Operation/testing_ab/with_opcache.png","path":"images/Operation/testing_ab/with_opcache.png","modified":1,"renderable":0},{"_id":"source/images/PHP/extension_socket/234Up.png","path":"images/PHP/extension_socket/234Up.png","modified":1,"renderable":0},{"_id":"source/images/Operation/testing_ab/without_opcache.png","path":"images/Operation/testing_ab/without_opcache.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/PHP/extension_socket/234OffLine.png","path":"images/PHP/extension_socket/234OffLine.png","modified":1,"renderable":0},{"_id":"source/images/PHP/extension_socket/234OffLineAgain.png","path":"images/PHP/extension_socket/234OffLineAgain.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/images/PHP/syntax_autoloadCountOff/composer_psr4.png","path":"images/PHP/syntax_autoloadCountOff/composer_psr4.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/PHP/syntax_autoloadCountOff/composer_classmap.png","path":"images/PHP/syntax_autoloadCountOff/composer_classmap.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1510548342000},{"_id":"source/CNAME","hash":"bc22888568e481fbcc46a23d3ef7ba757d92266d","modified":1510548342000},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1510625227000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1510625227000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1510625227000},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1510625227000},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1510625227000},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1510625227000},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1510625227000},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1510625227000},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1510625227000},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1510625227000},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1510625227000},{"_id":"themes/hexo-theme-next/README.md","hash":"529d53dfa97678f8ce4c95620b26e61154162a29","modified":1510625227000},{"_id":"themes/hexo-theme-next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1510625227000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"3fd1d0cf6105728216d11e08e23c389c39637e00","modified":1510625227000},{"_id":"themes/hexo-theme-next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1510625227000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1510625227000},{"_id":"source/categories/index.md","hash":"aa29b5c54c23e352e58272675e064ba57f433dfb","modified":1510548342000},{"_id":"source/_posts/bootstrap-css-layout.sublime-workspace","hash":"b48a37f36e735ecb124a985c7dc0243466b277a3","modified":1510548342000},{"_id":"source/images/.DS_Store","hash":"caa71a523ccffb184c7a7618700c5a8ca329231f","modified":1510548342000},{"_id":"source/images/avatar.jpg","hash":"baead5c03f1deaa8e28e9e4aac0baf8652bd243f","modified":1510548342000},{"_id":"source/tags/index.md","hash":"1837981b2dd892ef13986f622214b7920e31744e","modified":1510548342000},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1510625227000},{"_id":"themes/hexo-theme-next/.git/config","hash":"04c3b5e37dfcd83517b0ef9dac47af8f6747c780","modified":1510625227000},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"80289a129da3756fd20694e5d7c6bedd98fc17b9","modified":1510625227000},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1510625227000},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1510625227000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1510625227000},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1510625227000},{"_id":"themes/hexo-theme-next/.git/index","hash":"fb97145966de44506acfd8bfc38dc3775fb3867c","modified":1510625292000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1510625227000},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1510625227000},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1510625227000},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1510625227000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510625227000},{"_id":"source/_posts/Essay/feeling_beMyself.md","hash":"8f2e536f8cb9dab5492e10cde4091e2207f4055c","modified":1510548342000},{"_id":"source/_posts/Markdown/blog_headSnippet.md","hash":"e8ffced2fb456d9c1248490652bffc5df3790cdc","modified":1510548342000},{"_id":"source/_posts/VB/vbs_copyFileFromUDisk.md","hash":"c204ad93f76a69035db053ef3b2989cbf0ee090e","modified":1510548342000},{"_id":"source/_posts/Operation/deployment_zookeeper.md","hash":"512ebb90c560da4d178c3a1de2a0cfe966b7134e","modified":1510576403000},{"_id":"source/_posts/Operation/common_sshManagement.md","hash":"d001a1da086237372029c5864826f0fa17e3305f","modified":1510576416000},{"_id":"source/_posts/Operation/testing_ab.md","hash":"464e1a9f81355273cd826de8441f0d8536e29b02","modified":1510576393000},{"_id":"source/_posts/PHP/designPattern_observerPlusFactory.md","hash":"066e28703b7dba4fe2dd59abebd9e1f22e4cb1be","modified":1510548342000},{"_id":"source/_posts/PHP/designPattern_singleton.md","hash":"b914e66a21fa361ba0ba7b62e3ea139d4a479b4d","modified":1510548342000},{"_id":"source/_posts/PHP/syntax_autoloadCountOff.md","hash":"f7812e13c8b2259d553c16d2066d03ff2e89dacb","modified":1510623683000},{"_id":"source/_posts/PHP/designPattern_observerVsPublishSubscribe.md","hash":"a460921c99424ecf5b5ba9081245f06d6accf28b","modified":1510548342000},{"_id":"source/_posts/PHP/extension_socket.md","hash":"75a3a3366862a5df1c8b704c0cc69e6332967c6c","modified":1510576375000},{"_id":"source/images/Operation/.DS_Store","hash":"8fab28ebf9776a229f97438cbd89e5127d156054","modified":1510548342000},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1510625216000},{"_id":"source/images/menu_bg.png","hash":"2b8ac8cc9f1d95f38fe3cfbbe7678a190533bbb1","modified":1510548342000},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"a7c7659a8ffa7e3ec93ed7d7b9b8b0e57bd7606d","modified":1510625227000},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1510625216000},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1510625216000},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1510625227000},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510625227000},{"_id":"source/images/Operation/testing_ab/performance_YII.png","hash":"a9c67e3d67d7e27623527cb871af8a1a70b21cce","modified":1510548342000},{"_id":"source/images/PHP/extension_socket/severNotify.png","hash":"bddb8fc7c0588cb001c575f7b9febb864beecfe4","modified":1510548342000},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"90a64ee4a19da9a59af95b0046a830a7036b072a","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"0b46b55a02f22a50def7fca333707d61e16b3b9a","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"4617daf810f42b3f3908a40f246538cb1e5970da","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1510625227000},{"_id":"source/images/Operation/testing_ab/response_time_chart.png","hash":"e85ae36c2d136269937f2e4f349154af37a68f0f","modified":1510548342000},{"_id":"source/images/Operation/testing_ab/with_opcache.png","hash":"823f5752ed209ddb3eda674f95e7bc9703ec7fb2","modified":1510548342000},{"_id":"source/images/PHP/extension_socket/234Up.png","hash":"82184408930f2394a5d90d328f2f32c9888c4342","modified":1510548342000},{"_id":"source/images/Operation/testing_ab/without_opcache.png","hash":"f48923eb8d5349bc7c58e43fec88765d1be27472","modified":1510548342000},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1510625227000},{"_id":"source/images/PHP/extension_socket/234OffLine.png","hash":"03d426b4b08ef94febf20cd69ff2770acb5ffeb7","modified":1510548342000},{"_id":"source/images/PHP/extension_socket/234OffLineAgain.png","hash":"49a20b704caa3af36f5e36f577eca84d29d7585b","modified":1510548342000},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"a7c7659a8ffa7e3ec93ed7d7b9b8b0e57bd7606d","modified":1510625227000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1510625227000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1510625227000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"a7c7659a8ffa7e3ec93ed7d7b9b8b0e57bd7606d","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1510625227000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-fbab4dd7ca341b4710f0652b7cf4884b374743d8.idx","hash":"55da7c180474848c4351711935e17f556b005dfd","modified":1510625227000},{"_id":"source/images/PHP/syntax_autoloadCountOff/composer_psr4.png","hash":"6b34b9c3bcee9d8f0f2eecb1be2541f10eace27e","modified":1510586172000},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1510625227000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1510625227000},{"_id":"source/images/PHP/syntax_autoloadCountOff/composer_classmap.png","hash":"f7c198ac6628e476893c7e31974d80d84f28d095","modified":1510586081000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-fbab4dd7ca341b4710f0652b7cf4884b374743d8.pack","hash":"1dd53111a048c25c71f24270282ceca99966030f","modified":1510625227000},{"_id":"public/atom.xml","hash":"2007313944c865012654e987da5cab27ee33c6e6","modified":1510627739630},{"_id":"public/categories/index.html","hash":"a0524776324ffe875bdec00e54d8099b2d6fafe5","modified":1510627739655},{"_id":"public/tags/index.html","hash":"0b3fce7ed56ad3a4768b87b66aec61da7c8068fc","modified":1510627739655},{"_id":"public/2017/11/14/PHP/syntax_autoloadCountOff/index.html","hash":"a57261c53fcfad541c85658bf1391fee7fb5d014","modified":1510627739656},{"_id":"public/2017/11/10/PHP/extension_socket/index.html","hash":"ec64a17773f2cfff41a9449b4a1233825287863e","modified":1510627739656},{"_id":"public/2017/11/06/Essay/feeling_beMyself/index.html","hash":"034a8751619de2410f4b7505136b3400bf40277f","modified":1510627739656},{"_id":"public/2017/11/07/Markdown/blog_headSnippet/index.html","hash":"1cefab2cf22862ec56dae7d30f5904f856d07e1f","modified":1510627739656},{"_id":"public/2017/11/05/Operation/common_sshManagement/index.html","hash":"68572f871a23b4d4bd7654f8099fa2692ddff168","modified":1510627739656},{"_id":"public/2017/11/02/Operation/deployment_zookeeper/index.html","hash":"024633d2776c4fd4c1cea2ae8852c44d13a6684b","modified":1510627739656},{"_id":"public/2017/10/29/Operation/testing_ab/index.html","hash":"54c774fbd1500a7ca0dc9a2ed0890e2e8e3af98d","modified":1510627739656},{"_id":"public/2017/10/28/PHP/designPattern_observerVsPublishSubscribe/index.html","hash":"6e519f544a41296debb58bb31f337d4bff81f977","modified":1510627739656},{"_id":"public/2017/07/05/PHP/designPattern_singleton/index.html","hash":"b29fb134b721e9c6fccfebfa5d59e6719c96119c","modified":1510627739656},{"_id":"public/2017/07/02/PHP/designPattern_observerPlusFactory/index.html","hash":"a9dfa6f69b915baecb0187a3a912f822af230568","modified":1510627739656},{"_id":"public/2017/06/27/VB/vbs_copyFileFromUDisk/index.html","hash":"613f755b90d787141b31c7732ef0c06388d86e37","modified":1510627739656},{"_id":"public/categories/Essay/index.html","hash":"b2b01bf62af77c153028eeb014f3910981159e8e","modified":1510627739656},{"_id":"public/categories/Markdown/index.html","hash":"d439b638f002c9398188debc4e354ad8d13846ad","modified":1510627739656},{"_id":"public/categories/VB/index.html","hash":"8981a236cb2fff40a1ab9269a8c51e8c8915d207","modified":1510627739656},{"_id":"public/categories/Operation/index.html","hash":"ed4d03c0c9b0561810ea53128b5bd874486d8735","modified":1510627739656},{"_id":"public/categories/PHP/index.html","hash":"2a4c6850f031a4ac930e147b4ad3a330d453664f","modified":1510627739656},{"_id":"public/archives/index.html","hash":"2a1985f39b7e95a3c473cf435591539a81b657ec","modified":1510627739656},{"_id":"public/archives/page/2/index.html","hash":"2db44abd11316e2489873cb6ef7eec87bcf75989","modified":1510627739656},{"_id":"public/archives/2017/index.html","hash":"21877c01dbbecfa4ac57a1d8f835893dc20566a6","modified":1510627739656},{"_id":"public/archives/2017/page/2/index.html","hash":"ab52d26ab4de0fe25ff0541a0462fe309bde10f6","modified":1510627739656},{"_id":"public/archives/2017/06/index.html","hash":"321fe55f1ca067e2a381eea368762f37035ff8d7","modified":1510627739656},{"_id":"public/archives/2017/07/index.html","hash":"0bc992231927b7657a8f94d183291bfe622be506","modified":1510627739656},{"_id":"public/archives/2017/10/index.html","hash":"53d5f283a2dddd9edfbd6e79f35a08162c711344","modified":1510627739657},{"_id":"public/archives/2017/11/index.html","hash":"e8aa497712979cd440bbaec37459e56fb48fa9b6","modified":1510627739657},{"_id":"public/tags/Essay/index.html","hash":"2864575e83d015eb42244b6db8d655a1682e8a4b","modified":1510627739657},{"_id":"public/tags/Feeling/index.html","hash":"ab62af3e426dbe56e9c0dd716bb6a88d903214f2","modified":1510627739657},{"_id":"public/tags/Markdown/index.html","hash":"c04b50a05479cf1ae54c8dc707a365a213016f6c","modified":1510627739657},{"_id":"public/tags/Blog/index.html","hash":"2345d107567d9445d5f954e5e78fd912215d0677","modified":1510627739657},{"_id":"public/tags/Snippet/index.html","hash":"413ddb583551f53ba11ab19320836156751691ec","modified":1510627739657},{"_id":"public/tags/VB/index.html","hash":"c5c0d473925e9920ac0f26f2603a4112dcb0adfa","modified":1510627739657},{"_id":"public/tags/VBS/index.html","hash":"4ba5ba92d8bac9fd9fe12ac2320b1c791c148275","modified":1510627739657},{"_id":"public/tags/Operation/index.html","hash":"359a7817f5072dad894d179e4154e0319e6ef665","modified":1510627739657},{"_id":"public/tags/Deployment/index.html","hash":"98dfa52578433c4ed79548824fc32948550f6a98","modified":1510627739657},{"_id":"public/tags/Distributed/index.html","hash":"0b817960ca47332c925cb7ee2c07a2a48df05b11","modified":1510627739657},{"_id":"public/tags/ZooKeeper/index.html","hash":"9de30fa7ea934b202f129a152d69c5404576fd03","modified":1510627739657},{"_id":"public/tags/Common/index.html","hash":"9dc4ef6136363fa61f8a3cd303a0f0ec7e7521db","modified":1510627739657},{"_id":"public/tags/ssh/index.html","hash":"98adec21249708b5679acfd793885dbaf1778c72","modified":1510627739657},{"_id":"public/tags/Testing/index.html","hash":"d652170551437d787b8d5513f894bb5cb0911d48","modified":1510627739657},{"_id":"public/tags/ab/index.html","hash":"ce74be543a013afdeb97357ef190c65d843cb2bc","modified":1510627739657},{"_id":"public/tags/todo/index.html","hash":"d0747fea27f05799770f3667822c204eb796b7e8","modified":1510627739657},{"_id":"public/tags/PHP/index.html","hash":"d865186453946efc546dd001a8b3185bd3083a9d","modified":1510627739657},{"_id":"public/tags/设计模式/index.html","hash":"344e8ae241df56e968338209cd9bfbca40da6ecb","modified":1510627739657},{"_id":"public/tags/Syntax/index.html","hash":"ac4e399206a12feb76a7bc2c867563ce41ad116c","modified":1510627739657},{"_id":"public/tags/Extension/index.html","hash":"20ccbdb293f764073032721e77e44a2b18cc5b8c","modified":1510627739657},{"_id":"public/tags/Socket/index.html","hash":"7efda8075e3140dfd57161a31551c65b076ceb68","modified":1510627739657},{"_id":"public/index.html","hash":"81e1e4f94c62027c472d0c47e7732dba616b9edf","modified":1510627739657},{"_id":"public/page/2/index.html","hash":"1b5c3e63dc623bcc14ea25de5851f0d7acc7ce70","modified":1510627739657},{"_id":"public/CNAME","hash":"bc22888568e481fbcc46a23d3ef7ba757d92266d","modified":1510627739678},{"_id":"public/images/avatar.jpg","hash":"baead5c03f1deaa8e28e9e4aac0baf8652bd243f","modified":1510627739678},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1510627739678},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1510627739678},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1510627739678},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1510627739678},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1510627739678},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1510627739678},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1510627739678},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1510627739679},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1510627739679},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1510627739679},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1510627739679},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1510627739679},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1510627739679},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510627739679},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1510627739679},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1510627739679},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1510627739679},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1510627739679},{"_id":"public/images/Operation/testing_ab/performance_YII.png","hash":"a9c67e3d67d7e27623527cb871af8a1a70b21cce","modified":1510627739679},{"_id":"public/images/PHP/extension_socket/severNotify.png","hash":"bddb8fc7c0588cb001c575f7b9febb864beecfe4","modified":1510627739679},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1510627739679},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1510627739679},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1510627739679},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1510627739679},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1510627739679},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1510627739679},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1510627739680},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1510627739680},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1510627739680},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1510627739680},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1510627739680},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1510627739680},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1510627739680},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1510627739680},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1510627739680},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"2290f8391558fcdf90bcc3d31796a278972024d3","modified":1510627739680},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"46ec23955d31954e4e94793ffb5119c1b91dc6e7","modified":1510627739680},{"_id":"public/images/Operation/testing_ab/response_time_chart.png","hash":"e85ae36c2d136269937f2e4f349154af37a68f0f","modified":1510627740475},{"_id":"public/images/PHP/extension_socket/234Up.png","hash":"82184408930f2394a5d90d328f2f32c9888c4342","modified":1510627740480},{"_id":"public/images/Operation/testing_ab/with_opcache.png","hash":"823f5752ed209ddb3eda674f95e7bc9703ec7fb2","modified":1510627740487},{"_id":"public/images/Operation/testing_ab/without_opcache.png","hash":"f48923eb8d5349bc7c58e43fec88765d1be27472","modified":1510627740487},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1510627740487},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1510627740487},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"6b7e65178f13563788627999e75c86038bc88091","modified":1510627740487},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1510627740497},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1510627740497},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1510627740497},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1510627740497},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1510627740497},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1510627740497},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1510627740497},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1510627740497},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1510627740497},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1510627740497},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1510627740497},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1510627740497},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1510627740497},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1510627740497},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1510627740497},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1510627740498},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1510627740498},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1510627740498},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1510627740498},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1510627740498},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1510627740498},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1510627740498},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1510627740498},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1510627740498},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1510627740498},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1510627740500},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1510627740500},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1510627740500},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1510627740500},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1510627740500},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1510627740500},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1510627740500},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1510627740501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1510627740501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1510627740501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1510627740501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1510627740501},{"_id":"public/css/main.css","hash":"e3ff311da031715660e01722160323f12e1ab5aa","modified":1510627740501},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1510627740501},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1510627740501},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1510627740501},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1510627740501},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1510627740501},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1510627740501},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1510627740501},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1510627740501},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1510627740502},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1510627740502},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1510627740502},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1510627740502},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1510627740502},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1510627740502},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1510627740502},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1510627740502},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1510627740502},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1510627740502},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1510627740502},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1510627740502},{"_id":"public/images/menu_bg.png","hash":"2b8ac8cc9f1d95f38fe3cfbbe7678a190533bbb1","modified":1510627740503},{"_id":"public/images/PHP/extension_socket/234OffLine.png","hash":"03d426b4b08ef94febf20cd69ff2770acb5ffeb7","modified":1510627740503},{"_id":"public/images/PHP/extension_socket/234OffLineAgain.png","hash":"49a20b704caa3af36f5e36f577eca84d29d7585b","modified":1510627740503},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1510627740503},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1510627740503},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1510627740503},{"_id":"public/assets/algolia/algoliasearch.js","hash":"95c1797aa497fb7f5de6ed4c89019744215203f7","modified":1510627740503},{"_id":"public/images/PHP/syntax_autoloadCountOff/composer_psr4.png","hash":"6b34b9c3bcee9d8f0f2eecb1be2541f10eace27e","modified":1510627740530},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1510627740530},{"_id":"public/images/PHP/syntax_autoloadCountOff/composer_classmap.png","hash":"f7c198ac6628e476893c7e31974d80d84f28d095","modified":1510627740536}],"Category":[{"name":"Essay","_id":"cj9z0r1l400042ys81iufzez9"},{"name":"Markdown","_id":"cj9z0r1lf00092ys8iinbb50i"},{"name":"VB","_id":"cj9z0r1lj000e2ys8b7g1pxfp"},{"name":"Operation","_id":"cj9z0r1lo000l2ys8ra7tpjtl"},{"name":"PHP","_id":"cj9z0r1lv000w2ys8k67gxrmk"}],"Data":[],"Page":[{"layout":"page","type":"categories","date":"2017-10-27T11:16:46.000Z","comment":false,"_content":"","source":"categories/index.md","raw":"---\nlayout: page\ntype: \"categories\"\ndate: 2017-10-27 19:16:46\ncomment: false\n---\n","updated":"2017-11-13T04:45:42.000Z","path":"categories/index.html","title":"","comments":1,"_id":"cj9z0r1f600002ys8p8xqfcxc","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","type":"tags","date":"2017-10-27T11:16:24.000Z","comment":false,"_content":"","source":"tags/index.md","raw":"---\nlayout: page\ntype: \"tags\"\ndate: 2017-10-27 19:16:24\ncomment: false\n---\n","updated":"2017-11-13T04:45:42.000Z","path":"tags/index.html","title":"","comments":1,"_id":"cj9z0r1jx00012ys8pmuapos3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"不忘初心 方得始终","date":"2017-11-06T14:11:39.000Z","_content":"\n初入社会，我决定去百度一下这四个字：[大学生初入社会应该注意什么？-知乎](https://www.zhihu.com/question/23241437)、[初入社会，告诉你一个真实的职场--职场经验血泪分享](http://bbs.tianya.cn/post-no20-481989-1.shtml)、[年轻人，初入社会不要自视甚高](http://www.360doc.com/content/15/0311/23/21770202_454437666.shtml)。又决定去Google一下`newbie in the office`：[How to Be the Office Newbie](http://www.quickanddirtytips.com/relationships/professional/how-to-be-the-office-newbie?page=1)、[The Office Newbie’s Survival Guide: Surviving Day #1](https://www.workitdaily.com/office-newbies-survival-guide/)、[3 Surprising Lessons You Can Learn From the Office Newbie](https://www.themuse.com/advice/3-surprising-lessons-you-can-learn-from-the-office-newbie)。粗略看了一下，大多是说如何处事为人、如何对待付出与回报这些。\n\n从大三暑假到现在，四个月有余了，实习之类的，感触颇深，有时候也会质疑自己，更多的还是收获。心态放正，不忘初心，方得始终。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [hr与offer](#hr%E4%B8%8Eoffer)\n- [表达与沟通](#%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%B2%9F%E9%80%9A)\n- [公交车](#%E5%85%AC%E4%BA%A4%E8%BD%A6)\n- [小公司](#%E5%B0%8F%E5%85%AC%E5%8F%B8)\n- [初心](#%E5%88%9D%E5%BF%83)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"hr%E4%B8%8Eoffer\"></a>\n## hr与offer\n\n暑假空下来之后，去投了A(500人+规模)和B(15人+规模)两家公司的简历。\n\n先收到了B公司的面试邀请，hr碰巧是学姐，了解到B公司刚刚起步，技术是大牛(真的大牛)，工资给2K。其实第一次出去实习，能碰到大牛已经很不错了，在小公司中和大牛接触的机会很多，然后我就接了offer。\n\n就在我已经准备好去B的时候，A公司发了面试邀请，给3K5的工资。我很想去A，毕竟大公司有更好的底蕴、更成熟的流程、更新的技术，但是我已经接了B的offer。A公司的hr对我讲：offer是双向的，有更好的平台就应该去更好的平台，实习还没开始，协议也没签，不要不好意思拒绝。后来我和B公司的学姐道歉，签了A公司的实习。\n\n很多时候，作为大学生，出去找实习，我们都把自己放在一个很被动的地位，尤其是出现挫折之后，把自己的预期不断降低，仔细想想，有些许对自己不自信、不负责任的味道。hr是我们步入社会接触的第一批人，我们应该对他们足够尊敬，但是不是畏惧，担心自己表现不好之类。hr其实很温柔和善，愿意为我们答疑解惑，大大方方地和他们沟通，对双方都有好处。\n\n<a name=\"%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%B2%9F%E9%80%9A\"></a>\n## 表达与沟通\n\n我进入了创新研发部，我们每天都会开早会同步进度，然后周末开例会评审版本，偶尔还会有吐槽时间。开这些会，大家会跟进产品，处处为产品考虑，对事不对人，让我印象十分深刻。但也有一些消极的元素：没有如期交付时会抱怨(有时候同事的需求确实做不完)，但很少有赞扬，上级不断为员工注入工作激素，恨不得他们24/7地做需求。\n\n很少有人表达自己，因为无一例外，吐槽只是吐槽，并没有实质性的改变。我的导师，在我看来，是一个聪明人，在公司和家庭之间游刃有余，擅长吐槽，释放了压力，心态保持的很好。\n\n沟通方面，大家都很忙，都在认真地完成自己的需求，一方面，聊天工具沟通效率不高，另一方面，又不忍心打断别人思考，这就会导致自己的需求被拖延，之间的平衡，是我们需要好好摸索的。\n\n<a name=\"%E5%85%AC%E4%BA%A4%E8%BD%A6\"></a>\n## 公交车\n\n后来因为不喜欢自己所做的业务，选择了辞职，决定去小公司C看看。搭公交去面试，不得不说，公交是社会的缩影。\n\n**\\#孩子\\#** 刚好赶上小学生放学，公交车上有许多接学生的家长。这些家长比我大不了多少，他们和孩子聊天，问他们学校的事情，教他们道理。几年后，我也会成为他们的一员，不会有那种一人吃饱全家不饿的潇洒了，孩子会是生活的很大一部分，也会是我们的leisure time。\n\n**\\#教养\\#** 我旁边一对母子，从别人位子旁挤过、我帮他捡瓶盖孩子都会大方地说谢谢。但另一个孩子就淘气的多，霸占座位、大声尖叫，引得全车人侧目，后来他下车时，才发现他其实也是有家长来接，只不过家长一直默不作声。让我想起了一条新闻【[年轻妈妈一上飞机就发糖！就是为了……](http://news.sina.com.cn/o/2017-09-27/doc-ifymeswe0343730.shtml)】，孩子的教养多少有父母的影射。\n\n**\\#婚姻\\#** 这是一个温暖且沉重的话题，车上爷爷奶奶诠释的生动浪漫。但也有一位孕妈，看起来年轻贤惠，一个高中生给她让座，她坐下后讨好地向一个男士笑，讲不出来是丈夫还是爸爸，那人竟看都不看一眼，抬起头看电视。百般滋味，不知如何道明。\n\n<a name=\"%E5%B0%8F%E5%85%AC%E5%8F%B8\"></a>\n## 小公司\n\nC公司是专门做API，图像识别、聊天机器人对我很有吸引力，于是过去面试。凄凉，是C公司给我的第一印象。一百平方左右的办公室里面坐了十来个人，桌子不是很整洁，几乎没有什么装饰。\n\n面试的时候，面试官(老板)没有怎么准备过，随口问了几个函数，然后在他的代码里找了几个函数，问了下memcached，就没了。他说现在接口不需要开发，主要是维护接口。然后我就回来了，面试过程15分钟不到。后面接到hr的电话，希望我签一年合同，我拒绝了，要求先实习看一下再决定签不签。总之C公司的流程很不友好。\n\n后面去了公司，电脑文件很乱，尤其是前面同事装的插件还在，复制都会弹出华而不实的工具窗口，打断思路。后来看到代码我就震惊了：\n- 接口名中英混杂，接口目录、核心目录、管理员目录混在一起\n- 所谓的图像识别，聊天机器人其实是调用别的公司的API！！！\n- DEPRECATED的sql到处放，各种密码掺在代码里，根本谈不上软件架构\n- 左边小哥哥用低音炮循环《我们不一样》、《怒放的生命》之类，老板在一边跟着哼\n- 右边小姐姐刷刷腾讯新闻，然后看看代码\n\n此外，我还见到了一条三行的坑爹sql，用来相似匹配：两个表join一下，然后在每个字段用`%keyword%`匹配，再用`or`连接，足足用了7、8个`or`！！！当天下午，他们还在讨论接口撑不住别人1000RPS...\n\n所有的接口归纳起来就两点：`curl`别人的接口或者调用开源包，正则匹配一下然后返回。后来去和老板讲我不适合这种工作，就拜拜了。如果不是A公司的经历，真说不准会在这家公司签下来，真的得好好感谢一下A公司。\n\n<a name=\"%E5%88%9D%E5%BF%83\"></a>\n## 初心\n\n之前跟A公司的一些小伙伴聊天，我说自己虽然每天都在看代码写代码，很充实，但是感觉并不是自己想写的那种。一位java的小伙伴说自己也这样觉得，他先我一个月辞职。\n\n我甚至不能确切说出来自己到底向往什么，但我知道一件事是否是我愿意做，愿意24/7为之努力的。Do what you love 很适合我，但 Love what you do 就不是我的风格了。改需求、加需求对我都很OK，因为这都是为了产品更好，前提是这个产品自己为之自豪。\n\n相信每一个优秀的coder心中都有一杆标尺来定义自己和自己的code，会有一种对未知的向往，对知识的敬畏，他们逻辑缜密，一丝不苟，把coding教会他们的教给后代，把自己喜欢的事情做到极致。","source":"_posts/Essay/feeling_beMyself.md","raw":"---\ntitle: 不忘初心 方得始终\ndate: 2017/11/06 22:11:39\ncategories: Essay\ntags:\n    - Essay\n    - Feeling\n---\n\n初入社会，我决定去百度一下这四个字：[大学生初入社会应该注意什么？-知乎](https://www.zhihu.com/question/23241437)、[初入社会，告诉你一个真实的职场--职场经验血泪分享](http://bbs.tianya.cn/post-no20-481989-1.shtml)、[年轻人，初入社会不要自视甚高](http://www.360doc.com/content/15/0311/23/21770202_454437666.shtml)。又决定去Google一下`newbie in the office`：[How to Be the Office Newbie](http://www.quickanddirtytips.com/relationships/professional/how-to-be-the-office-newbie?page=1)、[The Office Newbie’s Survival Guide: Surviving Day #1](https://www.workitdaily.com/office-newbies-survival-guide/)、[3 Surprising Lessons You Can Learn From the Office Newbie](https://www.themuse.com/advice/3-surprising-lessons-you-can-learn-from-the-office-newbie)。粗略看了一下，大多是说如何处事为人、如何对待付出与回报这些。\n\n从大三暑假到现在，四个月有余了，实习之类的，感触颇深，有时候也会质疑自己，更多的还是收获。心态放正，不忘初心，方得始终。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [hr与offer](#hr%E4%B8%8Eoffer)\n- [表达与沟通](#%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%B2%9F%E9%80%9A)\n- [公交车](#%E5%85%AC%E4%BA%A4%E8%BD%A6)\n- [小公司](#%E5%B0%8F%E5%85%AC%E5%8F%B8)\n- [初心](#%E5%88%9D%E5%BF%83)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"hr%E4%B8%8Eoffer\"></a>\n## hr与offer\n\n暑假空下来之后，去投了A(500人+规模)和B(15人+规模)两家公司的简历。\n\n先收到了B公司的面试邀请，hr碰巧是学姐，了解到B公司刚刚起步，技术是大牛(真的大牛)，工资给2K。其实第一次出去实习，能碰到大牛已经很不错了，在小公司中和大牛接触的机会很多，然后我就接了offer。\n\n就在我已经准备好去B的时候，A公司发了面试邀请，给3K5的工资。我很想去A，毕竟大公司有更好的底蕴、更成熟的流程、更新的技术，但是我已经接了B的offer。A公司的hr对我讲：offer是双向的，有更好的平台就应该去更好的平台，实习还没开始，协议也没签，不要不好意思拒绝。后来我和B公司的学姐道歉，签了A公司的实习。\n\n很多时候，作为大学生，出去找实习，我们都把自己放在一个很被动的地位，尤其是出现挫折之后，把自己的预期不断降低，仔细想想，有些许对自己不自信、不负责任的味道。hr是我们步入社会接触的第一批人，我们应该对他们足够尊敬，但是不是畏惧，担心自己表现不好之类。hr其实很温柔和善，愿意为我们答疑解惑，大大方方地和他们沟通，对双方都有好处。\n\n<a name=\"%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%B2%9F%E9%80%9A\"></a>\n## 表达与沟通\n\n我进入了创新研发部，我们每天都会开早会同步进度，然后周末开例会评审版本，偶尔还会有吐槽时间。开这些会，大家会跟进产品，处处为产品考虑，对事不对人，让我印象十分深刻。但也有一些消极的元素：没有如期交付时会抱怨(有时候同事的需求确实做不完)，但很少有赞扬，上级不断为员工注入工作激素，恨不得他们24/7地做需求。\n\n很少有人表达自己，因为无一例外，吐槽只是吐槽，并没有实质性的改变。我的导师，在我看来，是一个聪明人，在公司和家庭之间游刃有余，擅长吐槽，释放了压力，心态保持的很好。\n\n沟通方面，大家都很忙，都在认真地完成自己的需求，一方面，聊天工具沟通效率不高，另一方面，又不忍心打断别人思考，这就会导致自己的需求被拖延，之间的平衡，是我们需要好好摸索的。\n\n<a name=\"%E5%85%AC%E4%BA%A4%E8%BD%A6\"></a>\n## 公交车\n\n后来因为不喜欢自己所做的业务，选择了辞职，决定去小公司C看看。搭公交去面试，不得不说，公交是社会的缩影。\n\n**\\#孩子\\#** 刚好赶上小学生放学，公交车上有许多接学生的家长。这些家长比我大不了多少，他们和孩子聊天，问他们学校的事情，教他们道理。几年后，我也会成为他们的一员，不会有那种一人吃饱全家不饿的潇洒了，孩子会是生活的很大一部分，也会是我们的leisure time。\n\n**\\#教养\\#** 我旁边一对母子，从别人位子旁挤过、我帮他捡瓶盖孩子都会大方地说谢谢。但另一个孩子就淘气的多，霸占座位、大声尖叫，引得全车人侧目，后来他下车时，才发现他其实也是有家长来接，只不过家长一直默不作声。让我想起了一条新闻【[年轻妈妈一上飞机就发糖！就是为了……](http://news.sina.com.cn/o/2017-09-27/doc-ifymeswe0343730.shtml)】，孩子的教养多少有父母的影射。\n\n**\\#婚姻\\#** 这是一个温暖且沉重的话题，车上爷爷奶奶诠释的生动浪漫。但也有一位孕妈，看起来年轻贤惠，一个高中生给她让座，她坐下后讨好地向一个男士笑，讲不出来是丈夫还是爸爸，那人竟看都不看一眼，抬起头看电视。百般滋味，不知如何道明。\n\n<a name=\"%E5%B0%8F%E5%85%AC%E5%8F%B8\"></a>\n## 小公司\n\nC公司是专门做API，图像识别、聊天机器人对我很有吸引力，于是过去面试。凄凉，是C公司给我的第一印象。一百平方左右的办公室里面坐了十来个人，桌子不是很整洁，几乎没有什么装饰。\n\n面试的时候，面试官(老板)没有怎么准备过，随口问了几个函数，然后在他的代码里找了几个函数，问了下memcached，就没了。他说现在接口不需要开发，主要是维护接口。然后我就回来了，面试过程15分钟不到。后面接到hr的电话，希望我签一年合同，我拒绝了，要求先实习看一下再决定签不签。总之C公司的流程很不友好。\n\n后面去了公司，电脑文件很乱，尤其是前面同事装的插件还在，复制都会弹出华而不实的工具窗口，打断思路。后来看到代码我就震惊了：\n- 接口名中英混杂，接口目录、核心目录、管理员目录混在一起\n- 所谓的图像识别，聊天机器人其实是调用别的公司的API！！！\n- DEPRECATED的sql到处放，各种密码掺在代码里，根本谈不上软件架构\n- 左边小哥哥用低音炮循环《我们不一样》、《怒放的生命》之类，老板在一边跟着哼\n- 右边小姐姐刷刷腾讯新闻，然后看看代码\n\n此外，我还见到了一条三行的坑爹sql，用来相似匹配：两个表join一下，然后在每个字段用`%keyword%`匹配，再用`or`连接，足足用了7、8个`or`！！！当天下午，他们还在讨论接口撑不住别人1000RPS...\n\n所有的接口归纳起来就两点：`curl`别人的接口或者调用开源包，正则匹配一下然后返回。后来去和老板讲我不适合这种工作，就拜拜了。如果不是A公司的经历，真说不准会在这家公司签下来，真的得好好感谢一下A公司。\n\n<a name=\"%E5%88%9D%E5%BF%83\"></a>\n## 初心\n\n之前跟A公司的一些小伙伴聊天，我说自己虽然每天都在看代码写代码，很充实，但是感觉并不是自己想写的那种。一位java的小伙伴说自己也这样觉得，他先我一个月辞职。\n\n我甚至不能确切说出来自己到底向往什么，但我知道一件事是否是我愿意做，愿意24/7为之努力的。Do what you love 很适合我，但 Love what you do 就不是我的风格了。改需求、加需求对我都很OK，因为这都是为了产品更好，前提是这个产品自己为之自豪。\n\n相信每一个优秀的coder心中都有一杆标尺来定义自己和自己的code，会有一种对未知的向往，对知识的敬畏，他们逻辑缜密，一丝不苟，把coding教会他们的教给后代，把自己喜欢的事情做到极致。","slug":"Essay/feeling_beMyself","published":1,"updated":"2017-11-13T04:45:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1kx00022ys8pvs83z49","content":"<p>初入社会，我决定去百度一下这四个字：<a href=\"https://www.zhihu.com/question/23241437\" target=\"_blank\" rel=\"external\">大学生初入社会应该注意什么？-知乎</a>、<a href=\"http://bbs.tianya.cn/post-no20-481989-1.shtml\" target=\"_blank\" rel=\"external\">初入社会，告诉你一个真实的职场–职场经验血泪分享</a>、<a href=\"http://www.360doc.com/content/15/0311/23/21770202_454437666.shtml\" target=\"_blank\" rel=\"external\">年轻人，初入社会不要自视甚高</a>。又决定去Google一下<code>newbie in the office</code>：<a href=\"http://www.quickanddirtytips.com/relationships/professional/how-to-be-the-office-newbie?page=1\" target=\"_blank\" rel=\"external\">How to Be the Office Newbie</a>、<a href=\"https://www.workitdaily.com/office-newbies-survival-guide/\" target=\"_blank\" rel=\"external\">The Office Newbie’s Survival Guide: Surviving Day #1</a>、<a href=\"https://www.themuse.com/advice/3-surprising-lessons-you-can-learn-from-the-office-newbie\" target=\"_blank\" rel=\"external\">3 Surprising Lessons You Can Learn From the Office Newbie</a>。粗略看了一下，大多是说如何处事为人、如何对待付出与回报这些。</p>\n<p>从大三暑假到现在，四个月有余了，实习之类的，感触颇深，有时候也会质疑自己，更多的还是收获。心态放正，不忘初心，方得始终。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#hr%E4%B8%8Eoffer\">hr与offer</a></li>\n<li><a href=\"#%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%B2%9F%E9%80%9A\">表达与沟通</a></li>\n<li><a href=\"#%E5%85%AC%E4%BA%A4%E8%BD%A6\">公交车</a></li>\n<li><a href=\"#%E5%B0%8F%E5%85%AC%E5%8F%B8\">小公司</a></li>\n<li><a href=\"#%E5%88%9D%E5%BF%83\">初心</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"hr%E4%B8%8Eoffer\"></a></p>\n<h2 id=\"hr与offer\"><a href=\"#hr与offer\" class=\"headerlink\" title=\"hr与offer\"></a>hr与offer</h2><p>暑假空下来之后，去投了A(500人+规模)和B(15人+规模)两家公司的简历。</p>\n<p>先收到了B公司的面试邀请，hr碰巧是学姐，了解到B公司刚刚起步，技术是大牛(真的大牛)，工资给2K。其实第一次出去实习，能碰到大牛已经很不错了，在小公司中和大牛接触的机会很多，然后我就接了offer。</p>\n<p>就在我已经准备好去B的时候，A公司发了面试邀请，给3K5的工资。我很想去A，毕竟大公司有更好的底蕴、更成熟的流程、更新的技术，但是我已经接了B的offer。A公司的hr对我讲：offer是双向的，有更好的平台就应该去更好的平台，实习还没开始，协议也没签，不要不好意思拒绝。后来我和B公司的学姐道歉，签了A公司的实习。</p>\n<p>很多时候，作为大学生，出去找实习，我们都把自己放在一个很被动的地位，尤其是出现挫折之后，把自己的预期不断降低，仔细想想，有些许对自己不自信、不负责任的味道。hr是我们步入社会接触的第一批人，我们应该对他们足够尊敬，但是不是畏惧，担心自己表现不好之类。hr其实很温柔和善，愿意为我们答疑解惑，大大方方地和他们沟通，对双方都有好处。</p>\n<p><a name=\"%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%B2%9F%E9%80%9A\"></a></p>\n<h2 id=\"表达与沟通\"><a href=\"#表达与沟通\" class=\"headerlink\" title=\"表达与沟通\"></a>表达与沟通</h2><p>我进入了创新研发部，我们每天都会开早会同步进度，然后周末开例会评审版本，偶尔还会有吐槽时间。开这些会，大家会跟进产品，处处为产品考虑，对事不对人，让我印象十分深刻。但也有一些消极的元素：没有如期交付时会抱怨(有时候同事的需求确实做不完)，但很少有赞扬，上级不断为员工注入工作激素，恨不得他们24/7地做需求。</p>\n<p>很少有人表达自己，因为无一例外，吐槽只是吐槽，并没有实质性的改变。我的导师，在我看来，是一个聪明人，在公司和家庭之间游刃有余，擅长吐槽，释放了压力，心态保持的很好。</p>\n<p>沟通方面，大家都很忙，都在认真地完成自己的需求，一方面，聊天工具沟通效率不高，另一方面，又不忍心打断别人思考，这就会导致自己的需求被拖延，之间的平衡，是我们需要好好摸索的。</p>\n<p><a name=\"%E5%85%AC%E4%BA%A4%E8%BD%A6\"></a></p>\n<h2 id=\"公交车\"><a href=\"#公交车\" class=\"headerlink\" title=\"公交车\"></a>公交车</h2><p>后来因为不喜欢自己所做的业务，选择了辞职，决定去小公司C看看。搭公交去面试，不得不说，公交是社会的缩影。</p>\n<p><strong>#孩子#</strong> 刚好赶上小学生放学，公交车上有许多接学生的家长。这些家长比我大不了多少，他们和孩子聊天，问他们学校的事情，教他们道理。几年后，我也会成为他们的一员，不会有那种一人吃饱全家不饿的潇洒了，孩子会是生活的很大一部分，也会是我们的leisure time。</p>\n<p><strong>#教养#</strong> 我旁边一对母子，从别人位子旁挤过、我帮他捡瓶盖孩子都会大方地说谢谢。但另一个孩子就淘气的多，霸占座位、大声尖叫，引得全车人侧目，后来他下车时，才发现他其实也是有家长来接，只不过家长一直默不作声。让我想起了一条新闻【<a href=\"http://news.sina.com.cn/o/2017-09-27/doc-ifymeswe0343730.shtml\" target=\"_blank\" rel=\"external\">年轻妈妈一上飞机就发糖！就是为了……</a>】，孩子的教养多少有父母的影射。</p>\n<p><strong>#婚姻#</strong> 这是一个温暖且沉重的话题，车上爷爷奶奶诠释的生动浪漫。但也有一位孕妈，看起来年轻贤惠，一个高中生给她让座，她坐下后讨好地向一个男士笑，讲不出来是丈夫还是爸爸，那人竟看都不看一眼，抬起头看电视。百般滋味，不知如何道明。</p>\n<p><a name=\"%E5%B0%8F%E5%85%AC%E5%8F%B8\"></a></p>\n<h2 id=\"小公司\"><a href=\"#小公司\" class=\"headerlink\" title=\"小公司\"></a>小公司</h2><p>C公司是专门做API，图像识别、聊天机器人对我很有吸引力，于是过去面试。凄凉，是C公司给我的第一印象。一百平方左右的办公室里面坐了十来个人，桌子不是很整洁，几乎没有什么装饰。</p>\n<p>面试的时候，面试官(老板)没有怎么准备过，随口问了几个函数，然后在他的代码里找了几个函数，问了下memcached，就没了。他说现在接口不需要开发，主要是维护接口。然后我就回来了，面试过程15分钟不到。后面接到hr的电话，希望我签一年合同，我拒绝了，要求先实习看一下再决定签不签。总之C公司的流程很不友好。</p>\n<p>后面去了公司，电脑文件很乱，尤其是前面同事装的插件还在，复制都会弹出华而不实的工具窗口，打断思路。后来看到代码我就震惊了：</p>\n<ul>\n<li>接口名中英混杂，接口目录、核心目录、管理员目录混在一起</li>\n<li>所谓的图像识别，聊天机器人其实是调用别的公司的API！！！</li>\n<li>DEPRECATED的sql到处放，各种密码掺在代码里，根本谈不上软件架构</li>\n<li>左边小哥哥用低音炮循环《我们不一样》、《怒放的生命》之类，老板在一边跟着哼</li>\n<li>右边小姐姐刷刷腾讯新闻，然后看看代码</li>\n</ul>\n<p>此外，我还见到了一条三行的坑爹sql，用来相似匹配：两个表join一下，然后在每个字段用<code>%keyword%</code>匹配，再用<code>or</code>连接，足足用了7、8个<code>or</code>！！！当天下午，他们还在讨论接口撑不住别人1000RPS…</p>\n<p>所有的接口归纳起来就两点：<code>curl</code>别人的接口或者调用开源包，正则匹配一下然后返回。后来去和老板讲我不适合这种工作，就拜拜了。如果不是A公司的经历，真说不准会在这家公司签下来，真的得好好感谢一下A公司。</p>\n<p><a name=\"%E5%88%9D%E5%BF%83\"></a></p>\n<h2 id=\"初心\"><a href=\"#初心\" class=\"headerlink\" title=\"初心\"></a>初心</h2><p>之前跟A公司的一些小伙伴聊天，我说自己虽然每天都在看代码写代码，很充实，但是感觉并不是自己想写的那种。一位java的小伙伴说自己也这样觉得，他先我一个月辞职。</p>\n<p>我甚至不能确切说出来自己到底向往什么，但我知道一件事是否是我愿意做，愿意24/7为之努力的。Do what you love 很适合我，但 Love what you do 就不是我的风格了。改需求、加需求对我都很OK，因为这都是为了产品更好，前提是这个产品自己为之自豪。</p>\n<p>相信每一个优秀的coder心中都有一杆标尺来定义自己和自己的code，会有一种对未知的向往，对知识的敬畏，他们逻辑缜密，一丝不苟，把coding教会他们的教给后代，把自己喜欢的事情做到极致。</p>\n","site":{"data":{}},"excerpt":"<p>初入社会，我决定去百度一下这四个字：<a href=\"https://www.zhihu.com/question/23241437\" target=\"_blank\" rel=\"external\">大学生初入社会应该注意什么？-知乎</a>、<a href=\"http://bbs.tianya.cn/post-no20-481989-1.shtml\" target=\"_blank\" rel=\"external\">初入社会，告诉你一个真实的职场–职场经验血泪分享</a>、<a href=\"http://www.360doc.com/content/15/0311/23/21770202_454437666.shtml\" target=\"_blank\" rel=\"external\">年轻人，初入社会不要自视甚高</a>。又决定去Google一下<code>newbie in the office</code>：<a href=\"http://www.quickanddirtytips.com/relationships/professional/how-to-be-the-office-newbie?page=1\" target=\"_blank\" rel=\"external\">How to Be the Office Newbie</a>、<a href=\"https://www.workitdaily.com/office-newbies-survival-guide/\" target=\"_blank\" rel=\"external\">The Office Newbie’s Survival Guide: Surviving Day #1</a>、<a href=\"https://www.themuse.com/advice/3-surprising-lessons-you-can-learn-from-the-office-newbie\" target=\"_blank\" rel=\"external\">3 Surprising Lessons You Can Learn From the Office Newbie</a>。粗略看了一下，大多是说如何处事为人、如何对待付出与回报这些。</p>\n<p>从大三暑假到现在，四个月有余了，实习之类的，感触颇深，有时候也会质疑自己，更多的还是收获。心态放正，不忘初心，方得始终。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#hr%E4%B8%8Eoffer\">hr与offer</a></li>\n<li><a href=\"#%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%B2%9F%E9%80%9A\">表达与沟通</a></li>\n<li><a href=\"#%E5%85%AC%E4%BA%A4%E8%BD%A6\">公交车</a></li>\n<li><a href=\"#%E5%B0%8F%E5%85%AC%E5%8F%B8\">小公司</a></li>\n<li><a href=\"#%E5%88%9D%E5%BF%83\">初心</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"hr%E4%B8%8Eoffer\"></a></p>\n<h2 id=\"hr与offer\"><a href=\"#hr与offer\" class=\"headerlink\" title=\"hr与offer\"></a>hr与offer</h2><p>暑假空下来之后，去投了A(500人+规模)和B(15人+规模)两家公司的简历。</p>\n<p>先收到了B公司的面试邀请，hr碰巧是学姐，了解到B公司刚刚起步，技术是大牛(真的大牛)，工资给2K。其实第一次出去实习，能碰到大牛已经很不错了，在小公司中和大牛接触的机会很多，然后我就接了offer。</p>\n<p>就在我已经准备好去B的时候，A公司发了面试邀请，给3K5的工资。我很想去A，毕竟大公司有更好的底蕴、更成熟的流程、更新的技术，但是我已经接了B的offer。A公司的hr对我讲：offer是双向的，有更好的平台就应该去更好的平台，实习还没开始，协议也没签，不要不好意思拒绝。后来我和B公司的学姐道歉，签了A公司的实习。</p>\n<p>很多时候，作为大学生，出去找实习，我们都把自己放在一个很被动的地位，尤其是出现挫折之后，把自己的预期不断降低，仔细想想，有些许对自己不自信、不负责任的味道。hr是我们步入社会接触的第一批人，我们应该对他们足够尊敬，但是不是畏惧，担心自己表现不好之类。hr其实很温柔和善，愿意为我们答疑解惑，大大方方地和他们沟通，对双方都有好处。</p>\n<p><a name=\"%E8%A1%A8%E8%BE%BE%E4%B8%8E%E6%B2%9F%E9%80%9A\"></a></p>\n<h2 id=\"表达与沟通\"><a href=\"#表达与沟通\" class=\"headerlink\" title=\"表达与沟通\"></a>表达与沟通</h2><p>我进入了创新研发部，我们每天都会开早会同步进度，然后周末开例会评审版本，偶尔还会有吐槽时间。开这些会，大家会跟进产品，处处为产品考虑，对事不对人，让我印象十分深刻。但也有一些消极的元素：没有如期交付时会抱怨(有时候同事的需求确实做不完)，但很少有赞扬，上级不断为员工注入工作激素，恨不得他们24/7地做需求。</p>\n<p>很少有人表达自己，因为无一例外，吐槽只是吐槽，并没有实质性的改变。我的导师，在我看来，是一个聪明人，在公司和家庭之间游刃有余，擅长吐槽，释放了压力，心态保持的很好。</p>\n<p>沟通方面，大家都很忙，都在认真地完成自己的需求，一方面，聊天工具沟通效率不高，另一方面，又不忍心打断别人思考，这就会导致自己的需求被拖延，之间的平衡，是我们需要好好摸索的。</p>\n<p><a name=\"%E5%85%AC%E4%BA%A4%E8%BD%A6\"></a></p>\n<h2 id=\"公交车\"><a href=\"#公交车\" class=\"headerlink\" title=\"公交车\"></a>公交车</h2><p>后来因为不喜欢自己所做的业务，选择了辞职，决定去小公司C看看。搭公交去面试，不得不说，公交是社会的缩影。</p>\n<p><strong>#孩子#</strong> 刚好赶上小学生放学，公交车上有许多接学生的家长。这些家长比我大不了多少，他们和孩子聊天，问他们学校的事情，教他们道理。几年后，我也会成为他们的一员，不会有那种一人吃饱全家不饿的潇洒了，孩子会是生活的很大一部分，也会是我们的leisure time。</p>\n<p><strong>#教养#</strong> 我旁边一对母子，从别人位子旁挤过、我帮他捡瓶盖孩子都会大方地说谢谢。但另一个孩子就淘气的多，霸占座位、大声尖叫，引得全车人侧目，后来他下车时，才发现他其实也是有家长来接，只不过家长一直默不作声。让我想起了一条新闻【<a href=\"http://news.sina.com.cn/o/2017-09-27/doc-ifymeswe0343730.shtml\" target=\"_blank\" rel=\"external\">年轻妈妈一上飞机就发糖！就是为了……</a>】，孩子的教养多少有父母的影射。</p>\n<p><strong>#婚姻#</strong> 这是一个温暖且沉重的话题，车上爷爷奶奶诠释的生动浪漫。但也有一位孕妈，看起来年轻贤惠，一个高中生给她让座，她坐下后讨好地向一个男士笑，讲不出来是丈夫还是爸爸，那人竟看都不看一眼，抬起头看电视。百般滋味，不知如何道明。</p>\n<p><a name=\"%E5%B0%8F%E5%85%AC%E5%8F%B8\"></a></p>\n<h2 id=\"小公司\"><a href=\"#小公司\" class=\"headerlink\" title=\"小公司\"></a>小公司</h2><p>C公司是专门做API，图像识别、聊天机器人对我很有吸引力，于是过去面试。凄凉，是C公司给我的第一印象。一百平方左右的办公室里面坐了十来个人，桌子不是很整洁，几乎没有什么装饰。</p>\n<p>面试的时候，面试官(老板)没有怎么准备过，随口问了几个函数，然后在他的代码里找了几个函数，问了下memcached，就没了。他说现在接口不需要开发，主要是维护接口。然后我就回来了，面试过程15分钟不到。后面接到hr的电话，希望我签一年合同，我拒绝了，要求先实习看一下再决定签不签。总之C公司的流程很不友好。</p>\n<p>后面去了公司，电脑文件很乱，尤其是前面同事装的插件还在，复制都会弹出华而不实的工具窗口，打断思路。后来看到代码我就震惊了：</p>\n<ul>\n<li>接口名中英混杂，接口目录、核心目录、管理员目录混在一起</li>\n<li>所谓的图像识别，聊天机器人其实是调用别的公司的API！！！</li>\n<li>DEPRECATED的sql到处放，各种密码掺在代码里，根本谈不上软件架构</li>\n<li>左边小哥哥用低音炮循环《我们不一样》、《怒放的生命》之类，老板在一边跟着哼</li>\n<li>右边小姐姐刷刷腾讯新闻，然后看看代码</li>\n</ul>\n<p>此外，我还见到了一条三行的坑爹sql，用来相似匹配：两个表join一下，然后在每个字段用<code>%keyword%</code>匹配，再用<code>or</code>连接，足足用了7、8个<code>or</code>！！！当天下午，他们还在讨论接口撑不住别人1000RPS…</p>\n<p>所有的接口归纳起来就两点：<code>curl</code>别人的接口或者调用开源包，正则匹配一下然后返回。后来去和老板讲我不适合这种工作，就拜拜了。如果不是A公司的经历，真说不准会在这家公司签下来，真的得好好感谢一下A公司。</p>\n<p><a name=\"%E5%88%9D%E5%BF%83\"></a></p>\n<h2 id=\"初心\"><a href=\"#初心\" class=\"headerlink\" title=\"初心\"></a>初心</h2><p>之前跟A公司的一些小伙伴聊天，我说自己虽然每天都在看代码写代码，很充实，但是感觉并不是自己想写的那种。一位java的小伙伴说自己也这样觉得，他先我一个月辞职。</p>\n<p>我甚至不能确切说出来自己到底向往什么，但我知道一件事是否是我愿意做，愿意24/7为之努力的。Do what you love 很适合我，但 Love what you do 就不是我的风格了。改需求、加需求对我都很OK，因为这都是为了产品更好，前提是这个产品自己为之自豪。</p>\n<p>相信每一个优秀的coder心中都有一杆标尺来定义自己和自己的code，会有一种对未知的向往，对知识的敬畏，他们逻辑缜密，一丝不苟，把coding教会他们的教给后代，把自己喜欢的事情做到极致。</p>"},{"title":"博文头部Markdown Snippet分享","date":"2017-11-07T08:11:18.000Z","_content":"\n我的通用博客头部Snippet，实现了博文摘要、目录、转载链接等功能，利用Snippet工具就能很简单的创建文章开头。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [格式](#%E6%A0%BC%E5%BC%8F)\n- [应用](#%E5%BA%94%E7%94%A8)\n- [例子](#%E4%BE%8B%E5%AD%90)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n\n<a name=\"%E6%A0%BC%E5%BC%8F\"></a>\n## 格式\n\n```markdown\n---\ntitle: \ndate: \ncategories: \ntags:\n    - \n---\n\n\n\n目录：\n<!-- MarkdownTOC -->\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n```\n\n<a name=\"%E5%BA%94%E7%94%A8\"></a>\n## 应用\n\n```markdown\n---\ntitle: 文章标题\ndate: 日期\ncategories: 类目名\ntags:\n    - 一级标签\n    - 二级标签\n    - 等等\n---\n\n这里是博文摘要。\n\n目录：\n<!-- MarkdownTOC -->\n供SublimeText的MarkdownTOC插件使用，会在保存时自动更新目录结构。\n<!-- /MarkdownTOC -->\n\n<!-- more --> Hexo的Next主题具有折叠功能，这条语句下面的内容会被折叠。\n\n博文的转载链接。\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n自动为博文生成转载链接，免去了很多麻烦。注意上下都有换行，并且其中不能有换行，否则Markdown解析时会破坏脚本，使之不能工作。\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>  这里画了一条横线，下面的内容就是正文内容啦。\n\n```\n\n<a name=\"%E4%BE%8B%E5%AD%90\"></a>\n## 例子\n\n**本文**的Snippet修改后是这样的：\n\n```markdown\n---\ntitle: 博文头部Markdown Snippet分享\ndate: 2017/11/07 16:11:18\ncategories: Markdown\ntags:\n    - Markdown\n    - Blog\n    - Snippet\n---\n\n我的通用博客头部Snippet，实现了博文摘要、目录、转载链接等功能，利用Snippet工具就能很简单的创建文章开头。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [格式](#%E6%A0%BC%E5%BC%8F)\n- [应用](#%E5%BA%94%E7%94%A8)\n- [例子](#%E4%BE%8B%E5%AD%90)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n```\n\n- date是由编写的Alfred workflow输出的\n- 目录是由SublimeText的Markdown插件更新的，并且在文中加了锚点\n- 转载声明在浏览器解析时会自动变成这边博文的地址\n","source":"_posts/Markdown/blog_headSnippet.md","raw":"---\ntitle: 博文头部Markdown Snippet分享\ndate: 2017/11/07 16:11:18\ncategories: Markdown\ntags:\n    - Markdown\n    - Blog\n    - Snippet\n---\n\n我的通用博客头部Snippet，实现了博文摘要、目录、转载链接等功能，利用Snippet工具就能很简单的创建文章开头。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [格式](#%E6%A0%BC%E5%BC%8F)\n- [应用](#%E5%BA%94%E7%94%A8)\n- [例子](#%E4%BE%8B%E5%AD%90)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n\n<a name=\"%E6%A0%BC%E5%BC%8F\"></a>\n## 格式\n\n```markdown\n---\ntitle: \ndate: \ncategories: \ntags:\n    - \n---\n\n\n\n目录：\n<!-- MarkdownTOC -->\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n```\n\n<a name=\"%E5%BA%94%E7%94%A8\"></a>\n## 应用\n\n```markdown\n---\ntitle: 文章标题\ndate: 日期\ncategories: 类目名\ntags:\n    - 一级标签\n    - 二级标签\n    - 等等\n---\n\n这里是博文摘要。\n\n目录：\n<!-- MarkdownTOC -->\n供SublimeText的MarkdownTOC插件使用，会在保存时自动更新目录结构。\n<!-- /MarkdownTOC -->\n\n<!-- more --> Hexo的Next主题具有折叠功能，这条语句下面的内容会被折叠。\n\n博文的转载链接。\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n自动为博文生成转载链接，免去了很多麻烦。注意上下都有换行，并且其中不能有换行，否则Markdown解析时会破坏脚本，使之不能工作。\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>  这里画了一条横线，下面的内容就是正文内容啦。\n\n```\n\n<a name=\"%E4%BE%8B%E5%AD%90\"></a>\n## 例子\n\n**本文**的Snippet修改后是这样的：\n\n```markdown\n---\ntitle: 博文头部Markdown Snippet分享\ndate: 2017/11/07 16:11:18\ncategories: Markdown\ntags:\n    - Markdown\n    - Blog\n    - Snippet\n---\n\n我的通用博客头部Snippet，实现了博文摘要、目录、转载链接等功能，利用Snippet工具就能很简单的创建文章开头。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [格式](#%E6%A0%BC%E5%BC%8F)\n- [应用](#%E5%BA%94%E7%94%A8)\n- [例子](#%E4%BE%8B%E5%AD%90)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n```\n\n- date是由编写的Alfred workflow输出的\n- 目录是由SublimeText的Markdown插件更新的，并且在文中加了锚点\n- 转载声明在浏览器解析时会自动变成这边博文的地址\n","slug":"Markdown/blog_headSnippet","published":1,"updated":"2017-11-13T04:45:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1l200032ys87mtxbesp","content":"<p>我的通用博客头部Snippet，实现了博文摘要、目录、转载链接等功能，利用Snippet工具就能很简单的创建文章开头。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E6%A0%BC%E5%BC%8F\">格式</a></li>\n<li><a href=\"#%E5%BA%94%E7%94%A8\">应用</a></li>\n<li><a href=\"#%E4%BE%8B%E5%AD%90\">例子</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n\n<p><a name=\"%E6%A0%BC%E5%BC%8F\"></a></p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: </div><div class=\"line\">date: </div><div class=\"line\">categories: </div><div class=\"line\">tags:</div><div class=\"line\"><span class=\"code\">    - </span></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">目录：</div><div class=\"line\">&lt;!-- MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- /MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"quote\">&gt; 转载请注明出处：&lt;a id=\"reproduction_link\"&gt;www.notee.cc&lt;/a&gt;</span></div><div class=\"line\"></div><div class=\"line\">&lt;script type=\"text/javascript\"&gt;document.getElementById('reproduction<span class=\"emphasis\">_link').innerHTML = window.location.href;document.getElementById('reproduction_</span>link').href = window.location.href;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;hr&gt;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%BA%94%E7%94%A8\"></a></p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: 文章标题</div><div class=\"line\">date: 日期</div><div class=\"line\">categories: 类目名</div><div class=\"line\">tags:</div><div class=\"line\"><span class=\"code\">    - 一级标签</span></div><div class=\"line\"><span class=\"code\">    - 二级标签</span></div><div class=\"line\"><span class=\"code\">    - 等等</span></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">这里是博文摘要。</div><div class=\"line\"></div><div class=\"line\">目录：</div><div class=\"line\">&lt;!-- MarkdownTOC --&gt;</div><div class=\"line\">供SublimeText的MarkdownTOC插件使用，会在保存时自动更新目录结构。</div><div class=\"line\">&lt;!-- /MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt; Hexo的Next主题具有折叠功能，这条语句下面的内容会被折叠。</div><div class=\"line\"></div><div class=\"line\">博文的转载链接。</div><div class=\"line\"><span class=\"quote\">&gt; 转载请注明出处：&lt;a id=\"reproduction_link\"&gt;www.notee.cc&lt;/a&gt;</span></div><div class=\"line\"></div><div class=\"line\">自动为博文生成转载链接，免去了很多麻烦。注意上下都有换行，并且其中不能有换行，否则Markdown解析时会破坏脚本，使之不能工作。</div><div class=\"line\">&lt;script type=\"text/javascript\"&gt;document.getElementById('reproduction<span class=\"emphasis\">_link').innerHTML = window.location.href;document.getElementById('reproduction_</span>link').href = window.location.href;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;hr&gt;  这里画了一条横线，下面的内容就是正文内容啦。</div></pre></td></tr></table></figure>\n<p><a name=\"%E4%BE%8B%E5%AD%90\"></a></p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p><strong>本文</strong>的Snippet修改后是这样的：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: 博文头部Markdown Snippet分享</div><div class=\"line\">date: 2017/11/07 16:11:18</div><div class=\"line\">categories: Markdown</div><div class=\"line\">tags:</div><div class=\"line\"><span class=\"code\">    - Markdown</span></div><div class=\"line\"><span class=\"code\">    - Blog</span></div><div class=\"line\"><span class=\"code\">    - Snippet</span></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">我的通用博客头部Snippet，实现了博文摘要、目录、转载链接等功能，利用Snippet工具就能很简单的创建文章开头。</div><div class=\"line\"></div><div class=\"line\">目录：</div><div class=\"line\">&lt;!-- MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">- </span>[<span class=\"string\">格式</span>](<span class=\"link\">#%E6%A0%BC%E5%BC%8F</span>)</div><div class=\"line\"><span class=\"bullet\">- </span>[<span class=\"string\">应用</span>](<span class=\"link\">#%E5%BA%94%E7%94%A8</span>)</div><div class=\"line\"><span class=\"bullet\">- </span>[<span class=\"string\">例子</span>](<span class=\"link\">#%E4%BE%8B%E5%AD%90</span>)</div><div class=\"line\"></div><div class=\"line\">&lt;!-- /MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"quote\">&gt; 转载请注明出处：&lt;a id=\"reproduction_link\"&gt;www.notee.cc&lt;/a&gt;</span></div><div class=\"line\"></div><div class=\"line\">&lt;script type=\"text/javascript\"&gt;document.getElementById('reproduction<span class=\"emphasis\">_link').innerHTML = window.location.href;document.getElementById('reproduction_</span>link').href = window.location.href;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;hr&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>date是由编写的Alfred workflow输出的</li>\n<li>目录是由SublimeText的Markdown插件更新的，并且在文中加了锚点</li>\n<li>转载声明在浏览器解析时会自动变成这边博文的地址</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>我的通用博客头部Snippet，实现了博文摘要、目录、转载链接等功能，利用Snippet工具就能很简单的创建文章开头。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E6%A0%BC%E5%BC%8F\">格式</a></li>\n<li><a href=\"#%E5%BA%94%E7%94%A8\">应用</a></li>\n<li><a href=\"#%E4%BE%8B%E5%AD%90\">例子</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n\n<p><a name=\"%E6%A0%BC%E5%BC%8F\"></a></p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: </div><div class=\"line\">date: </div><div class=\"line\">categories: </div><div class=\"line\">tags:</div><div class=\"line\"><span class=\"code\">    - </span></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">目录：</div><div class=\"line\">&lt;!-- MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- /MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"quote\">&gt; 转载请注明出处：&lt;a id=\"reproduction_link\"&gt;www.notee.cc&lt;/a&gt;</span></div><div class=\"line\"></div><div class=\"line\">&lt;script type=\"text/javascript\"&gt;document.getElementById('reproduction<span class=\"emphasis\">_link').innerHTML = window.location.href;document.getElementById('reproduction_</span>link').href = window.location.href;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;hr&gt;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%BA%94%E7%94%A8\"></a></p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: 文章标题</div><div class=\"line\">date: 日期</div><div class=\"line\">categories: 类目名</div><div class=\"line\">tags:</div><div class=\"line\"><span class=\"code\">    - 一级标签</span></div><div class=\"line\"><span class=\"code\">    - 二级标签</span></div><div class=\"line\"><span class=\"code\">    - 等等</span></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">这里是博文摘要。</div><div class=\"line\"></div><div class=\"line\">目录：</div><div class=\"line\">&lt;!-- MarkdownTOC --&gt;</div><div class=\"line\">供SublimeText的MarkdownTOC插件使用，会在保存时自动更新目录结构。</div><div class=\"line\">&lt;!-- /MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt; Hexo的Next主题具有折叠功能，这条语句下面的内容会被折叠。</div><div class=\"line\"></div><div class=\"line\">博文的转载链接。</div><div class=\"line\"><span class=\"quote\">&gt; 转载请注明出处：&lt;a id=\"reproduction_link\"&gt;www.notee.cc&lt;/a&gt;</span></div><div class=\"line\"></div><div class=\"line\">自动为博文生成转载链接，免去了很多麻烦。注意上下都有换行，并且其中不能有换行，否则Markdown解析时会破坏脚本，使之不能工作。</div><div class=\"line\">&lt;script type=\"text/javascript\"&gt;document.getElementById('reproduction<span class=\"emphasis\">_link').innerHTML = window.location.href;document.getElementById('reproduction_</span>link').href = window.location.href;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;hr&gt;  这里画了一条横线，下面的内容就是正文内容啦。</div></pre></td></tr></table></figure>\n<p><a name=\"%E4%BE%8B%E5%AD%90\"></a></p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p><strong>本文</strong>的Snippet修改后是这样的：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: 博文头部Markdown Snippet分享</div><div class=\"line\">date: 2017/11/07 16:11:18</div><div class=\"line\">categories: Markdown</div><div class=\"line\">tags:</div><div class=\"line\"><span class=\"code\">    - Markdown</span></div><div class=\"line\"><span class=\"code\">    - Blog</span></div><div class=\"line\"><span class=\"code\">    - Snippet</span></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">我的通用博客头部Snippet，实现了博文摘要、目录、转载链接等功能，利用Snippet工具就能很简单的创建文章开头。</div><div class=\"line\"></div><div class=\"line\">目录：</div><div class=\"line\">&lt;!-- MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">- </span>[<span class=\"string\">格式</span>](<span class=\"link\">#%E6%A0%BC%E5%BC%8F</span>)</div><div class=\"line\"><span class=\"bullet\">- </span>[<span class=\"string\">应用</span>](<span class=\"link\">#%E5%BA%94%E7%94%A8</span>)</div><div class=\"line\"><span class=\"bullet\">- </span>[<span class=\"string\">例子</span>](<span class=\"link\">#%E4%BE%8B%E5%AD%90</span>)</div><div class=\"line\"></div><div class=\"line\">&lt;!-- /MarkdownTOC --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"quote\">&gt; 转载请注明出处：&lt;a id=\"reproduction_link\"&gt;www.notee.cc&lt;/a&gt;</span></div><div class=\"line\"></div><div class=\"line\">&lt;script type=\"text/javascript\"&gt;document.getElementById('reproduction<span class=\"emphasis\">_link').innerHTML = window.location.href;document.getElementById('reproduction_</span>link').href = window.location.href;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;hr&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>date是由编写的Alfred workflow输出的</li>\n<li>目录是由SublimeText的Markdown插件更新的，并且在文中加了锚点</li>\n<li>转载声明在浏览器解析时会自动变成这边博文的地址</li>\n</ul>"},{"title":"VBS探索U盘","date":"2017-06-26T16:00:00.000Z","_content":"\n如果存在多个可移动磁盘，通过该脚本可以迅速拷贝目标文件，并分析磁盘结构。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [参数说明](#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E)\n- [源代码](#%E6%BA%90%E4%BB%A3%E7%A0%81)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"></a>\n## 参数说明\n\n```\n    ListLB：         列出大于该值的文件，0表示列出所有\n\n    ListDepthToStop：列表深度，0表示列出所有\n\n    RunFileCopy：    是否运行拷贝模块\n\n    CopyFrom：       进行拷贝搜索的根目录\n\n    CopyPattern：    拷贝搜索的正则表达式\n\n    CopyLB：         拷贝下界，0表示无下界\n\n    CopyUB：         拷贝上界，0表示无上界\n\n    InfoTo：         U盘信息保存目录\n\n    DriveInfoTo：    U盘信息保存文件\n\n    DriveListTo：    U盘文件信息保存文件\n```\n\n<a name=\"%E6%BA%90%E4%BB%A3%E7%A0%81\"></a>\n## 源代码\n\n```vbs\nListLB              = 0\nListDepthToStop     = 0\nRunFileCopy         = True\nCopyFrom            = \"\"\nCopyPattern         = \"\"\nCopyLB              = 0\nCopyUB              = 1024*1024*3\nInfoTo              = \"\"\nDriveInfoTo         = \"\"\nDriveListTo         = \"\"\n\nset FSO         = CreateObject(\"Scripting.FileSystemObject\")\nset Drives      = FSO.Drives\nset RE          = New RegExp\nCurDrive        = FSO.GetDriveName(FSO.GetAbsolutePathName(\".\"))\nRE.Pattern      = CopyPattern\n\nFor Each Drive In Drives\n    If  Drive.DriveType = 1 _\n    AND Drive.Path <> CurDrive Then\n        Randomize\n        SavingFolder    = FSO.BuildPath(CurDrive\\InfoTo\\Drive.VolumeName_Int(Rnd()*100))\n        Call MakeFolder(SavingFolder)\n\n        set F_DriveInfo = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveInfoTo), 2, True, -1)\n        set F_DriveList = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveListTo), 2, True, -1)\n        Call ListDrive(Drive.Path)\n        Call ListFolder(Drive.RootFolder.Path, 1)\n        F_DriveInfo.Close\n        F_DriveList.Close\n\n        IF CopyFrom = \"\" Then CopyFrom = Drive.RootFolder.Path\n        IF RunFileCopy = True AND FSO.FolderExists(CopyFrom) Then _\n            Call FileCopy(CopyFrom, SavingFolder)\n    End If\nNext\n\nFunction ListDrive (drive_path__)\n    set drive__     = FSO.GetDrive(drive_path__)\n    F_DriveInfo.WriteLine(\"Date:\" & \" \" & Date())\n    F_DriveInfo.WriteLine(\"VolumeName:\" & \" \" & drive__.VolumeName)\n    F_DriveInfo.WriteLine(\"FileSystem:\" & \" \" & drive__.FileSystem)\n    F_DriveInfo.WriteLine(\"TotalSize:\" & \" \" & drive__.TotalSize/1024/1024)\n    F_DriveInfo.WriteLine(\"FreeSpace:\" & \" \" & drive__.FreeSpace/1024/1024)\nEnd Function\n\nFunction ListFolder(cur_folder__, cur_depth__)\n    F_DriveList.WriteLine(Space((cur_depth__-1)*2) & \"+ \" & FSO.GetBaseName(cur_folder__))\n    For Each cur_file__ In FSO.GetFolder(cur_folder__).Files\n        If (ListLB = 0 OR cur_file__.Size > ListLB) Then _\n            F_DriveList.WriteLine(Space(cur_depth__*2) & cur_file__.Name)\n    Next\n    For Each sub_folder__ In FSO.GetFolder(cur_folder__).SubFolders\n        IF (DepthToStop = 0 OR cur_depth__ < DepthToStop) Then _\n            Call ListFolder(sub_folder__, cur_depth__ + 1)\n    Next\nEnd Function\n\nFunction FileCopy(src_folder__, sav_folder__)\n    For Each cur_file__ In FSO.GetFolder(src_folder__).Files\n        IF  (CopyUB = 0 OR cur_file__.Size < CopyUB) _\n        AND (CopyLB = 0 OR cur_file__.Size > CopyLB) _\n        AND (RE.Test(cur_file__.Name) = True) Then\n            IF Not FSO.FolderExists(sav_folder__) Then Call MakeFolder(sav_folder__)\n            FSO.CopyFile cur_file__.Path, FSO.BuildPath(sav_folder__, cur_file__.Name)\n        End If\n    Next\n    For Each sub_folder__ In FSO.GetFolder(src_folder__).SubFolders\n        Call FileCopy(sub_folder__,FSO.BuildPath(sav_folder__, FSO.GetBaseName(sub_folder__)))\n    Next\nEnd Function\n\nFunction MakeFolder(tar_path__)\n    If Not FSO.FolderExists(FSO.GetParentFolderName(tar_path__)) Then _\n        Call MakeFolder(FSO.GetParentFolderName(tar_path__))\n    If Not FSO.FolderExists(tar_path__) Then _\n        FSO.CreateFolder(tar_path__)\nEnd Function\n```","source":"_posts/VB/vbs_copyFileFromUDisk.md","raw":"---\ntitle: VBS探索U盘\ndate: 2017/06/27\ncategories: VB\ntags:\n    - VB\n    - VBS\n---\n\n如果存在多个可移动磁盘，通过该脚本可以迅速拷贝目标文件，并分析磁盘结构。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [参数说明](#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E)\n- [源代码](#%E6%BA%90%E4%BB%A3%E7%A0%81)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"></a>\n## 参数说明\n\n```\n    ListLB：         列出大于该值的文件，0表示列出所有\n\n    ListDepthToStop：列表深度，0表示列出所有\n\n    RunFileCopy：    是否运行拷贝模块\n\n    CopyFrom：       进行拷贝搜索的根目录\n\n    CopyPattern：    拷贝搜索的正则表达式\n\n    CopyLB：         拷贝下界，0表示无下界\n\n    CopyUB：         拷贝上界，0表示无上界\n\n    InfoTo：         U盘信息保存目录\n\n    DriveInfoTo：    U盘信息保存文件\n\n    DriveListTo：    U盘文件信息保存文件\n```\n\n<a name=\"%E6%BA%90%E4%BB%A3%E7%A0%81\"></a>\n## 源代码\n\n```vbs\nListLB              = 0\nListDepthToStop     = 0\nRunFileCopy         = True\nCopyFrom            = \"\"\nCopyPattern         = \"\"\nCopyLB              = 0\nCopyUB              = 1024*1024*3\nInfoTo              = \"\"\nDriveInfoTo         = \"\"\nDriveListTo         = \"\"\n\nset FSO         = CreateObject(\"Scripting.FileSystemObject\")\nset Drives      = FSO.Drives\nset RE          = New RegExp\nCurDrive        = FSO.GetDriveName(FSO.GetAbsolutePathName(\".\"))\nRE.Pattern      = CopyPattern\n\nFor Each Drive In Drives\n    If  Drive.DriveType = 1 _\n    AND Drive.Path <> CurDrive Then\n        Randomize\n        SavingFolder    = FSO.BuildPath(CurDrive\\InfoTo\\Drive.VolumeName_Int(Rnd()*100))\n        Call MakeFolder(SavingFolder)\n\n        set F_DriveInfo = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveInfoTo), 2, True, -1)\n        set F_DriveList = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveListTo), 2, True, -1)\n        Call ListDrive(Drive.Path)\n        Call ListFolder(Drive.RootFolder.Path, 1)\n        F_DriveInfo.Close\n        F_DriveList.Close\n\n        IF CopyFrom = \"\" Then CopyFrom = Drive.RootFolder.Path\n        IF RunFileCopy = True AND FSO.FolderExists(CopyFrom) Then _\n            Call FileCopy(CopyFrom, SavingFolder)\n    End If\nNext\n\nFunction ListDrive (drive_path__)\n    set drive__     = FSO.GetDrive(drive_path__)\n    F_DriveInfo.WriteLine(\"Date:\" & \" \" & Date())\n    F_DriveInfo.WriteLine(\"VolumeName:\" & \" \" & drive__.VolumeName)\n    F_DriveInfo.WriteLine(\"FileSystem:\" & \" \" & drive__.FileSystem)\n    F_DriveInfo.WriteLine(\"TotalSize:\" & \" \" & drive__.TotalSize/1024/1024)\n    F_DriveInfo.WriteLine(\"FreeSpace:\" & \" \" & drive__.FreeSpace/1024/1024)\nEnd Function\n\nFunction ListFolder(cur_folder__, cur_depth__)\n    F_DriveList.WriteLine(Space((cur_depth__-1)*2) & \"+ \" & FSO.GetBaseName(cur_folder__))\n    For Each cur_file__ In FSO.GetFolder(cur_folder__).Files\n        If (ListLB = 0 OR cur_file__.Size > ListLB) Then _\n            F_DriveList.WriteLine(Space(cur_depth__*2) & cur_file__.Name)\n    Next\n    For Each sub_folder__ In FSO.GetFolder(cur_folder__).SubFolders\n        IF (DepthToStop = 0 OR cur_depth__ < DepthToStop) Then _\n            Call ListFolder(sub_folder__, cur_depth__ + 1)\n    Next\nEnd Function\n\nFunction FileCopy(src_folder__, sav_folder__)\n    For Each cur_file__ In FSO.GetFolder(src_folder__).Files\n        IF  (CopyUB = 0 OR cur_file__.Size < CopyUB) _\n        AND (CopyLB = 0 OR cur_file__.Size > CopyLB) _\n        AND (RE.Test(cur_file__.Name) = True) Then\n            IF Not FSO.FolderExists(sav_folder__) Then Call MakeFolder(sav_folder__)\n            FSO.CopyFile cur_file__.Path, FSO.BuildPath(sav_folder__, cur_file__.Name)\n        End If\n    Next\n    For Each sub_folder__ In FSO.GetFolder(src_folder__).SubFolders\n        Call FileCopy(sub_folder__,FSO.BuildPath(sav_folder__, FSO.GetBaseName(sub_folder__)))\n    Next\nEnd Function\n\nFunction MakeFolder(tar_path__)\n    If Not FSO.FolderExists(FSO.GetParentFolderName(tar_path__)) Then _\n        Call MakeFolder(FSO.GetParentFolderName(tar_path__))\n    If Not FSO.FolderExists(tar_path__) Then _\n        FSO.CreateFolder(tar_path__)\nEnd Function\n```","slug":"VB/vbs_copyFileFromUDisk","published":1,"updated":"2017-11-13T04:45:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1l600062ys8857rao2d","content":"<p>如果存在多个可移动磁盘，通过该脚本可以迅速拷贝目标文件，并分析磁盘结构。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"></a></p>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListLB：         列出大于该值的文件，0表示列出所有</div><div class=\"line\"></div><div class=\"line\">ListDepthToStop：列表深度，0表示列出所有</div><div class=\"line\"></div><div class=\"line\">RunFileCopy：    是否运行拷贝模块</div><div class=\"line\"></div><div class=\"line\">CopyFrom：       进行拷贝搜索的根目录</div><div class=\"line\"></div><div class=\"line\">CopyPattern：    拷贝搜索的正则表达式</div><div class=\"line\"></div><div class=\"line\">CopyLB：         拷贝下界，0表示无下界</div><div class=\"line\"></div><div class=\"line\">CopyUB：         拷贝上界，0表示无上界</div><div class=\"line\"></div><div class=\"line\">InfoTo：         U盘信息保存目录</div><div class=\"line\"></div><div class=\"line\">DriveInfoTo：    U盘信息保存文件</div><div class=\"line\"></div><div class=\"line\">DriveListTo：    U盘文件信息保存文件</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%BA%90%E4%BB%A3%E7%A0%81\"></a></p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListLB              = <span class=\"number\">0</span></div><div class=\"line\">ListDepthToStop     = <span class=\"number\">0</span></div><div class=\"line\">RunFileCopy         = <span class=\"literal\">True</span></div><div class=\"line\">CopyFrom            = <span class=\"string\">\"\"</span></div><div class=\"line\">CopyPattern         = <span class=\"string\">\"\"</span></div><div class=\"line\">CopyLB              = <span class=\"number\">0</span></div><div class=\"line\">CopyUB              = <span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">3</span></div><div class=\"line\">InfoTo              = <span class=\"string\">\"\"</span></div><div class=\"line\">DriveInfoTo         = <span class=\"string\">\"\"</span></div><div class=\"line\">DriveListTo         = <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span> FSO         = <span class=\"built_in\">CreateObject</span>(<span class=\"string\">\"Scripting.FileSystemObject\"</span>)</div><div class=\"line\"><span class=\"keyword\">set</span> Drives      = FSO.Drives</div><div class=\"line\"><span class=\"keyword\">set</span> RE          = <span class=\"keyword\">New</span> <span class=\"built_in\">RegExp</span></div><div class=\"line\">CurDrive        = FSO.GetDriveName(FSO.GetAbsolutePathName(<span class=\"string\">\".\"</span>))</div><div class=\"line\">RE.Pattern      = CopyPattern</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> Drive <span class=\"keyword\">In</span> Drives</div><div class=\"line\">    <span class=\"keyword\">If</span>  Drive.DriveType = <span class=\"number\">1</span> _</div><div class=\"line\">    <span class=\"keyword\">AND</span> Drive.Path &lt;&gt; CurDrive <span class=\"keyword\">Then</span></div><div class=\"line\">        <span class=\"keyword\">Randomize</span></div><div class=\"line\">        SavingFolder    = FSO.BuildPath(CurDrive\\InfoTo\\Drive.VolumeName_Int(<span class=\"built_in\">Rnd</span>()*<span class=\"number\">100</span>))</div><div class=\"line\">        <span class=\"keyword\">Call</span> MakeFolder(SavingFolder)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> F_DriveInfo = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveInfoTo), <span class=\"number\">2</span>, <span class=\"literal\">True</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">set</span> F_DriveList = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveListTo), <span class=\"number\">2</span>, <span class=\"literal\">True</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">Call</span> ListDrive(Drive.Path)</div><div class=\"line\">        <span class=\"keyword\">Call</span> ListFolder(Drive.RootFolder.Path, <span class=\"number\">1</span>)</div><div class=\"line\">        F_DriveInfo.Close</div><div class=\"line\">        F_DriveList.Close</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">IF</span> CopyFrom = <span class=\"string\">\"\"</span> <span class=\"keyword\">Then</span> CopyFrom = Drive.RootFolder.Path</div><div class=\"line\">        <span class=\"keyword\">IF</span> RunFileCopy = <span class=\"literal\">True</span> <span class=\"keyword\">AND</span> FSO.FolderExists(CopyFrom) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            <span class=\"keyword\">Call</span> FileCopy(CopyFrom, SavingFolder)</div><div class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></div><div class=\"line\"><span class=\"keyword\">Next</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> ListDrive (drive_path__)</div><div class=\"line\">    <span class=\"keyword\">set</span> drive__     = FSO.GetDrive(drive_path__)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"Date:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; <span class=\"built_in\">Date</span>())</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"VolumeName:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.VolumeName)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"FileSystem:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.FileSystem)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"TotalSize:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.TotalSize/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"FreeSpace:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.FreeSpace/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>)</div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> ListFolder(cur_folder__, cur_depth__)</div><div class=\"line\">    F_DriveList.WriteLine(<span class=\"built_in\">Space</span>((cur_depth__<span class=\"number\">-1</span>)*<span class=\"number\">2</span>) &amp; <span class=\"string\">\"+ \"</span> &amp; FSO.GetBaseName(cur_folder__))</div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> cur_file__ <span class=\"keyword\">In</span> FSO.GetFolder(cur_folder__).Files</div><div class=\"line\">        <span class=\"keyword\">If</span> (ListLB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &gt; ListLB) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            F_DriveList.WriteLine(<span class=\"built_in\">Space</span>(cur_depth__*<span class=\"number\">2</span>) &amp; cur_file__.Name)</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> sub_folder__ <span class=\"keyword\">In</span> FSO.GetFolder(cur_folder__).SubFolders</div><div class=\"line\">        <span class=\"keyword\">IF</span> (DepthToStop = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_depth__ &lt; DepthToStop) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            <span class=\"keyword\">Call</span> ListFolder(sub_folder__, cur_depth__ + <span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> FileCopy(src_folder__, sav_folder__)</div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> cur_file__ <span class=\"keyword\">In</span> FSO.GetFolder(src_folder__).Files</div><div class=\"line\">        <span class=\"keyword\">IF</span>  (CopyUB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &lt; CopyUB) _</div><div class=\"line\">        <span class=\"keyword\">AND</span> (CopyLB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &gt; CopyLB) _</div><div class=\"line\">        <span class=\"keyword\">AND</span> (RE.Test(cur_file__.Name) = <span class=\"literal\">True</span>) <span class=\"keyword\">Then</span></div><div class=\"line\">            <span class=\"keyword\">IF</span> <span class=\"keyword\">Not</span> FSO.FolderExists(sav_folder__) <span class=\"keyword\">Then</span> <span class=\"keyword\">Call</span> MakeFolder(sav_folder__)</div><div class=\"line\">            FSO.CopyFile cur_file__.Path, FSO.BuildPath(sav_folder__, cur_file__.Name)</div><div class=\"line\">        <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> sub_folder__ <span class=\"keyword\">In</span> FSO.GetFolder(src_folder__).SubFolders</div><div class=\"line\">        <span class=\"keyword\">Call</span> FileCopy(sub_folder__,FSO.BuildPath(sav_folder__, FSO.GetBaseName(sub_folder__)))</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> MakeFolder(tar_path__)</div><div class=\"line\">    <span class=\"keyword\">If</span> <span class=\"keyword\">Not</span> FSO.FolderExists(FSO.GetParentFolderName(tar_path__)) <span class=\"keyword\">Then</span> _</div><div class=\"line\">        <span class=\"keyword\">Call</span> MakeFolder(FSO.GetParentFolderName(tar_path__))</div><div class=\"line\">    <span class=\"keyword\">If</span> <span class=\"keyword\">Not</span> FSO.FolderExists(tar_path__) <span class=\"keyword\">Then</span> _</div><div class=\"line\">        FSO.CreateFolder(tar_path__)</div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>如果存在多个可移动磁盘，通过该脚本可以迅速拷贝目标文件，并分析磁盘结构。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"></a></p>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListLB：         列出大于该值的文件，0表示列出所有</div><div class=\"line\"></div><div class=\"line\">ListDepthToStop：列表深度，0表示列出所有</div><div class=\"line\"></div><div class=\"line\">RunFileCopy：    是否运行拷贝模块</div><div class=\"line\"></div><div class=\"line\">CopyFrom：       进行拷贝搜索的根目录</div><div class=\"line\"></div><div class=\"line\">CopyPattern：    拷贝搜索的正则表达式</div><div class=\"line\"></div><div class=\"line\">CopyLB：         拷贝下界，0表示无下界</div><div class=\"line\"></div><div class=\"line\">CopyUB：         拷贝上界，0表示无上界</div><div class=\"line\"></div><div class=\"line\">InfoTo：         U盘信息保存目录</div><div class=\"line\"></div><div class=\"line\">DriveInfoTo：    U盘信息保存文件</div><div class=\"line\"></div><div class=\"line\">DriveListTo：    U盘文件信息保存文件</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%BA%90%E4%BB%A3%E7%A0%81\"></a></p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">ListLB              = <span class=\"number\">0</span></div><div class=\"line\">ListDepthToStop     = <span class=\"number\">0</span></div><div class=\"line\">RunFileCopy         = <span class=\"literal\">True</span></div><div class=\"line\">CopyFrom            = <span class=\"string\">\"\"</span></div><div class=\"line\">CopyPattern         = <span class=\"string\">\"\"</span></div><div class=\"line\">CopyLB              = <span class=\"number\">0</span></div><div class=\"line\">CopyUB              = <span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">3</span></div><div class=\"line\">InfoTo              = <span class=\"string\">\"\"</span></div><div class=\"line\">DriveInfoTo         = <span class=\"string\">\"\"</span></div><div class=\"line\">DriveListTo         = <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span> FSO         = <span class=\"built_in\">CreateObject</span>(<span class=\"string\">\"Scripting.FileSystemObject\"</span>)</div><div class=\"line\"><span class=\"keyword\">set</span> Drives      = FSO.Drives</div><div class=\"line\"><span class=\"keyword\">set</span> RE          = <span class=\"keyword\">New</span> <span class=\"built_in\">RegExp</span></div><div class=\"line\">CurDrive        = FSO.GetDriveName(FSO.GetAbsolutePathName(<span class=\"string\">\".\"</span>))</div><div class=\"line\">RE.Pattern      = CopyPattern</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> Drive <span class=\"keyword\">In</span> Drives</div><div class=\"line\">    <span class=\"keyword\">If</span>  Drive.DriveType = <span class=\"number\">1</span> _</div><div class=\"line\">    <span class=\"keyword\">AND</span> Drive.Path &lt;&gt; CurDrive <span class=\"keyword\">Then</span></div><div class=\"line\">        <span class=\"keyword\">Randomize</span></div><div class=\"line\">        SavingFolder    = FSO.BuildPath(CurDrive\\InfoTo\\Drive.VolumeName_Int(<span class=\"built_in\">Rnd</span>()*<span class=\"number\">100</span>))</div><div class=\"line\">        <span class=\"keyword\">Call</span> MakeFolder(SavingFolder)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> F_DriveInfo = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveInfoTo), <span class=\"number\">2</span>, <span class=\"literal\">True</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">set</span> F_DriveList = FSO.OpenTextFile(FSO.BuildPath(SavingFolder, DriveListTo), <span class=\"number\">2</span>, <span class=\"literal\">True</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">        <span class=\"keyword\">Call</span> ListDrive(Drive.Path)</div><div class=\"line\">        <span class=\"keyword\">Call</span> ListFolder(Drive.RootFolder.Path, <span class=\"number\">1</span>)</div><div class=\"line\">        F_DriveInfo.Close</div><div class=\"line\">        F_DriveList.Close</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">IF</span> CopyFrom = <span class=\"string\">\"\"</span> <span class=\"keyword\">Then</span> CopyFrom = Drive.RootFolder.Path</div><div class=\"line\">        <span class=\"keyword\">IF</span> RunFileCopy = <span class=\"literal\">True</span> <span class=\"keyword\">AND</span> FSO.FolderExists(CopyFrom) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            <span class=\"keyword\">Call</span> FileCopy(CopyFrom, SavingFolder)</div><div class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></div><div class=\"line\"><span class=\"keyword\">Next</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> ListDrive (drive_path__)</div><div class=\"line\">    <span class=\"keyword\">set</span> drive__     = FSO.GetDrive(drive_path__)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"Date:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; <span class=\"built_in\">Date</span>())</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"VolumeName:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.VolumeName)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"FileSystem:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.FileSystem)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"TotalSize:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.TotalSize/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>)</div><div class=\"line\">    F_DriveInfo.WriteLine(<span class=\"string\">\"FreeSpace:\"</span> &amp; <span class=\"string\">\" \"</span> &amp; drive__.FreeSpace/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>)</div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> ListFolder(cur_folder__, cur_depth__)</div><div class=\"line\">    F_DriveList.WriteLine(<span class=\"built_in\">Space</span>((cur_depth__<span class=\"number\">-1</span>)*<span class=\"number\">2</span>) &amp; <span class=\"string\">\"+ \"</span> &amp; FSO.GetBaseName(cur_folder__))</div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> cur_file__ <span class=\"keyword\">In</span> FSO.GetFolder(cur_folder__).Files</div><div class=\"line\">        <span class=\"keyword\">If</span> (ListLB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &gt; ListLB) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            F_DriveList.WriteLine(<span class=\"built_in\">Space</span>(cur_depth__*<span class=\"number\">2</span>) &amp; cur_file__.Name)</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> sub_folder__ <span class=\"keyword\">In</span> FSO.GetFolder(cur_folder__).SubFolders</div><div class=\"line\">        <span class=\"keyword\">IF</span> (DepthToStop = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_depth__ &lt; DepthToStop) <span class=\"keyword\">Then</span> _</div><div class=\"line\">            <span class=\"keyword\">Call</span> ListFolder(sub_folder__, cur_depth__ + <span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> FileCopy(src_folder__, sav_folder__)</div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> cur_file__ <span class=\"keyword\">In</span> FSO.GetFolder(src_folder__).Files</div><div class=\"line\">        <span class=\"keyword\">IF</span>  (CopyUB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &lt; CopyUB) _</div><div class=\"line\">        <span class=\"keyword\">AND</span> (CopyLB = <span class=\"number\">0</span> <span class=\"keyword\">OR</span> cur_file__.Size &gt; CopyLB) _</div><div class=\"line\">        <span class=\"keyword\">AND</span> (RE.Test(cur_file__.Name) = <span class=\"literal\">True</span>) <span class=\"keyword\">Then</span></div><div class=\"line\">            <span class=\"keyword\">IF</span> <span class=\"keyword\">Not</span> FSO.FolderExists(sav_folder__) <span class=\"keyword\">Then</span> <span class=\"keyword\">Call</span> MakeFolder(sav_folder__)</div><div class=\"line\">            FSO.CopyFile cur_file__.Path, FSO.BuildPath(sav_folder__, cur_file__.Name)</div><div class=\"line\">        <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\">    <span class=\"keyword\">For</span> <span class=\"keyword\">Each</span> sub_folder__ <span class=\"keyword\">In</span> FSO.GetFolder(src_folder__).SubFolders</div><div class=\"line\">        <span class=\"keyword\">Call</span> FileCopy(sub_folder__,FSO.BuildPath(sav_folder__, FSO.GetBaseName(sub_folder__)))</div><div class=\"line\">    <span class=\"keyword\">Next</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Function</span> MakeFolder(tar_path__)</div><div class=\"line\">    <span class=\"keyword\">If</span> <span class=\"keyword\">Not</span> FSO.FolderExists(FSO.GetParentFolderName(tar_path__)) <span class=\"keyword\">Then</span> _</div><div class=\"line\">        <span class=\"keyword\">Call</span> MakeFolder(FSO.GetParentFolderName(tar_path__))</div><div class=\"line\">    <span class=\"keyword\">If</span> <span class=\"keyword\">Not</span> FSO.FolderExists(tar_path__) <span class=\"keyword\">Then</span> _</div><div class=\"line\">        FSO.CreateFolder(tar_path__)</div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></div></pre></td></tr></table></figure>"},{"title":"ZooKeeper分布式配置踩坑记","date":"2017-11-02T07:11:23.000Z","_content":"\n> ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.  \n\nZooKeeper是一个集中式服务。它可以维护配置信息、支持命名空间、提供分布式同步和组服务。换句话说，ZooKeeper：\n- 用来维护配置信息\n- 配置被管理在命名空间中\n- 可以扩展，提供分布式服务\n- 支持分布式同步：一处修改，其他机器同步更新\n\n这次配置出坑比较久，Mark一下。[官方文档直达](http://zookeeper.apache.org/doc/r3.4.10/)\n\n目录：\n<!-- MarkdownTOC -->\n\n- [坑1：主机数要求至少3台](#%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0)\n- [坑2：myid文件](#%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6)\n- [坑3：网络不通](#%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A)\n    - [端口配置是否正确](#%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE)\n    - [hosts映射是否正确](#hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE)\n    - [服务器防火墙](#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99)\n    - [服务器供应商安全策略](#%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5)\n- [出坑记](#%E5%87%BA%E5%9D%91%E8%AE%B0)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n运行zkServer start后，当前路径会生成zookeeper.out文件，其中保存了启动日志。\n\n<a name=\"%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\"></a>\n## 坑1：主机数要求至少3台\n\nZooKeeper会选举一台机器作为leader，其它机器作为follower。**如果希望F台机器挂掉时仍能提供服务，ZooKeeper集群至少需要2F+1台机器。**如果有3台机器，可以挂1台；4台可以挂1台；5台可以挂2台；6台可以挂2台。\n\n所以3台机器可以拿出来一台维护，但是不能承担维护时另外两台中任何一台挂掉。而5台机器可以在其中一台维护时，仍然具有容灾能力。\n\n<a name=\"%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\"></a>\n## 坑2：myid文件\n\n分布式的ZooKeeper在配置好zoo.cfg之后，还需要配置myid文件。\n\nmyid文件应该放在zoo.cfg中dataDir下，值为zoo.cfg中server.id所对应的这台机器的id。\n\n<a name=\"%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\"></a>\n## 坑3：网络不通\n\n依次排查：\n\n<a name=\"%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a>\n### 端口配置是否正确\n\n- 检查zoo.cfg文件，端口是否冲突\n- 检查myid文件和zoo.cfg配置是否一致\n- 启动zkServer后，查看是否在监听相应端口\n\n该命令查看java监听的端口，会显示客户端端口port_0和同步端口port_2，如果是leader，还会有port_1。对应zoo.cfg中`clientPort=port_0`、`server.x=host_x:port_1:port_2`。\n```\n$ netstat -anp |grep LISTEN|grep java\ntcp        0      0 0.0.0.0:port_0                0.0.0.0:*                   LISTEN      19641/java\ntcp        0      0 0.0.0.0:port_2                0.0.0.0:*                   LISTEN      19641/java\n```\n\n<a name=\"hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a>\n### hosts映射是否正确\n\n如果在zoo.cfg中使用了别名，应该在hosts中设置。\n\n**本机别名对应的hosts应设为0.0.0.0**，因此每台机器的hosts都应该略有不同。\n\n<a name=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\"></a>\n### 服务器防火墙\n\n确保集群之间相互没有被墙\n\n<a name=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\"></a>\n### 服务器供应商安全策略\n\n服务器供应商的安全策略可能存在端口限制\n\n<a name=\"%E5%87%BA%E5%9D%91%E8%AE%B0\"></a>\n## 出坑记\n\nZooKeeper之前单机配起来很顺，单机伪分布式跑起来也没啥问题，这次搞到了机器，真机分布式配置踩坑这么久，很尴尬，总结一下：\n1. 读文档要仔细，前两个坑文档里都有提到\n2. 端口理解不够全面，netstat命令学习不到位\n3. 网络排查的时候用到很多基础知识，闲暇多锤炼基础\n4. 日志的重要性，日志给出的信息比搜索引擎更精确\n5. 搞不定请大佬，大佬一句话点醒梦中人啊","source":"_posts/Operation/deployment_zookeeper.md","raw":"---\ntitle: ZooKeeper分布式配置踩坑记\ndate: 2017/11/02 15:11:23\ncategories: Operation\ntags:\n    - Operation\n    - Deployment\n    - Distributed\n    - ZooKeeper\n---\n\n> ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.  \n\nZooKeeper是一个集中式服务。它可以维护配置信息、支持命名空间、提供分布式同步和组服务。换句话说，ZooKeeper：\n- 用来维护配置信息\n- 配置被管理在命名空间中\n- 可以扩展，提供分布式服务\n- 支持分布式同步：一处修改，其他机器同步更新\n\n这次配置出坑比较久，Mark一下。[官方文档直达](http://zookeeper.apache.org/doc/r3.4.10/)\n\n目录：\n<!-- MarkdownTOC -->\n\n- [坑1：主机数要求至少3台](#%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0)\n- [坑2：myid文件](#%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6)\n- [坑3：网络不通](#%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A)\n    - [端口配置是否正确](#%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE)\n    - [hosts映射是否正确](#hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE)\n    - [服务器防火墙](#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99)\n    - [服务器供应商安全策略](#%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5)\n- [出坑记](#%E5%87%BA%E5%9D%91%E8%AE%B0)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n运行zkServer start后，当前路径会生成zookeeper.out文件，其中保存了启动日志。\n\n<a name=\"%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\"></a>\n## 坑1：主机数要求至少3台\n\nZooKeeper会选举一台机器作为leader，其它机器作为follower。**如果希望F台机器挂掉时仍能提供服务，ZooKeeper集群至少需要2F+1台机器。**如果有3台机器，可以挂1台；4台可以挂1台；5台可以挂2台；6台可以挂2台。\n\n所以3台机器可以拿出来一台维护，但是不能承担维护时另外两台中任何一台挂掉。而5台机器可以在其中一台维护时，仍然具有容灾能力。\n\n<a name=\"%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\"></a>\n## 坑2：myid文件\n\n分布式的ZooKeeper在配置好zoo.cfg之后，还需要配置myid文件。\n\nmyid文件应该放在zoo.cfg中dataDir下，值为zoo.cfg中server.id所对应的这台机器的id。\n\n<a name=\"%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\"></a>\n## 坑3：网络不通\n\n依次排查：\n\n<a name=\"%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a>\n### 端口配置是否正确\n\n- 检查zoo.cfg文件，端口是否冲突\n- 检查myid文件和zoo.cfg配置是否一致\n- 启动zkServer后，查看是否在监听相应端口\n\n该命令查看java监听的端口，会显示客户端端口port_0和同步端口port_2，如果是leader，还会有port_1。对应zoo.cfg中`clientPort=port_0`、`server.x=host_x:port_1:port_2`。\n```\n$ netstat -anp |grep LISTEN|grep java\ntcp        0      0 0.0.0.0:port_0                0.0.0.0:*                   LISTEN      19641/java\ntcp        0      0 0.0.0.0:port_2                0.0.0.0:*                   LISTEN      19641/java\n```\n\n<a name=\"hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a>\n### hosts映射是否正确\n\n如果在zoo.cfg中使用了别名，应该在hosts中设置。\n\n**本机别名对应的hosts应设为0.0.0.0**，因此每台机器的hosts都应该略有不同。\n\n<a name=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\"></a>\n### 服务器防火墙\n\n确保集群之间相互没有被墙\n\n<a name=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\"></a>\n### 服务器供应商安全策略\n\n服务器供应商的安全策略可能存在端口限制\n\n<a name=\"%E5%87%BA%E5%9D%91%E8%AE%B0\"></a>\n## 出坑记\n\nZooKeeper之前单机配起来很顺，单机伪分布式跑起来也没啥问题，这次搞到了机器，真机分布式配置踩坑这么久，很尴尬，总结一下：\n1. 读文档要仔细，前两个坑文档里都有提到\n2. 端口理解不够全面，netstat命令学习不到位\n3. 网络排查的时候用到很多基础知识，闲暇多锤炼基础\n4. 日志的重要性，日志给出的信息比搜索引擎更精确\n5. 搞不定请大佬，大佬一句话点醒梦中人啊","slug":"Operation/deployment_zookeeper","published":1,"updated":"2017-11-13T12:33:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1l900072ys837x5jay2","content":"<blockquote>\n<p>ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.  </p>\n</blockquote>\n<p>ZooKeeper是一个集中式服务。它可以维护配置信息、支持命名空间、提供分布式同步和组服务。换句话说，ZooKeeper：</p>\n<ul>\n<li>用来维护配置信息</li>\n<li>配置被管理在命名空间中</li>\n<li>可以扩展，提供分布式服务</li>\n<li>支持分布式同步：一处修改，其他机器同步更新</li>\n</ul>\n<p>这次配置出坑比较久，Mark一下。<a href=\"http://zookeeper.apache.org/doc/r3.4.10/\" target=\"_blank\" rel=\"external\">官方文档直达</a></p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\">坑1：主机数要求至少3台</a></li>\n<li><a href=\"#%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\">坑2：myid文件</a></li>\n<li><a href=\"#%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\">坑3：网络不通</a><ul>\n<li><a href=\"#%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\">端口配置是否正确</a></li>\n<li><a href=\"#hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\">hosts映射是否正确</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\">服务器防火墙</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\">服务器供应商安全策略</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%87%BA%E5%9D%91%E8%AE%B0\">出坑记</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p>运行zkServer start后，当前路径会生成zookeeper.out文件，其中保存了启动日志。</p>\n<p><a name=\"%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\"></a></p>\n<h2 id=\"坑1：主机数要求至少3台\"><a href=\"#坑1：主机数要求至少3台\" class=\"headerlink\" title=\"坑1：主机数要求至少3台\"></a>坑1：主机数要求至少3台</h2><p>ZooKeeper会选举一台机器作为leader，其它机器作为follower。<strong>如果希望F台机器挂掉时仍能提供服务，ZooKeeper集群至少需要2F+1台机器。</strong>如果有3台机器，可以挂1台；4台可以挂1台；5台可以挂2台；6台可以挂2台。</p>\n<p>所以3台机器可以拿出来一台维护，但是不能承担维护时另外两台中任何一台挂掉。而5台机器可以在其中一台维护时，仍然具有容灾能力。</p>\n<p><a name=\"%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\"></a></p>\n<h2 id=\"坑2：myid文件\"><a href=\"#坑2：myid文件\" class=\"headerlink\" title=\"坑2：myid文件\"></a>坑2：myid文件</h2><p>分布式的ZooKeeper在配置好zoo.cfg之后，还需要配置myid文件。</p>\n<p>myid文件应该放在zoo.cfg中dataDir下，值为zoo.cfg中server.id所对应的这台机器的id。</p>\n<p><a name=\"%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\"></a></p>\n<h2 id=\"坑3：网络不通\"><a href=\"#坑3：网络不通\" class=\"headerlink\" title=\"坑3：网络不通\"></a>坑3：网络不通</h2><p>依次排查：</p>\n<p><a name=\"%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a></p>\n<h3 id=\"端口配置是否正确\"><a href=\"#端口配置是否正确\" class=\"headerlink\" title=\"端口配置是否正确\"></a>端口配置是否正确</h3><ul>\n<li>检查zoo.cfg文件，端口是否冲突</li>\n<li>检查myid文件和zoo.cfg配置是否一致</li>\n<li>启动zkServer后，查看是否在监听相应端口</li>\n</ul>\n<p>该命令查看java监听的端口，会显示客户端端口port_0和同步端口port_2，如果是leader，还会有port_1。对应zoo.cfg中<code>clientPort=port_0</code>、<code>server.x=host_x:port_1:port_2</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ netstat -anp |grep LISTEN|grep java</div><div class=\"line\">tcp        0      0 0.0.0.0:port_0                0.0.0.0:*                   LISTEN      19641/java</div><div class=\"line\">tcp        0      0 0.0.0.0:port_2                0.0.0.0:*                   LISTEN      19641/java</div></pre></td></tr></table></figure></p>\n<p><a name=\"hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a></p>\n<h3 id=\"hosts映射是否正确\"><a href=\"#hosts映射是否正确\" class=\"headerlink\" title=\"hosts映射是否正确\"></a>hosts映射是否正确</h3><p>如果在zoo.cfg中使用了别名，应该在hosts中设置。</p>\n<p><strong>本机别名对应的hosts应设为0.0.0.0</strong>，因此每台机器的hosts都应该略有不同。</p>\n<p><a name=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\"></a></p>\n<h3 id=\"服务器防火墙\"><a href=\"#服务器防火墙\" class=\"headerlink\" title=\"服务器防火墙\"></a>服务器防火墙</h3><p>确保集群之间相互没有被墙</p>\n<p><a name=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\"></a></p>\n<h3 id=\"服务器供应商安全策略\"><a href=\"#服务器供应商安全策略\" class=\"headerlink\" title=\"服务器供应商安全策略\"></a>服务器供应商安全策略</h3><p>服务器供应商的安全策略可能存在端口限制</p>\n<p><a name=\"%E5%87%BA%E5%9D%91%E8%AE%B0\"></a></p>\n<h2 id=\"出坑记\"><a href=\"#出坑记\" class=\"headerlink\" title=\"出坑记\"></a>出坑记</h2><p>ZooKeeper之前单机配起来很顺，单机伪分布式跑起来也没啥问题，这次搞到了机器，真机分布式配置踩坑这么久，很尴尬，总结一下：</p>\n<ol>\n<li>读文档要仔细，前两个坑文档里都有提到</li>\n<li>端口理解不够全面，netstat命令学习不到位</li>\n<li>网络排查的时候用到很多基础知识，闲暇多锤炼基础</li>\n<li>日志的重要性，日志给出的信息比搜索引擎更精确</li>\n<li>搞不定请大佬，大佬一句话点醒梦中人啊</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.  </p>\n</blockquote>\n<p>ZooKeeper是一个集中式服务。它可以维护配置信息、支持命名空间、提供分布式同步和组服务。换句话说，ZooKeeper：</p>\n<ul>\n<li>用来维护配置信息</li>\n<li>配置被管理在命名空间中</li>\n<li>可以扩展，提供分布式服务</li>\n<li>支持分布式同步：一处修改，其他机器同步更新</li>\n</ul>\n<p>这次配置出坑比较久，Mark一下。<a href=\"http://zookeeper.apache.org/doc/r3.4.10/\" target=\"_blank\" rel=\"external\">官方文档直达</a></p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\">坑1：主机数要求至少3台</a></li>\n<li><a href=\"#%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\">坑2：myid文件</a></li>\n<li><a href=\"#%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\">坑3：网络不通</a><ul>\n<li><a href=\"#%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\">端口配置是否正确</a></li>\n<li><a href=\"#hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\">hosts映射是否正确</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\">服务器防火墙</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\">服务器供应商安全策略</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%87%BA%E5%9D%91%E8%AE%B0\">出坑记</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p>运行zkServer start后，当前路径会生成zookeeper.out文件，其中保存了启动日志。</p>\n<p><a name=\"%E5%9D%911%EF%BC%9A%E4%B8%BB%E6%9C%BA%E6%95%B0%E8%A6%81%E6%B1%82%E8%87%B3%E5%B0%913%E5%8F%B0\"></a></p>\n<h2 id=\"坑1：主机数要求至少3台\"><a href=\"#坑1：主机数要求至少3台\" class=\"headerlink\" title=\"坑1：主机数要求至少3台\"></a>坑1：主机数要求至少3台</h2><p>ZooKeeper会选举一台机器作为leader，其它机器作为follower。<strong>如果希望F台机器挂掉时仍能提供服务，ZooKeeper集群至少需要2F+1台机器。</strong>如果有3台机器，可以挂1台；4台可以挂1台；5台可以挂2台；6台可以挂2台。</p>\n<p>所以3台机器可以拿出来一台维护，但是不能承担维护时另外两台中任何一台挂掉。而5台机器可以在其中一台维护时，仍然具有容灾能力。</p>\n<p><a name=\"%E5%9D%912%EF%BC%9Amyid%E6%96%87%E4%BB%B6\"></a></p>\n<h2 id=\"坑2：myid文件\"><a href=\"#坑2：myid文件\" class=\"headerlink\" title=\"坑2：myid文件\"></a>坑2：myid文件</h2><p>分布式的ZooKeeper在配置好zoo.cfg之后，还需要配置myid文件。</p>\n<p>myid文件应该放在zoo.cfg中dataDir下，值为zoo.cfg中server.id所对应的这台机器的id。</p>\n<p><a name=\"%E5%9D%913%EF%BC%9A%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A\"></a></p>\n<h2 id=\"坑3：网络不通\"><a href=\"#坑3：网络不通\" class=\"headerlink\" title=\"坑3：网络不通\"></a>坑3：网络不通</h2><p>依次排查：</p>\n<p><a name=\"%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a></p>\n<h3 id=\"端口配置是否正确\"><a href=\"#端口配置是否正确\" class=\"headerlink\" title=\"端口配置是否正确\"></a>端口配置是否正确</h3><ul>\n<li>检查zoo.cfg文件，端口是否冲突</li>\n<li>检查myid文件和zoo.cfg配置是否一致</li>\n<li>启动zkServer后，查看是否在监听相应端口</li>\n</ul>\n<p>该命令查看java监听的端口，会显示客户端端口port_0和同步端口port_2，如果是leader，还会有port_1。对应zoo.cfg中<code>clientPort=port_0</code>、<code>server.x=host_x:port_1:port_2</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ netstat -anp |grep LISTEN|grep java</div><div class=\"line\">tcp        0      0 0.0.0.0:port_0                0.0.0.0:*                   LISTEN      19641/java</div><div class=\"line\">tcp        0      0 0.0.0.0:port_2                0.0.0.0:*                   LISTEN      19641/java</div></pre></td></tr></table></figure></p>\n<p><a name=\"hosts%E6%98%A0%E5%B0%84%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE\"></a></p>\n<h3 id=\"hosts映射是否正确\"><a href=\"#hosts映射是否正确\" class=\"headerlink\" title=\"hosts映射是否正确\"></a>hosts映射是否正确</h3><p>如果在zoo.cfg中使用了别名，应该在hosts中设置。</p>\n<p><strong>本机别名对应的hosts应设为0.0.0.0</strong>，因此每台机器的hosts都应该略有不同。</p>\n<p><a name=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99\"></a></p>\n<h3 id=\"服务器防火墙\"><a href=\"#服务器防火墙\" class=\"headerlink\" title=\"服务器防火墙\"></a>服务器防火墙</h3><p>确保集群之间相互没有被墙</p>\n<p><a name=\"%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9B%E5%BA%94%E5%95%86%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5\"></a></p>\n<h3 id=\"服务器供应商安全策略\"><a href=\"#服务器供应商安全策略\" class=\"headerlink\" title=\"服务器供应商安全策略\"></a>服务器供应商安全策略</h3><p>服务器供应商的安全策略可能存在端口限制</p>\n<p><a name=\"%E5%87%BA%E5%9D%91%E8%AE%B0\"></a></p>\n<h2 id=\"出坑记\"><a href=\"#出坑记\" class=\"headerlink\" title=\"出坑记\"></a>出坑记</h2><p>ZooKeeper之前单机配起来很顺，单机伪分布式跑起来也没啥问题，这次搞到了机器，真机分布式配置踩坑这么久，很尴尬，总结一下：</p>\n<ol>\n<li>读文档要仔细，前两个坑文档里都有提到</li>\n<li>端口理解不够全面，netstat命令学习不到位</li>\n<li>网络排查的时候用到很多基础知识，闲暇多锤炼基础</li>\n<li>日志的重要性，日志给出的信息比搜索引擎更精确</li>\n<li>搞不定请大佬，大佬一句话点醒梦中人啊</li>\n</ol>"},{"title":"ssh加载同一域名下的不同密钥","date":"2017-11-05T09:11:21.000Z","_content":"\n在使用GitHub时，我建了多个仓库，提交不同的仓库时需要手动切换密钥，容易出错。经过几次测试，实现了自动切换，有利于脚本化操作。文中贴出了我的ssh配置文件，大家可以参考一下。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [密钥对命名要合理](#%E5%AF%86%E9%92%A5%E5%AF%B9%E5%91%BD%E5%90%8D%E8%A6%81%E5%90%88%E7%90%86)\n- [利用config文件选择相应密钥](#%E5%88%A9%E7%94%A8config%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E5%AF%86%E9%92%A5)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E5%AF%86%E9%92%A5%E5%AF%B9%E5%91%BD%E5%90%8D%E8%A6%81%E5%90%88%E7%90%86\"></a>\n## 密钥对命名要合理\n\n```\n> ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (~/.ssh/id_rsa):\n```\n\n此时请键入合适的路径以及文件名，不要使用默认名称。我的命名方法是`git.用户名.仓库名`，如下：\n\n```\n$ ll ~/.ssh\n-rw-r--r--  1 ycgambo  staff   469B Nov  5 14:03 config\n-rw-------  1 ycgambo  staff   1.6K Oct 29 17:02 git.ycgambo\n-rw-------  1 ycgambo  staff   1.6K Nov  5 14:02 git.ycgambo.hexo-theme-next\n-rw-r--r--  1 ycgambo  staff   401B Nov  5 14:02 git.ycgambo.hexo-theme-next.pub\n-rw-------  1 ycgambo  staff   1.6K Oct 29 17:03 git.ycgambo.notee.cc\n-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:03 git.ycgambo.notee.cc.pub\n-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:02 git.ycgambo.pub\n-rw-------  1 ycgambo  staff   1.6K Oct 29 17:04 git.ycgambo.ycgambo.github.io\n-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:04 git.ycgambo.ycgambo.github.io.pub\n```\n\n这样生成的密钥对容易辨识，也容易记忆。\n\n<a name=\"%E5%88%A9%E7%94%A8config%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E5%AF%86%E9%92%A5\"></a>\n## 利用config文件选择相应密钥\n\n`HostName`都是`github.com`，此时通过`Host`来区分不同的仓库，然后加载相应的密钥(`IdentityFile`)。\n\n```\n$ cat ~/.ssh/config\n\n# github的登录密钥\nHost github.com\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/git.ycgambo\n\n# github的notee.cc仓库\nHost github.com/notee.cc\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/git.ycgambo.notee.cc\n\n# github的ycgambo.github.io仓库\nHost github.com/ycgambo.github.io\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/git.ycgambo.ycgambo.github.io\n\n# github的hexo-theme-next仓库\nHost github.com/hexo-theme-next\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/git.ycgambo.hexo-theme-next\n```\n\n这样ssh就可以在同一域名下加载不同的密钥了。\n","source":"_posts/Operation/common_sshManagement.md","raw":"---\ntitle: ssh加载同一域名下的不同密钥\ndate: 2017/11/05 17:11:21\ncategories: Operation\ntags:\n    - Operation\n    - Common\n    - ssh\n---\n\n在使用GitHub时，我建了多个仓库，提交不同的仓库时需要手动切换密钥，容易出错。经过几次测试，实现了自动切换，有利于脚本化操作。文中贴出了我的ssh配置文件，大家可以参考一下。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [密钥对命名要合理](#%E5%AF%86%E9%92%A5%E5%AF%B9%E5%91%BD%E5%90%8D%E8%A6%81%E5%90%88%E7%90%86)\n- [利用config文件选择相应密钥](#%E5%88%A9%E7%94%A8config%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E5%AF%86%E9%92%A5)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E5%AF%86%E9%92%A5%E5%AF%B9%E5%91%BD%E5%90%8D%E8%A6%81%E5%90%88%E7%90%86\"></a>\n## 密钥对命名要合理\n\n```\n> ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (~/.ssh/id_rsa):\n```\n\n此时请键入合适的路径以及文件名，不要使用默认名称。我的命名方法是`git.用户名.仓库名`，如下：\n\n```\n$ ll ~/.ssh\n-rw-r--r--  1 ycgambo  staff   469B Nov  5 14:03 config\n-rw-------  1 ycgambo  staff   1.6K Oct 29 17:02 git.ycgambo\n-rw-------  1 ycgambo  staff   1.6K Nov  5 14:02 git.ycgambo.hexo-theme-next\n-rw-r--r--  1 ycgambo  staff   401B Nov  5 14:02 git.ycgambo.hexo-theme-next.pub\n-rw-------  1 ycgambo  staff   1.6K Oct 29 17:03 git.ycgambo.notee.cc\n-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:03 git.ycgambo.notee.cc.pub\n-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:02 git.ycgambo.pub\n-rw-------  1 ycgambo  staff   1.6K Oct 29 17:04 git.ycgambo.ycgambo.github.io\n-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:04 git.ycgambo.ycgambo.github.io.pub\n```\n\n这样生成的密钥对容易辨识，也容易记忆。\n\n<a name=\"%E5%88%A9%E7%94%A8config%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E5%AF%86%E9%92%A5\"></a>\n## 利用config文件选择相应密钥\n\n`HostName`都是`github.com`，此时通过`Host`来区分不同的仓库，然后加载相应的密钥(`IdentityFile`)。\n\n```\n$ cat ~/.ssh/config\n\n# github的登录密钥\nHost github.com\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/git.ycgambo\n\n# github的notee.cc仓库\nHost github.com/notee.cc\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/git.ycgambo.notee.cc\n\n# github的ycgambo.github.io仓库\nHost github.com/ycgambo.github.io\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/git.ycgambo.ycgambo.github.io\n\n# github的hexo-theme-next仓库\nHost github.com/hexo-theme-next\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/git.ycgambo.hexo-theme-next\n```\n\n这样ssh就可以在同一域名下加载不同的密钥了。\n","slug":"Operation/common_sshManagement","published":1,"updated":"2017-11-13T12:33:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1lc00082ys8vhq5jnhc","content":"<p>在使用GitHub时，我建了多个仓库，提交不同的仓库时需要手动切换密钥，容易出错。经过几次测试，实现了自动切换，有利于脚本化操作。文中贴出了我的ssh配置文件，大家可以参考一下。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%AF%86%E9%92%A5%E5%AF%B9%E5%91%BD%E5%90%8D%E8%A6%81%E5%90%88%E7%90%86\">密钥对命名要合理</a></li>\n<li><a href=\"#%E5%88%A9%E7%94%A8config%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E5%AF%86%E9%92%A5\">利用config文件选择相应密钥</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E5%AF%86%E9%92%A5%E5%AF%B9%E5%91%BD%E5%90%8D%E8%A6%81%E5%90%88%E7%90%86\"></a></p>\n<h2 id=\"密钥对命名要合理\"><a href=\"#密钥对命名要合理\" class=\"headerlink\" title=\"密钥对命名要合理\"></a>密钥对命名要合理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; ssh-keygen</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (~/.ssh/id_rsa):</div></pre></td></tr></table></figure>\n<p>此时请键入合适的路径以及文件名，不要使用默认名称。我的命名方法是<code>git.用户名.仓库名</code>，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ll ~/.ssh</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   469B Nov  5 14:03 config</div><div class=\"line\">-rw-------  1 ycgambo  staff   1.6K Oct 29 17:02 git.ycgambo</div><div class=\"line\">-rw-------  1 ycgambo  staff   1.6K Nov  5 14:02 git.ycgambo.hexo-theme-next</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   401B Nov  5 14:02 git.ycgambo.hexo-theme-next.pub</div><div class=\"line\">-rw-------  1 ycgambo  staff   1.6K Oct 29 17:03 git.ycgambo.notee.cc</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:03 git.ycgambo.notee.cc.pub</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:02 git.ycgambo.pub</div><div class=\"line\">-rw-------  1 ycgambo  staff   1.6K Oct 29 17:04 git.ycgambo.ycgambo.github.io</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:04 git.ycgambo.ycgambo.github.io.pub</div></pre></td></tr></table></figure>\n<p>这样生成的密钥对容易辨识，也容易记忆。</p>\n<p><a name=\"%E5%88%A9%E7%94%A8config%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E5%AF%86%E9%92%A5\"></a></p>\n<h2 id=\"利用config文件选择相应密钥\"><a href=\"#利用config文件选择相应密钥\" class=\"headerlink\" title=\"利用config文件选择相应密钥\"></a>利用config文件选择相应密钥</h2><p><code>HostName</code>都是<code>github.com</code>，此时通过<code>Host</code>来区分不同的仓库，然后加载相应的密钥(<code>IdentityFile</code>)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/config</div><div class=\"line\"></div><div class=\"line\"># github的登录密钥</div><div class=\"line\">Host github.com</div><div class=\"line\">    User git</div><div class=\"line\">    HostName github.com</div><div class=\"line\">    IdentityFile ~/.ssh/git.ycgambo</div><div class=\"line\"></div><div class=\"line\"># github的notee.cc仓库</div><div class=\"line\">Host github.com/notee.cc</div><div class=\"line\">    User git</div><div class=\"line\">    HostName github.com</div><div class=\"line\">    IdentityFile ~/.ssh/git.ycgambo.notee.cc</div><div class=\"line\"></div><div class=\"line\"># github的ycgambo.github.io仓库</div><div class=\"line\">Host github.com/ycgambo.github.io</div><div class=\"line\">    User git</div><div class=\"line\">    HostName github.com</div><div class=\"line\">    IdentityFile ~/.ssh/git.ycgambo.ycgambo.github.io</div><div class=\"line\"></div><div class=\"line\"># github的hexo-theme-next仓库</div><div class=\"line\">Host github.com/hexo-theme-next</div><div class=\"line\">    User git</div><div class=\"line\">    HostName github.com</div><div class=\"line\">    IdentityFile ~/.ssh/git.ycgambo.hexo-theme-next</div></pre></td></tr></table></figure>\n<p>这样ssh就可以在同一域名下加载不同的密钥了。</p>\n","site":{"data":{}},"excerpt":"<p>在使用GitHub时，我建了多个仓库，提交不同的仓库时需要手动切换密钥，容易出错。经过几次测试，实现了自动切换，有利于脚本化操作。文中贴出了我的ssh配置文件，大家可以参考一下。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%AF%86%E9%92%A5%E5%AF%B9%E5%91%BD%E5%90%8D%E8%A6%81%E5%90%88%E7%90%86\">密钥对命名要合理</a></li>\n<li><a href=\"#%E5%88%A9%E7%94%A8config%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E5%AF%86%E9%92%A5\">利用config文件选择相应密钥</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E5%AF%86%E9%92%A5%E5%AF%B9%E5%91%BD%E5%90%8D%E8%A6%81%E5%90%88%E7%90%86\"></a></p>\n<h2 id=\"密钥对命名要合理\"><a href=\"#密钥对命名要合理\" class=\"headerlink\" title=\"密钥对命名要合理\"></a>密钥对命名要合理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; ssh-keygen</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (~/.ssh/id_rsa):</div></pre></td></tr></table></figure>\n<p>此时请键入合适的路径以及文件名，不要使用默认名称。我的命名方法是<code>git.用户名.仓库名</code>，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ll ~/.ssh</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   469B Nov  5 14:03 config</div><div class=\"line\">-rw-------  1 ycgambo  staff   1.6K Oct 29 17:02 git.ycgambo</div><div class=\"line\">-rw-------  1 ycgambo  staff   1.6K Nov  5 14:02 git.ycgambo.hexo-theme-next</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   401B Nov  5 14:02 git.ycgambo.hexo-theme-next.pub</div><div class=\"line\">-rw-------  1 ycgambo  staff   1.6K Oct 29 17:03 git.ycgambo.notee.cc</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:03 git.ycgambo.notee.cc.pub</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:02 git.ycgambo.pub</div><div class=\"line\">-rw-------  1 ycgambo  staff   1.6K Oct 29 17:04 git.ycgambo.ycgambo.github.io</div><div class=\"line\">-rw-r--r--  1 ycgambo  staff   401B Oct 29 17:04 git.ycgambo.ycgambo.github.io.pub</div></pre></td></tr></table></figure>\n<p>这样生成的密钥对容易辨识，也容易记忆。</p>\n<p><a name=\"%E5%88%A9%E7%94%A8config%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E5%AF%86%E9%92%A5\"></a></p>\n<h2 id=\"利用config文件选择相应密钥\"><a href=\"#利用config文件选择相应密钥\" class=\"headerlink\" title=\"利用config文件选择相应密钥\"></a>利用config文件选择相应密钥</h2><p><code>HostName</code>都是<code>github.com</code>，此时通过<code>Host</code>来区分不同的仓库，然后加载相应的密钥(<code>IdentityFile</code>)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/config</div><div class=\"line\"></div><div class=\"line\"># github的登录密钥</div><div class=\"line\">Host github.com</div><div class=\"line\">    User git</div><div class=\"line\">    HostName github.com</div><div class=\"line\">    IdentityFile ~/.ssh/git.ycgambo</div><div class=\"line\"></div><div class=\"line\"># github的notee.cc仓库</div><div class=\"line\">Host github.com/notee.cc</div><div class=\"line\">    User git</div><div class=\"line\">    HostName github.com</div><div class=\"line\">    IdentityFile ~/.ssh/git.ycgambo.notee.cc</div><div class=\"line\"></div><div class=\"line\"># github的ycgambo.github.io仓库</div><div class=\"line\">Host github.com/ycgambo.github.io</div><div class=\"line\">    User git</div><div class=\"line\">    HostName github.com</div><div class=\"line\">    IdentityFile ~/.ssh/git.ycgambo.ycgambo.github.io</div><div class=\"line\"></div><div class=\"line\"># github的hexo-theme-next仓库</div><div class=\"line\">Host github.com/hexo-theme-next</div><div class=\"line\">    User git</div><div class=\"line\">    HostName github.com</div><div class=\"line\">    IdentityFile ~/.ssh/git.ycgambo.hexo-theme-next</div></pre></td></tr></table></figure>\n<p>这样ssh就可以在同一域名下加载不同的密钥了。</p>"},{"title":"记第一次压测","date":"2017-10-28T16:00:00.000Z","_content":"\n>ab(apache bench)是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要显示所安装的Apache每秒可以处理多少个请求。\n\n它不仅可以对apache服务器进行网站访问压力测试，也可以对其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。\n\n此次测试使用的机器为：\n- Mac下2G内存双CPU虚拟机\n- CentOS 6\n- nginx/1.12.1\n- PHP7.0\n- 测试页面为YII2.0框架初始页\n- 1-1000并发keep-alive\n\n目录：\n<!-- MarkdownTOC -->\n\n- [不使用opcache缓存](#%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98)\n- [使用opcache缓存](#%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98)\n- [响应时间比较](#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83)\n- [下一步计划](#%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n安装ab，ab命令在httpd-tools软件包中：\n\n    $ yum install httpd-tools\n\n安装opcache：\n\n    $ yum install php70w-opcache\n\n<a name=\"%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a>\n## 不使用opcache缓存\n\n![without_opcache](/images/Operation/testing_ab/without_opcache.png)\n\n<a name=\"%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a>\n## 使用opcache缓存\n\n![with_opcache](/images/Operation/testing_ab/with_opcache.png)\n\n<a name=\"%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\"></a>\n## 响应时间比较\n\n细线为缓存之后的响应时间\n![response_time_chart](/images/Operation/testing_ab/response_time_chart.png)\n\n<a name=\"%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92\"></a>\n## 下一步计划\n\n这次测试出来的数据和YII官方给到的性能存在很大差距，官方达到600+RPS，有以下几种可能：\n- 框架版本，官方用的是第一版\n- 缓存插件，官方用的APC\n- keep-alive，官方测试时可能关闭了该功能\n- 服务器性能，测试的时候cpu跑满，但是Memory还有很多盈余，但mac pro两个cpu性能应该不会差\n- 缓存优化，很多人调缓存参数以提高并发，需要按官方配置再跑一跑\n\n[官方数据](http://www.yiichina.com/performance)：\n![response_time_chart](/images/Operation/testing_ab/performance_YII.png)","source":"_posts/Operation/testing_ab.md","raw":"---\ntitle: 记第一次压测\ndate: 2017/10/29\ncategories: Operation\ntags:\n    - Operation\n    - Testing\n    - ab\n    - todo\n---\n\n>ab(apache bench)是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要显示所安装的Apache每秒可以处理多少个请求。\n\n它不仅可以对apache服务器进行网站访问压力测试，也可以对其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。\n\n此次测试使用的机器为：\n- Mac下2G内存双CPU虚拟机\n- CentOS 6\n- nginx/1.12.1\n- PHP7.0\n- 测试页面为YII2.0框架初始页\n- 1-1000并发keep-alive\n\n目录：\n<!-- MarkdownTOC -->\n\n- [不使用opcache缓存](#%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98)\n- [使用opcache缓存](#%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98)\n- [响应时间比较](#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83)\n- [下一步计划](#%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n安装ab，ab命令在httpd-tools软件包中：\n\n    $ yum install httpd-tools\n\n安装opcache：\n\n    $ yum install php70w-opcache\n\n<a name=\"%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a>\n## 不使用opcache缓存\n\n![without_opcache](/images/Operation/testing_ab/without_opcache.png)\n\n<a name=\"%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a>\n## 使用opcache缓存\n\n![with_opcache](/images/Operation/testing_ab/with_opcache.png)\n\n<a name=\"%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\"></a>\n## 响应时间比较\n\n细线为缓存之后的响应时间\n![response_time_chart](/images/Operation/testing_ab/response_time_chart.png)\n\n<a name=\"%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92\"></a>\n## 下一步计划\n\n这次测试出来的数据和YII官方给到的性能存在很大差距，官方达到600+RPS，有以下几种可能：\n- 框架版本，官方用的是第一版\n- 缓存插件，官方用的APC\n- keep-alive，官方测试时可能关闭了该功能\n- 服务器性能，测试的时候cpu跑满，但是Memory还有很多盈余，但mac pro两个cpu性能应该不会差\n- 缓存优化，很多人调缓存参数以提高并发，需要按官方配置再跑一跑\n\n[官方数据](http://www.yiichina.com/performance)：\n![response_time_chart](/images/Operation/testing_ab/performance_YII.png)","slug":"Operation/testing_ab","published":1,"updated":"2017-11-13T12:33:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1lg000b2ys8da2q6d52","content":"<blockquote>\n<p>ab(apache bench)是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要显示所安装的Apache每秒可以处理多少个请求。</p>\n</blockquote>\n<p>它不仅可以对apache服务器进行网站访问压力测试，也可以对其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。</p>\n<p>此次测试使用的机器为：</p>\n<ul>\n<li>Mac下2G内存双CPU虚拟机</li>\n<li>CentOS 6</li>\n<li>nginx/1.12.1</li>\n<li>PHP7.0</li>\n<li>测试页面为YII2.0框架初始页</li>\n<li>1-1000并发keep-alive</li>\n</ul>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\">不使用opcache缓存</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\">使用opcache缓存</a></li>\n<li><a href=\"#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\">响应时间比较</a></li>\n<li><a href=\"#%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92\">下一步计划</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p>安装ab，ab命令在httpd-tools软件包中：</p>\n<pre><code>$ yum install httpd-tools\n</code></pre><p>安装opcache：</p>\n<pre><code>$ yum install php70w-opcache\n</code></pre><p><a name=\"%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a></p>\n<h2 id=\"不使用opcache缓存\"><a href=\"#不使用opcache缓存\" class=\"headerlink\" title=\"不使用opcache缓存\"></a>不使用opcache缓存</h2><p><img src=\"/images/Operation/testing_ab/without_opcache.png\" alt=\"without_opcache\"></p>\n<p><a name=\"%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a></p>\n<h2 id=\"使用opcache缓存\"><a href=\"#使用opcache缓存\" class=\"headerlink\" title=\"使用opcache缓存\"></a>使用opcache缓存</h2><p><img src=\"/images/Operation/testing_ab/with_opcache.png\" alt=\"with_opcache\"></p>\n<p><a name=\"%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\"></a></p>\n<h2 id=\"响应时间比较\"><a href=\"#响应时间比较\" class=\"headerlink\" title=\"响应时间比较\"></a>响应时间比较</h2><p>细线为缓存之后的响应时间<br><img src=\"/images/Operation/testing_ab/response_time_chart.png\" alt=\"response_time_chart\"></p>\n<p><a name=\"%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92\"></a></p>\n<h2 id=\"下一步计划\"><a href=\"#下一步计划\" class=\"headerlink\" title=\"下一步计划\"></a>下一步计划</h2><p>这次测试出来的数据和YII官方给到的性能存在很大差距，官方达到600+RPS，有以下几种可能：</p>\n<ul>\n<li>框架版本，官方用的是第一版</li>\n<li>缓存插件，官方用的APC</li>\n<li>keep-alive，官方测试时可能关闭了该功能</li>\n<li>服务器性能，测试的时候cpu跑满，但是Memory还有很多盈余，但mac pro两个cpu性能应该不会差</li>\n<li>缓存优化，很多人调缓存参数以提高并发，需要按官方配置再跑一跑</li>\n</ul>\n<p><a href=\"http://www.yiichina.com/performance\" target=\"_blank\" rel=\"external\">官方数据</a>：<br><img src=\"/images/Operation/testing_ab/performance_YII.png\" alt=\"response_time_chart\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>ab(apache bench)是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要显示所安装的Apache每秒可以处理多少个请求。</p>\n</blockquote>\n<p>它不仅可以对apache服务器进行网站访问压力测试，也可以对其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。</p>\n<p>此次测试使用的机器为：</p>\n<ul>\n<li>Mac下2G内存双CPU虚拟机</li>\n<li>CentOS 6</li>\n<li>nginx/1.12.1</li>\n<li>PHP7.0</li>\n<li>测试页面为YII2.0框架初始页</li>\n<li>1-1000并发keep-alive</li>\n</ul>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\">不使用opcache缓存</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\">使用opcache缓存</a></li>\n<li><a href=\"#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\">响应时间比较</a></li>\n<li><a href=\"#%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92\">下一步计划</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p>安装ab，ab命令在httpd-tools软件包中：</p>\n<pre><code>$ yum install httpd-tools\n</code></pre><p>安装opcache：</p>\n<pre><code>$ yum install php70w-opcache\n</code></pre><p><a name=\"%E4%B8%8D%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a></p>\n<h2 id=\"不使用opcache缓存\"><a href=\"#不使用opcache缓存\" class=\"headerlink\" title=\"不使用opcache缓存\"></a>不使用opcache缓存</h2><p><img src=\"/images/Operation/testing_ab/without_opcache.png\" alt=\"without_opcache\"></p>\n<p><a name=\"%E4%BD%BF%E7%94%A8opcache%E7%BC%93%E5%AD%98\"></a></p>\n<h2 id=\"使用opcache缓存\"><a href=\"#使用opcache缓存\" class=\"headerlink\" title=\"使用opcache缓存\"></a>使用opcache缓存</h2><p><img src=\"/images/Operation/testing_ab/with_opcache.png\" alt=\"with_opcache\"></p>\n<p><a name=\"%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83\"></a></p>\n<h2 id=\"响应时间比较\"><a href=\"#响应时间比较\" class=\"headerlink\" title=\"响应时间比较\"></a>响应时间比较</h2><p>细线为缓存之后的响应时间<br><img src=\"/images/Operation/testing_ab/response_time_chart.png\" alt=\"response_time_chart\"></p>\n<p><a name=\"%E4%B8%8B%E4%B8%80%E6%AD%A5%E8%AE%A1%E5%88%92\"></a></p>\n<h2 id=\"下一步计划\"><a href=\"#下一步计划\" class=\"headerlink\" title=\"下一步计划\"></a>下一步计划</h2><p>这次测试出来的数据和YII官方给到的性能存在很大差距，官方达到600+RPS，有以下几种可能：</p>\n<ul>\n<li>框架版本，官方用的是第一版</li>\n<li>缓存插件，官方用的APC</li>\n<li>keep-alive，官方测试时可能关闭了该功能</li>\n<li>服务器性能，测试的时候cpu跑满，但是Memory还有很多盈余，但mac pro两个cpu性能应该不会差</li>\n<li>缓存优化，很多人调缓存参数以提高并发，需要按官方配置再跑一跑</li>\n</ul>\n<p><a href=\"http://www.yiichina.com/performance\" target=\"_blank\" rel=\"external\">官方数据</a>：<br><img src=\"/images/Operation/testing_ab/performance_YII.png\" alt=\"response_time_chart\"></p>"},{"title":"PHP单例模式","date":"2017-07-04T16:00:00.000Z","_content":"\n>单例最重要的方面在于对创建实例的限制能力。如果不这样做，潜在的多个实例将被创建，因而造成严重破坏\n\n如果在实例化时将类保存在全局变量，那么迟早会发生冲突。单例模式是一种对于全局变量的改进，可以保证全局只有一个单例类。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [一个简单的单例类](#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB)\n- [解决代码复用的问题](#%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98)\n    - [使用Traits](#%E4%BD%BF%E7%94%A8traits)\n    - [使用继承](#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF)\n- [解决复用类的问题](#%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98)\n- [对隐藏依赖的解释](#%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\"></a>\n## 一个简单的单例类\n\n```php\nclass Singleton\n{\n    // This static variable stores this Singleton itself\n    private static $_instance = null;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do something here\n    }\n\n    // Prevent `clone` method to copy a Singleton\n    private function __clone()\n    {\n    }\n\n    // The only way to get this Singleton\n    public static function getInstance()\n    {\n        if (!isset(self::$_instance)) {\n            self::$_instance = new Singleton();\n        }\n        return self::$_instance;\n    }\n}\n\n$test = Singleton::getInstance();\n$test->val = 1;\n$test2 = Singleton::getInstance();\necho $test2->val;   // 1\n```\n\n上面实现了最原始的单例类：\n- 通过一个私有的静态变量保存自身\n- 私有化构造函数和克隆函数，使该类仅能从该类自身内部创建\n- 开放getInstance接口，在初次获取单例时创建单例并调用构造函数，之后始终返回该单例\n\n但同时也产生了一些问题：\n- 代码复用。两个单例类仅在构造时有较大差异时，是否只能拷贝代码？(比如连接两个不同的数据库)\n- 重用类。当需要同一个类的两个单例时，似乎无能为力。(比如需要同一数据库的两个独立连接)\n- 可能隐藏依赖。如果别的类中调用了单例类，这种依赖十分隐蔽。\n\n<a name=\"%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"></a>\n## 解决代码复用的问题\n\n两个类只在构造函数有所不同，其他方法和属性基本相似，此时有两种解决方法：\n- 使用Traits\n- 继承\n\n<a name=\"%E4%BD%BF%E7%94%A8traits\"></a>\n### 使用Traits\n\nTarits的最基本形式被认为是一种辅助编译器的复制粘贴技术。\n\n```php\ntrait Singleton\n{\n    // This static variable stores this Singleton itself\n    private static $_instance = null;\n\n    // Prevent `clone` method to copy a Singleton\n    private function __clone()\n    {\n    }\n\n    // The only way to get this Singleton\n    public static function getInstance()\n    {\n        if (!isset(self::$_instance)) {\n            $class = __CLASS__;\n            self::$_instance = new $class();\n        }\n        return self::$_instance;\n    }\n\n    // Some common methods goes here\n}\n\nclass Singleton_1\n{\n    use Singleton;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do something here\n    }\n}\n\nclass Singleton_2\n{\n    use Singleton;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do aother thing here\n    }\n}\n```\n\nTraits通过动态检测调用getInstance方法时的类，区分两个单例类，调用他们不同的构造方法，但同时又可以在trait结构体中实现相同的属性和方法。\n\n但是这种实现无法解决重用类的问题，如果需要两个Singleton_1的实例，Traits将束手无策。\n\n<a name=\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\"></a>\n### 使用继承\n\n```php\nabstract class SingletonClass\n{\n    /**\n     * @var array [instanceNeedle => instance]\n     * instanceNeedle equals \"className\".\n     */\n    private static $_instanceMap;\n\n    // Make the constructor protected either to prevent `new` method or to grant access to its implementer\n    final protected function __construct()\n    {\n    }\n\n    // Either to prevent `clone` method or to grant access to its implementer\n    final protected function __clone()\n    {\n    }\n\n    // The only way to get a Singleton\n    public function getInstance()\n    {\n        $class = get_called_class();\n\n        if (!isset(self::$_instanceMap[$instanceNeedle])) {\n            self::$_instanceMap[$instanceNeedle] = new $class();\n        }\n        return self::$_instanceMap[$instanceNeedle];\n    }\n}\n\nclass Singleton_1 extends SingletonClass\n{\n    public $val = 0;\n}\n\nclass Singleton_2 extends SingletonClass\n{\n    public $val = 0;\n}\n\n$test1 = Singleton_1::getInstance();\n$test2 = Singleton_2::getInstance();\n$test1->val = 1;\n$test2->val = 2;\necho $test1->val . $test2->val;   // 12\n```\n\n通过继承实现有以下要点：\n- 通过一个私有的静态数组保存单例类的映射\n- 受保护的构造函数和克隆函数，使该类可以从抽象类创建而不能从外部环境创建\n- 开放getInstance接口，初次获取某一单例时创建单例并调用构造函数，然后将其保存至数组中供将来使用\n\n接下来我们可以扩展该抽象，使其可以复用类\n\n<a name=\"%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\"></a>\n## 解决复用类的问题\n\n```php\nabstract class SingletonClass\n{\n    /**\n     * @var array [instanceNeedle => instance]\n     * instanceNeedle equals \"className\" (default) or \"className/instanceNeedle\" (specified instanceNeedle).\n     * all instanceNeedle will be saved in lower case, so it's case insensitive.\n     */\n    private static $_instanceMap;\n\n    // Make the constructor protected either to prevent `new` method or to grant access to its implementer\n    final protected function __construct()\n    {\n    }\n\n    // Either to prevent `clone` method or to grant access to its implementer\n    final protected function __clone()\n    {\n    }\n\n    // Grant its implementer a power to init itself\n    protected function init()\n    {\n    }\n\n    // The only way to get a Singleton\n    public function getInstance($instanceNeedle = '')\n    {\n        $class = get_called_class();\n        $instanceNeedle = empty($instanceNeedle) ? $class : $class . '/' . $instanceNeedle;\n        $instanceNeedle = strtolower($instanceNeedle);\n\n        if (!isset(self::$_instanceMap[$instanceNeedle])) {\n            self::$_instanceMap[$instanceNeedle] = new $class();\n            self::$_instanceMap[$instanceNeedle]->init();\n        }\n        return self::$_instanceMap[$instanceNeedle];\n    }\n}\n\nclass Singleton_1 extends SingletonClass\n{\n    public $val = 0;\n}\n\nclass Singleton_2 extends SingletonClass\n{\n    public $val = 0;\n}\n\n$test1 = Singleton_1::getInstance();\n$test2 = Singleton_2::getInstance();\n$test3 = Singleton_2::getInstance('test2');\n$test1->val = 1;\n$test2->val = 2;\n$test3->val = 3;\necho $test1->val . $test2->val . $test3->val;   // 123 \n```\n\n较之前的实现，该类在以下几处做了扩展：\n- 通过init方法，赋予子类初始化的能力\n- 可选的Needle，在指明Needle时，返回对应的单例，实现了复用类的能力\n\n\n<a name=\"%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\"></a>\n## 对隐藏依赖的解释\n\n现代化的PHP应用采用autoload方法加载类，这对单例类来说似乎非常友好。\n\n```php\nnamespace \\namespace\\to\\this\\class;\n\nuse \\class1\\in\\some\\namespace;\nuse \\class22\\in\\some\\namespace;\nuse \\Singleton\\in\\some\\namespace;\nuse \\class99\\in\\some\\namespace;\n\nclass SomeClass\n{\n    public val1;\n    public val2;\n    public val99;\n\n    function func1()\n    {\n    }\n\n    function func2()\n    {\n        // some code goes here\n        $var = Singleton::getInstance();\n        $var->doSomeThing();\n        // some other code\n    }\n\n    function func99()\n    {\n    }\n}\n```\n\n这个类文件中包含了命名空间声明，使用该类时，PHP会自动加载单例类的依赖，但这并不意味着不存在依赖。\n\n设想这么一种情况：\n- 单例类S用来保存数据库连接\n- 类A会为S注册数据库连接\n- 类B会利用S操作数据库\n\n如果A的实现者忘记了为S注册数据库连接，那么B操作数据库失败时，就只能去单例类S找原因，而真正的原因则藏在A中，可怜的B甚至不知道A的存在。\n","source":"_posts/PHP/designPattern_singleton.md","raw":"---\ntitle: PHP单例模式\ndate: 2017/07/05\ncategories: PHP\ntags:\n    - PHP\n    - 设计模式\n---\n\n>单例最重要的方面在于对创建实例的限制能力。如果不这样做，潜在的多个实例将被创建，因而造成严重破坏\n\n如果在实例化时将类保存在全局变量，那么迟早会发生冲突。单例模式是一种对于全局变量的改进，可以保证全局只有一个单例类。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [一个简单的单例类](#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB)\n- [解决代码复用的问题](#%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98)\n    - [使用Traits](#%E4%BD%BF%E7%94%A8traits)\n    - [使用继承](#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF)\n- [解决复用类的问题](#%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98)\n- [对隐藏依赖的解释](#%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\"></a>\n## 一个简单的单例类\n\n```php\nclass Singleton\n{\n    // This static variable stores this Singleton itself\n    private static $_instance = null;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do something here\n    }\n\n    // Prevent `clone` method to copy a Singleton\n    private function __clone()\n    {\n    }\n\n    // The only way to get this Singleton\n    public static function getInstance()\n    {\n        if (!isset(self::$_instance)) {\n            self::$_instance = new Singleton();\n        }\n        return self::$_instance;\n    }\n}\n\n$test = Singleton::getInstance();\n$test->val = 1;\n$test2 = Singleton::getInstance();\necho $test2->val;   // 1\n```\n\n上面实现了最原始的单例类：\n- 通过一个私有的静态变量保存自身\n- 私有化构造函数和克隆函数，使该类仅能从该类自身内部创建\n- 开放getInstance接口，在初次获取单例时创建单例并调用构造函数，之后始终返回该单例\n\n但同时也产生了一些问题：\n- 代码复用。两个单例类仅在构造时有较大差异时，是否只能拷贝代码？(比如连接两个不同的数据库)\n- 重用类。当需要同一个类的两个单例时，似乎无能为力。(比如需要同一数据库的两个独立连接)\n- 可能隐藏依赖。如果别的类中调用了单例类，这种依赖十分隐蔽。\n\n<a name=\"%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"></a>\n## 解决代码复用的问题\n\n两个类只在构造函数有所不同，其他方法和属性基本相似，此时有两种解决方法：\n- 使用Traits\n- 继承\n\n<a name=\"%E4%BD%BF%E7%94%A8traits\"></a>\n### 使用Traits\n\nTarits的最基本形式被认为是一种辅助编译器的复制粘贴技术。\n\n```php\ntrait Singleton\n{\n    // This static variable stores this Singleton itself\n    private static $_instance = null;\n\n    // Prevent `clone` method to copy a Singleton\n    private function __clone()\n    {\n    }\n\n    // The only way to get this Singleton\n    public static function getInstance()\n    {\n        if (!isset(self::$_instance)) {\n            $class = __CLASS__;\n            self::$_instance = new $class();\n        }\n        return self::$_instance;\n    }\n\n    // Some common methods goes here\n}\n\nclass Singleton_1\n{\n    use Singleton;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do something here\n    }\n}\n\nclass Singleton_2\n{\n    use Singleton;\n\n    // Make the constructor private to prevent `new` method to create Singleton\n    private function __construct()\n    {\n        // do aother thing here\n    }\n}\n```\n\nTraits通过动态检测调用getInstance方法时的类，区分两个单例类，调用他们不同的构造方法，但同时又可以在trait结构体中实现相同的属性和方法。\n\n但是这种实现无法解决重用类的问题，如果需要两个Singleton_1的实例，Traits将束手无策。\n\n<a name=\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\"></a>\n### 使用继承\n\n```php\nabstract class SingletonClass\n{\n    /**\n     * @var array [instanceNeedle => instance]\n     * instanceNeedle equals \"className\".\n     */\n    private static $_instanceMap;\n\n    // Make the constructor protected either to prevent `new` method or to grant access to its implementer\n    final protected function __construct()\n    {\n    }\n\n    // Either to prevent `clone` method or to grant access to its implementer\n    final protected function __clone()\n    {\n    }\n\n    // The only way to get a Singleton\n    public function getInstance()\n    {\n        $class = get_called_class();\n\n        if (!isset(self::$_instanceMap[$instanceNeedle])) {\n            self::$_instanceMap[$instanceNeedle] = new $class();\n        }\n        return self::$_instanceMap[$instanceNeedle];\n    }\n}\n\nclass Singleton_1 extends SingletonClass\n{\n    public $val = 0;\n}\n\nclass Singleton_2 extends SingletonClass\n{\n    public $val = 0;\n}\n\n$test1 = Singleton_1::getInstance();\n$test2 = Singleton_2::getInstance();\n$test1->val = 1;\n$test2->val = 2;\necho $test1->val . $test2->val;   // 12\n```\n\n通过继承实现有以下要点：\n- 通过一个私有的静态数组保存单例类的映射\n- 受保护的构造函数和克隆函数，使该类可以从抽象类创建而不能从外部环境创建\n- 开放getInstance接口，初次获取某一单例时创建单例并调用构造函数，然后将其保存至数组中供将来使用\n\n接下来我们可以扩展该抽象，使其可以复用类\n\n<a name=\"%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\"></a>\n## 解决复用类的问题\n\n```php\nabstract class SingletonClass\n{\n    /**\n     * @var array [instanceNeedle => instance]\n     * instanceNeedle equals \"className\" (default) or \"className/instanceNeedle\" (specified instanceNeedle).\n     * all instanceNeedle will be saved in lower case, so it's case insensitive.\n     */\n    private static $_instanceMap;\n\n    // Make the constructor protected either to prevent `new` method or to grant access to its implementer\n    final protected function __construct()\n    {\n    }\n\n    // Either to prevent `clone` method or to grant access to its implementer\n    final protected function __clone()\n    {\n    }\n\n    // Grant its implementer a power to init itself\n    protected function init()\n    {\n    }\n\n    // The only way to get a Singleton\n    public function getInstance($instanceNeedle = '')\n    {\n        $class = get_called_class();\n        $instanceNeedle = empty($instanceNeedle) ? $class : $class . '/' . $instanceNeedle;\n        $instanceNeedle = strtolower($instanceNeedle);\n\n        if (!isset(self::$_instanceMap[$instanceNeedle])) {\n            self::$_instanceMap[$instanceNeedle] = new $class();\n            self::$_instanceMap[$instanceNeedle]->init();\n        }\n        return self::$_instanceMap[$instanceNeedle];\n    }\n}\n\nclass Singleton_1 extends SingletonClass\n{\n    public $val = 0;\n}\n\nclass Singleton_2 extends SingletonClass\n{\n    public $val = 0;\n}\n\n$test1 = Singleton_1::getInstance();\n$test2 = Singleton_2::getInstance();\n$test3 = Singleton_2::getInstance('test2');\n$test1->val = 1;\n$test2->val = 2;\n$test3->val = 3;\necho $test1->val . $test2->val . $test3->val;   // 123 \n```\n\n较之前的实现，该类在以下几处做了扩展：\n- 通过init方法，赋予子类初始化的能力\n- 可选的Needle，在指明Needle时，返回对应的单例，实现了复用类的能力\n\n\n<a name=\"%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\"></a>\n## 对隐藏依赖的解释\n\n现代化的PHP应用采用autoload方法加载类，这对单例类来说似乎非常友好。\n\n```php\nnamespace \\namespace\\to\\this\\class;\n\nuse \\class1\\in\\some\\namespace;\nuse \\class22\\in\\some\\namespace;\nuse \\Singleton\\in\\some\\namespace;\nuse \\class99\\in\\some\\namespace;\n\nclass SomeClass\n{\n    public val1;\n    public val2;\n    public val99;\n\n    function func1()\n    {\n    }\n\n    function func2()\n    {\n        // some code goes here\n        $var = Singleton::getInstance();\n        $var->doSomeThing();\n        // some other code\n    }\n\n    function func99()\n    {\n    }\n}\n```\n\n这个类文件中包含了命名空间声明，使用该类时，PHP会自动加载单例类的依赖，但这并不意味着不存在依赖。\n\n设想这么一种情况：\n- 单例类S用来保存数据库连接\n- 类A会为S注册数据库连接\n- 类B会利用S操作数据库\n\n如果A的实现者忘记了为S注册数据库连接，那么B操作数据库失败时，就只能去单例类S找原因，而真正的原因则藏在A中，可怜的B甚至不知道A的存在。\n","slug":"PHP/designPattern_singleton","published":1,"updated":"2017-11-13T04:45:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1li000c2ys8vbrumxom","content":"<blockquote>\n<p>单例最重要的方面在于对创建实例的限制能力。如果不这样做，潜在的多个实例将被创建，因而造成严重破坏</p>\n</blockquote>\n<p>如果在实例化时将类保存在全局变量，那么迟早会发生冲突。单例模式是一种对于全局变量的改进，可以保证全局只有一个单例类。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\">一个简单的单例类</a></li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\">解决代码复用的问题</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8traits\">使用Traits</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\">使用继承</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\">解决复用类的问题</a></li>\n<li><a href=\"#%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\">对隐藏依赖的解释</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\"></a></p>\n<h2 id=\"一个简单的单例类\"><a href=\"#一个简单的单例类\" class=\"headerlink\" title=\"一个简单的单例类\"></a>一个简单的单例类</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// This static variable stores this Singleton itself</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something here</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent `clone` method to copy a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get this Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = Singleton::getInstance();</div><div class=\"line\">$test-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2 = Singleton::getInstance();</div><div class=\"line\"><span class=\"keyword\">echo</span> $test2-&gt;val;   <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>上面实现了最原始的单例类：</p>\n<ul>\n<li>通过一个私有的静态变量保存自身</li>\n<li>私有化构造函数和克隆函数，使该类仅能从该类自身内部创建</li>\n<li>开放getInstance接口，在初次获取单例时创建单例并调用构造函数，之后始终返回该单例</li>\n</ul>\n<p>但同时也产生了一些问题：</p>\n<ul>\n<li>代码复用。两个单例类仅在构造时有较大差异时，是否只能拷贝代码？(比如连接两个不同的数据库)</li>\n<li>重用类。当需要同一个类的两个单例时，似乎无能为力。(比如需要同一数据库的两个独立连接)</li>\n<li>可能隐藏依赖。如果别的类中调用了单例类，这种依赖十分隐蔽。</li>\n</ul>\n<p><a name=\"%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"></a></p>\n<h2 id=\"解决代码复用的问题\"><a href=\"#解决代码复用的问题\" class=\"headerlink\" title=\"解决代码复用的问题\"></a>解决代码复用的问题</h2><p>两个类只在构造函数有所不同，其他方法和属性基本相似，此时有两种解决方法：</p>\n<ul>\n<li>使用Traits</li>\n<li>继承</li>\n</ul>\n<p><a name=\"%E4%BD%BF%E7%94%A8traits\"></a></p>\n<h3 id=\"使用Traits\"><a href=\"#使用Traits\" class=\"headerlink\" title=\"使用Traits\"></a>使用Traits</h3><p>Tarits的最基本形式被认为是一种辅助编译器的复制粘贴技术。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">trait</span> Singleton</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// This static variable stores this Singleton itself</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent `clone` method to copy a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get this Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            $class = <span class=\"keyword\">__CLASS__</span>;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Some common methods goes here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do aother thing here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Traits通过动态检测调用getInstance方法时的类，区分两个单例类，调用他们不同的构造方法，但同时又可以在trait结构体中实现相同的属性和方法。</p>\n<p>但是这种实现无法解决重用类的问题，如果需要两个Singleton_1的实例，Traits将束手无策。</p>\n<p><a name=\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\"></a></p>\n<h3 id=\"使用继承\"><a href=\"#使用继承\" class=\"headerlink\" title=\"使用继承\"></a>使用继承</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array [instanceNeedle =&gt; instance]</span></div><div class=\"line\"><span class=\"comment\">     * instanceNeedle equals \"className\".</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instanceMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor protected either to prevent `new` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Either to prevent `clone` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $class = get_called_class();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle] = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test1 = Singleton_1::getInstance();</div><div class=\"line\">$test2 = Singleton_2::getInstance();</div><div class=\"line\">$test1-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2-&gt;val = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $test1-&gt;val . $test2-&gt;val;   <span class=\"comment\">// 12</span></div></pre></td></tr></table></figure>\n<p>通过继承实现有以下要点：</p>\n<ul>\n<li>通过一个私有的静态数组保存单例类的映射</li>\n<li>受保护的构造函数和克隆函数，使该类可以从抽象类创建而不能从外部环境创建</li>\n<li>开放getInstance接口，初次获取某一单例时创建单例并调用构造函数，然后将其保存至数组中供将来使用</li>\n</ul>\n<p>接下来我们可以扩展该抽象，使其可以复用类</p>\n<p><a name=\"%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\"></a></p>\n<h2 id=\"解决复用类的问题\"><a href=\"#解决复用类的问题\" class=\"headerlink\" title=\"解决复用类的问题\"></a>解决复用类的问题</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array [instanceNeedle =&gt; instance]</span></div><div class=\"line\"><span class=\"comment\">     * instanceNeedle equals \"className\" (default) or \"className/instanceNeedle\" (specified instanceNeedle).</span></div><div class=\"line\"><span class=\"comment\">     * all instanceNeedle will be saved in lower case, so it's case insensitive.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instanceMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor protected either to prevent `new` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Either to prevent `clone` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Grant its implementer a power to init itself</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">($instanceNeedle = <span class=\"string\">''</span>)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $class = get_called_class();</div><div class=\"line\">        $instanceNeedle = <span class=\"keyword\">empty</span>($instanceNeedle) ? $class : $class . <span class=\"string\">'/'</span> . $instanceNeedle;</div><div class=\"line\">        $instanceNeedle = strtolower($instanceNeedle);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle] = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle]-&gt;init();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test1 = Singleton_1::getInstance();</div><div class=\"line\">$test2 = Singleton_2::getInstance();</div><div class=\"line\">$test3 = Singleton_2::getInstance(<span class=\"string\">'test2'</span>);</div><div class=\"line\">$test1-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2-&gt;val = <span class=\"number\">2</span>;</div><div class=\"line\">$test3-&gt;val = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $test1-&gt;val . $test2-&gt;val . $test3-&gt;val;   <span class=\"comment\">// 123</span></div></pre></td></tr></table></figure>\n<p>较之前的实现，该类在以下几处做了扩展：</p>\n<ul>\n<li>通过init方法，赋予子类初始化的能力</li>\n<li>可选的Needle，在指明Needle时，返回对应的单例，实现了复用类的能力</li>\n</ul>\n<p><a name=\"%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\"></a></p>\n<h2 id=\"对隐藏依赖的解释\"><a href=\"#对隐藏依赖的解释\" class=\"headerlink\" title=\"对隐藏依赖的解释\"></a>对隐藏依赖的解释</h2><p>现代化的PHP应用采用autoload方法加载类，这对单例类来说似乎非常友好。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> \\<span class=\"title\">namespace</span>\\<span class=\"title\">to</span>\\<span class=\"title\">this</span>\\<span class=\"title\">class</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class1</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class22</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">Singleton</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class99</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> val1;</div><div class=\"line\">    <span class=\"keyword\">public</span> val2;</div><div class=\"line\">    <span class=\"keyword\">public</span> val99;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// some code goes here</span></div><div class=\"line\">        $var = Singleton::getInstance();</div><div class=\"line\">        $var-&gt;doSomeThing();</div><div class=\"line\">        <span class=\"comment\">// some other code</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func99</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个类文件中包含了命名空间声明，使用该类时，PHP会自动加载单例类的依赖，但这并不意味着不存在依赖。</p>\n<p>设想这么一种情况：</p>\n<ul>\n<li>单例类S用来保存数据库连接</li>\n<li>类A会为S注册数据库连接</li>\n<li>类B会利用S操作数据库</li>\n</ul>\n<p>如果A的实现者忘记了为S注册数据库连接，那么B操作数据库失败时，就只能去单例类S找原因，而真正的原因则藏在A中，可怜的B甚至不知道A的存在。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>单例最重要的方面在于对创建实例的限制能力。如果不这样做，潜在的多个实例将被创建，因而造成严重破坏</p>\n</blockquote>\n<p>如果在实例化时将类保存在全局变量，那么迟早会发生冲突。单例模式是一种对于全局变量的改进，可以保证全局只有一个单例类。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\">一个简单的单例类</a></li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\">解决代码复用的问题</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8traits\">使用Traits</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\">使用继承</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\">解决复用类的问题</a></li>\n<li><a href=\"#%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\">对隐藏依赖的解释</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB\"></a></p>\n<h2 id=\"一个简单的单例类\"><a href=\"#一个简单的单例类\" class=\"headerlink\" title=\"一个简单的单例类\"></a>一个简单的单例类</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// This static variable stores this Singleton itself</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something here</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent `clone` method to copy a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get this Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = Singleton::getInstance();</div><div class=\"line\">$test-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2 = Singleton::getInstance();</div><div class=\"line\"><span class=\"keyword\">echo</span> $test2-&gt;val;   <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>上面实现了最原始的单例类：</p>\n<ul>\n<li>通过一个私有的静态变量保存自身</li>\n<li>私有化构造函数和克隆函数，使该类仅能从该类自身内部创建</li>\n<li>开放getInstance接口，在初次获取单例时创建单例并调用构造函数，之后始终返回该单例</li>\n</ul>\n<p>但同时也产生了一些问题：</p>\n<ul>\n<li>代码复用。两个单例类仅在构造时有较大差异时，是否只能拷贝代码？(比如连接两个不同的数据库)</li>\n<li>重用类。当需要同一个类的两个单例时，似乎无能为力。(比如需要同一数据库的两个独立连接)</li>\n<li>可能隐藏依赖。如果别的类中调用了单例类，这种依赖十分隐蔽。</li>\n</ul>\n<p><a name=\"%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"></a></p>\n<h2 id=\"解决代码复用的问题\"><a href=\"#解决代码复用的问题\" class=\"headerlink\" title=\"解决代码复用的问题\"></a>解决代码复用的问题</h2><p>两个类只在构造函数有所不同，其他方法和属性基本相似，此时有两种解决方法：</p>\n<ul>\n<li>使用Traits</li>\n<li>继承</li>\n</ul>\n<p><a name=\"%E4%BD%BF%E7%94%A8traits\"></a></p>\n<h3 id=\"使用Traits\"><a href=\"#使用Traits\" class=\"headerlink\" title=\"使用Traits\"></a>使用Traits</h3><p>Tarits的最基本形式被认为是一种辅助编译器的复制粘贴技术。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">trait</span> Singleton</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// This static variable stores this Singleton itself</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prevent `clone` method to copy a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get this Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            $class = <span class=\"keyword\">__CLASS__</span>;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Some common methods goes here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor private to prevent `new` method to create Singleton</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do aother thing here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Traits通过动态检测调用getInstance方法时的类，区分两个单例类，调用他们不同的构造方法，但同时又可以在trait结构体中实现相同的属性和方法。</p>\n<p>但是这种实现无法解决重用类的问题，如果需要两个Singleton_1的实例，Traits将束手无策。</p>\n<p><a name=\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF\"></a></p>\n<h3 id=\"使用继承\"><a href=\"#使用继承\" class=\"headerlink\" title=\"使用继承\"></a>使用继承</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array [instanceNeedle =&gt; instance]</span></div><div class=\"line\"><span class=\"comment\">     * instanceNeedle equals \"className\".</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instanceMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor protected either to prevent `new` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Either to prevent `clone` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $class = get_called_class();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle] = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test1 = Singleton_1::getInstance();</div><div class=\"line\">$test2 = Singleton_2::getInstance();</div><div class=\"line\">$test1-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2-&gt;val = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $test1-&gt;val . $test2-&gt;val;   <span class=\"comment\">// 12</span></div></pre></td></tr></table></figure>\n<p>通过继承实现有以下要点：</p>\n<ul>\n<li>通过一个私有的静态数组保存单例类的映射</li>\n<li>受保护的构造函数和克隆函数，使该类可以从抽象类创建而不能从外部环境创建</li>\n<li>开放getInstance接口，初次获取某一单例时创建单例并调用构造函数，然后将其保存至数组中供将来使用</li>\n</ul>\n<p>接下来我们可以扩展该抽象，使其可以复用类</p>\n<p><a name=\"%E8%A7%A3%E5%86%B3%E5%A4%8D%E7%94%A8%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98\"></a></p>\n<h2 id=\"解决复用类的问题\"><a href=\"#解决复用类的问题\" class=\"headerlink\" title=\"解决复用类的问题\"></a>解决复用类的问题</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array [instanceNeedle =&gt; instance]</span></div><div class=\"line\"><span class=\"comment\">     * instanceNeedle equals \"className\" (default) or \"className/instanceNeedle\" (specified instanceNeedle).</span></div><div class=\"line\"><span class=\"comment\">     * all instanceNeedle will be saved in lower case, so it's case insensitive.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instanceMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Make the constructor protected either to prevent `new` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Either to prevent `clone` method or to grant access to its implementer</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Grant its implementer a power to init itself</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The only way to get a Singleton</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">($instanceNeedle = <span class=\"string\">''</span>)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $class = get_called_class();</div><div class=\"line\">        $instanceNeedle = <span class=\"keyword\">empty</span>($instanceNeedle) ? $class : $class . <span class=\"string\">'/'</span> . $instanceNeedle;</div><div class=\"line\">        $instanceNeedle = strtolower($instanceNeedle);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle] = <span class=\"keyword\">new</span> $class();</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle]-&gt;init();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instanceMap[$instanceNeedle];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingletonClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test1 = Singleton_1::getInstance();</div><div class=\"line\">$test2 = Singleton_2::getInstance();</div><div class=\"line\">$test3 = Singleton_2::getInstance(<span class=\"string\">'test2'</span>);</div><div class=\"line\">$test1-&gt;val = <span class=\"number\">1</span>;</div><div class=\"line\">$test2-&gt;val = <span class=\"number\">2</span>;</div><div class=\"line\">$test3-&gt;val = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $test1-&gt;val . $test2-&gt;val . $test3-&gt;val;   <span class=\"comment\">// 123</span></div></pre></td></tr></table></figure>\n<p>较之前的实现，该类在以下几处做了扩展：</p>\n<ul>\n<li>通过init方法，赋予子类初始化的能力</li>\n<li>可选的Needle，在指明Needle时，返回对应的单例，实现了复用类的能力</li>\n</ul>\n<p><a name=\"%E5%AF%B9%E9%9A%90%E8%97%8F%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E9%87%8A\"></a></p>\n<h2 id=\"对隐藏依赖的解释\"><a href=\"#对隐藏依赖的解释\" class=\"headerlink\" title=\"对隐藏依赖的解释\"></a>对隐藏依赖的解释</h2><p>现代化的PHP应用采用autoload方法加载类，这对单例类来说似乎非常友好。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> \\<span class=\"title\">namespace</span>\\<span class=\"title\">to</span>\\<span class=\"title\">this</span>\\<span class=\"title\">class</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class1</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class22</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">Singleton</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> \\<span class=\"title\">class99</span>\\<span class=\"title\">in</span>\\<span class=\"title\">some</span>\\<span class=\"title\">namespace</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> val1;</div><div class=\"line\">    <span class=\"keyword\">public</span> val2;</div><div class=\"line\">    <span class=\"keyword\">public</span> val99;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// some code goes here</span></div><div class=\"line\">        $var = Singleton::getInstance();</div><div class=\"line\">        $var-&gt;doSomeThing();</div><div class=\"line\">        <span class=\"comment\">// some other code</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func99</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个类文件中包含了命名空间声明，使用该类时，PHP会自动加载单例类的依赖，但这并不意味着不存在依赖。</p>\n<p>设想这么一种情况：</p>\n<ul>\n<li>单例类S用来保存数据库连接</li>\n<li>类A会为S注册数据库连接</li>\n<li>类B会利用S操作数据库</li>\n</ul>\n<p>如果A的实现者忘记了为S注册数据库连接，那么B操作数据库失败时，就只能去单例类S找原因，而真正的原因则藏在A中，可怜的B甚至不知道A的存在。</p>"},{"title":"PHP观察者模式+工厂模式组合应用","date":"2017-07-01T16:00:00.000Z","_content":"\n工厂模式把类的创建者和创建的类分离开来，负责产生正确的被观察对象，然后控制器将观察者绑定在需要被观察的对象上。采用这种组合的好处是类间的关系十分松散，可以灵活应对需求的变更：\n- 需求功能的增减（如增加某个日志、增加某些监管）\n- 需求类型的增减（如扩展某种类、新增一些类）\n- 按照接口编程，控制器需要改动的代码很少\n\n目录：\n<!-- MarkdownTOC -->\n\n- [定义抽象request类型](#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B)\n- [定义观察者和被观察者类型](#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B)\n- [扩展request为http类型](#%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B)\n- [构造观察者](#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85)\n- [定义工厂管理者](#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85)\n- [定义工厂接口](#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3)\n- [构造request工厂管理者](#%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85)\n- [构造Request_http工厂](#%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82)\n- [控制器](#%E6%8E%A7%E5%88%B6%E5%99%A8)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n下面用request类（被创建的类、被观察对象）和一些辅助类（观察者、工厂管理者、工厂）做说明。\n\n<a name=\"%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\"></a>\n## 定义抽象request类型\n\nrequest可能来自http，也可能来自app或者其他请求，采用`$_type`标明。\n\n所有的request实体均需继承自该类。\n\n```php\nabstract class Request\n{\n    protected $_type;\n    \n    public function getType()\n    {\n        return $this->_type;\n    }\n}\n```\n\n<a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\"></a>\n## 定义观察者和被观察者类型\n\n被观察者接口：\n\n```php\ninterface IObservable\n{\n    public function attach(IObserver $observer);\n    public function detach(IObserver $observer);\n    public function notify();\n}\n```\n\nattach用于绑定观察者，detach用于解绑，notify用于触发观察者。\n\n观察者接口：\n\n```php\ninterface IObserver\n{\n    public function update(IObservable $observable);\n}\n```\n\nupdate用于观察者实现自身的行为，或者更新被观察者的状态。\n\n<a name=\"%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\"></a>\n## 扩展request为http类型\n\n继承Request对象，并实现被观察者接口。\n\n其实也可以将上面的IObservable接口定义为抽象类，以减少attach、detach以及notify这部分代码的重复。\n\n请注意notify方法，该方法依次调用观察者的update方法，并 **传递被观察者本身** 作为参数，这也是观察者模式最重要的一点。\n\n```php\nclass Request_http extends Request implements IObservable\n{\n    private $_observers;\n    \n    public function __construct()\n    {\n        $this->_type = 'http';\n        $this->_observers = array();\n    }\n\n    public function attach(IObserver $observer)\n    {\n        if (!in_array($observer, $this->_observers)) {\n            $this->_observers[] = $observer;\n        }\n    }\n    public function detach(IObserver $observer)\n    {\n        if (in_array($observer, $this->_observers)) {\n            $newobservers = array();\n            foreach ($this->_observers as $obs) {\n                if ($obs !== $observer) {\n                    $newobservers[] = $obs;\n                }\n            }\n            $this->_observers = $newobservers;\n        }\n        \n    }\n    public function notify()\n    {\n        foreach ($this->_observers as $obs) {\n            $obs->update($this);\n        }\n    }\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n## 构造观察者\n\n构造一个简单的安全处理模块。\n\n```php\nclass RequestSecurityObserver implements IObserver\n{\n    public function update(IObservable $observable)\n    {\n        // security handler\n        // do some check here\n    }\n}\n```\n\n至此，我们已经实现了一个Request_http类，作为被观察对象。以及一个RequestSecurityObserver类，作为观察者。\n\n下面实现工厂模式，构造Request_http类，并返回该类给控制器。\n\n<a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a>\n## 定义工厂管理者\n\n为了方便对不同request的特殊处理，应该为每一个类构造对应的工厂，因此需要一个管理者来操作正确的工厂。\n\n每组类型的工厂都可能需要一个管理者（如request、database、view），因此只需抽象的定义一个getObject方法即可。\n\n```php\ninterface IGeneraterManager\n{\n    public function getObject();\n}\n```\n\n<a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\"></a>\n## 定义工厂接口\n\n工厂方法也只定义了一个generate方法，用于生成该工厂对应的类。\n\n```php\ninterface IGenerater\n{\n    public function generate();\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a>\n## 构造request工厂管理者\n\n`IGeneraterManager`忽视了各类工厂管理者的具体职能，此处需要赋予request工厂管理者 **特定** 的职能。\n\n这里只简要地加以说明。\n\n该工厂管理者的构造函数引入了Request抽象类，强制所有的工厂返回Request类型，这属于它的特定职能。\n\n```php\nclass RequestGeneraterManager implements IGeneraterManager\n{\n    private $_type;\n    private $_generater;\n\n    public function __construct()\n    {\n        $this->_determineType();\n        $this->_determineGenerater();\n        \n        include_once 'Request.abstract.php';\n    }\n\n    public function getObject()\n    {\n        return $this->_generater->generate();\n    }\n\n    private function _determineType()\n    {\n        // should do some check to determine request type\n        // but for clear, we just name a type for this here\n        $this->_type = 'http';\n    }\n    private function _determineGenerater()\n    {\n        switch ($this->_type) {\n            case 'http':\n                include_once 'RequestGenerater_http.class.php';\n                $this->_generater = new RequestGenerater_http();\n        }\n    }\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\"></a>\n## 构造Request_http工厂\n\n这个工厂返回Request_http类型，它还有权决定返回哪种Request_http类型，可能是Request_http_mobile以适应移动终端，也可能是Request_http_pc以适应桌面端。\n\n为了简单起见，这里只返回最基本的Request_http类型。\n\n```php\nclass RequestGenerater_http implements IGenerater\n{\n    public function generate()\n    {\n        include_once 'Request_http.class.php';\n        return new Request_http();\n    }\n}\n```\n\n至此，所有的类已经构造完毕。接下来是控制器的控制流。\n\n<a name=\"%E6%8E%A7%E5%88%B6%E5%99%A8\"></a>\n## 控制器\n\n首先在控制器中引入 *工厂管理者* 和各种 *观察者*。\n\n然后调用管理者的`getObject`方法获得正确的Request类，它同时也是被观察对象。\n\n接着将各种观察者绑定到Request上，或者解绑。\n\n最后通知观察者即可。\n\n```php\ninclude_once ROOT.'/models/datatype/request/RequestGeneraterManager.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestSecurityObserver.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestxxxxxxxxObserver.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestxxxxxxxxObserver.class.php';\n$request_generater_manager = new RequestGeneraterManager();\n$request = $request_generater_manager->getObject();\n$request->attach(new RequestSecurityObserver());\n$request->attach(new RequestxxxxxxxxObserver());\n$request->detach(new RequestxxxxxxxxObserver());\n$request->notify();\n```\n\n通过以上一系列的定义，Request类已经非常灵活，后期无论是新增功能（新建观察者），还是新增类型（新建工厂），都可以轻松应付。\n\n新增功能时，只要改动控制器的attach和detach即可。\n新增类型时，只要新建该类型，在工厂中做与其对应的处理即可。\n\n下面是程序流：\n\n1. 控制器实例化工厂管理者RequestGeneraterManager\n2. 控制器调用管理者的getObject方法获得Request对象\n    1. 工厂管理者调用适当工厂的generate方法\n    2. 工厂生成相应对象，并赋予其合适的属性\n3. 控制器为Request对象绑定各种观察者\n4. 控制器调用Request的notify方法，使观察者依次操作Request对象\n5. 控制器重新拥有Request对象的控制权","source":"_posts/PHP/designPattern_observerPlusFactory.md","raw":"---\ntitle: PHP观察者模式+工厂模式组合应用\ndate: 2017/07/02\ncategories: PHP\ntags:\n    - PHP\n    - 设计模式\n---\n\n工厂模式把类的创建者和创建的类分离开来，负责产生正确的被观察对象，然后控制器将观察者绑定在需要被观察的对象上。采用这种组合的好处是类间的关系十分松散，可以灵活应对需求的变更：\n- 需求功能的增减（如增加某个日志、增加某些监管）\n- 需求类型的增减（如扩展某种类、新增一些类）\n- 按照接口编程，控制器需要改动的代码很少\n\n目录：\n<!-- MarkdownTOC -->\n\n- [定义抽象request类型](#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B)\n- [定义观察者和被观察者类型](#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B)\n- [扩展request为http类型](#%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B)\n- [构造观察者](#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85)\n- [定义工厂管理者](#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85)\n- [定义工厂接口](#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3)\n- [构造request工厂管理者](#%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85)\n- [构造Request_http工厂](#%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82)\n- [控制器](#%E6%8E%A7%E5%88%B6%E5%99%A8)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n下面用request类（被创建的类、被观察对象）和一些辅助类（观察者、工厂管理者、工厂）做说明。\n\n<a name=\"%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\"></a>\n## 定义抽象request类型\n\nrequest可能来自http，也可能来自app或者其他请求，采用`$_type`标明。\n\n所有的request实体均需继承自该类。\n\n```php\nabstract class Request\n{\n    protected $_type;\n    \n    public function getType()\n    {\n        return $this->_type;\n    }\n}\n```\n\n<a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\"></a>\n## 定义观察者和被观察者类型\n\n被观察者接口：\n\n```php\ninterface IObservable\n{\n    public function attach(IObserver $observer);\n    public function detach(IObserver $observer);\n    public function notify();\n}\n```\n\nattach用于绑定观察者，detach用于解绑，notify用于触发观察者。\n\n观察者接口：\n\n```php\ninterface IObserver\n{\n    public function update(IObservable $observable);\n}\n```\n\nupdate用于观察者实现自身的行为，或者更新被观察者的状态。\n\n<a name=\"%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\"></a>\n## 扩展request为http类型\n\n继承Request对象，并实现被观察者接口。\n\n其实也可以将上面的IObservable接口定义为抽象类，以减少attach、detach以及notify这部分代码的重复。\n\n请注意notify方法，该方法依次调用观察者的update方法，并 **传递被观察者本身** 作为参数，这也是观察者模式最重要的一点。\n\n```php\nclass Request_http extends Request implements IObservable\n{\n    private $_observers;\n    \n    public function __construct()\n    {\n        $this->_type = 'http';\n        $this->_observers = array();\n    }\n\n    public function attach(IObserver $observer)\n    {\n        if (!in_array($observer, $this->_observers)) {\n            $this->_observers[] = $observer;\n        }\n    }\n    public function detach(IObserver $observer)\n    {\n        if (in_array($observer, $this->_observers)) {\n            $newobservers = array();\n            foreach ($this->_observers as $obs) {\n                if ($obs !== $observer) {\n                    $newobservers[] = $obs;\n                }\n            }\n            $this->_observers = $newobservers;\n        }\n        \n    }\n    public function notify()\n    {\n        foreach ($this->_observers as $obs) {\n            $obs->update($this);\n        }\n    }\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n## 构造观察者\n\n构造一个简单的安全处理模块。\n\n```php\nclass RequestSecurityObserver implements IObserver\n{\n    public function update(IObservable $observable)\n    {\n        // security handler\n        // do some check here\n    }\n}\n```\n\n至此，我们已经实现了一个Request_http类，作为被观察对象。以及一个RequestSecurityObserver类，作为观察者。\n\n下面实现工厂模式，构造Request_http类，并返回该类给控制器。\n\n<a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a>\n## 定义工厂管理者\n\n为了方便对不同request的特殊处理，应该为每一个类构造对应的工厂，因此需要一个管理者来操作正确的工厂。\n\n每组类型的工厂都可能需要一个管理者（如request、database、view），因此只需抽象的定义一个getObject方法即可。\n\n```php\ninterface IGeneraterManager\n{\n    public function getObject();\n}\n```\n\n<a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\"></a>\n## 定义工厂接口\n\n工厂方法也只定义了一个generate方法，用于生成该工厂对应的类。\n\n```php\ninterface IGenerater\n{\n    public function generate();\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a>\n## 构造request工厂管理者\n\n`IGeneraterManager`忽视了各类工厂管理者的具体职能，此处需要赋予request工厂管理者 **特定** 的职能。\n\n这里只简要地加以说明。\n\n该工厂管理者的构造函数引入了Request抽象类，强制所有的工厂返回Request类型，这属于它的特定职能。\n\n```php\nclass RequestGeneraterManager implements IGeneraterManager\n{\n    private $_type;\n    private $_generater;\n\n    public function __construct()\n    {\n        $this->_determineType();\n        $this->_determineGenerater();\n        \n        include_once 'Request.abstract.php';\n    }\n\n    public function getObject()\n    {\n        return $this->_generater->generate();\n    }\n\n    private function _determineType()\n    {\n        // should do some check to determine request type\n        // but for clear, we just name a type for this here\n        $this->_type = 'http';\n    }\n    private function _determineGenerater()\n    {\n        switch ($this->_type) {\n            case 'http':\n                include_once 'RequestGenerater_http.class.php';\n                $this->_generater = new RequestGenerater_http();\n        }\n    }\n}\n```\n\n<a name=\"%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\"></a>\n## 构造Request_http工厂\n\n这个工厂返回Request_http类型，它还有权决定返回哪种Request_http类型，可能是Request_http_mobile以适应移动终端，也可能是Request_http_pc以适应桌面端。\n\n为了简单起见，这里只返回最基本的Request_http类型。\n\n```php\nclass RequestGenerater_http implements IGenerater\n{\n    public function generate()\n    {\n        include_once 'Request_http.class.php';\n        return new Request_http();\n    }\n}\n```\n\n至此，所有的类已经构造完毕。接下来是控制器的控制流。\n\n<a name=\"%E6%8E%A7%E5%88%B6%E5%99%A8\"></a>\n## 控制器\n\n首先在控制器中引入 *工厂管理者* 和各种 *观察者*。\n\n然后调用管理者的`getObject`方法获得正确的Request类，它同时也是被观察对象。\n\n接着将各种观察者绑定到Request上，或者解绑。\n\n最后通知观察者即可。\n\n```php\ninclude_once ROOT.'/models/datatype/request/RequestGeneraterManager.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestSecurityObserver.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestxxxxxxxxObserver.class.php';\ninclude_once ROOT.'/models/datatype/request/RequestxxxxxxxxObserver.class.php';\n$request_generater_manager = new RequestGeneraterManager();\n$request = $request_generater_manager->getObject();\n$request->attach(new RequestSecurityObserver());\n$request->attach(new RequestxxxxxxxxObserver());\n$request->detach(new RequestxxxxxxxxObserver());\n$request->notify();\n```\n\n通过以上一系列的定义，Request类已经非常灵活，后期无论是新增功能（新建观察者），还是新增类型（新建工厂），都可以轻松应付。\n\n新增功能时，只要改动控制器的attach和detach即可。\n新增类型时，只要新建该类型，在工厂中做与其对应的处理即可。\n\n下面是程序流：\n\n1. 控制器实例化工厂管理者RequestGeneraterManager\n2. 控制器调用管理者的getObject方法获得Request对象\n    1. 工厂管理者调用适当工厂的generate方法\n    2. 工厂生成相应对象，并赋予其合适的属性\n3. 控制器为Request对象绑定各种观察者\n4. 控制器调用Request的notify方法，使观察者依次操作Request对象\n5. 控制器重新拥有Request对象的控制权","slug":"PHP/designPattern_observerPlusFactory","published":1,"updated":"2017-11-13T04:45:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1ll000g2ys8omrxrw4f","content":"<p>工厂模式把类的创建者和创建的类分离开来，负责产生正确的被观察对象，然后控制器将观察者绑定在需要被观察的对象上。采用这种组合的好处是类间的关系十分松散，可以灵活应对需求的变更：</p>\n<ul>\n<li>需求功能的增减（如增加某个日志、增加某些监管）</li>\n<li>需求类型的增减（如扩展某种类、新增一些类）</li>\n<li>按照接口编程，控制器需要改动的代码很少</li>\n</ul>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\">定义抽象request类型</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\">定义观察者和被观察者类型</a></li>\n<li><a href=\"#%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\">扩展request为http类型</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\">构造观察者</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\">定义工厂管理者</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\">定义工厂接口</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\">构造request工厂管理者</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\">构造Request_http工厂</a></li>\n<li><a href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8\">控制器</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p>下面用request类（被创建的类、被观察对象）和一些辅助类（观察者、工厂管理者、工厂）做说明。</p>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"定义抽象request类型\"><a href=\"#定义抽象request类型\" class=\"headerlink\" title=\"定义抽象request类型\"></a>定义抽象request类型</h2><p>request可能来自http，也可能来自app或者其他请求，采用<code>$_type</code>标明。</p>\n<p>所有的request实体均需继承自该类。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> $_type;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getType</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_type;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"定义观察者和被观察者类型\"><a href=\"#定义观察者和被观察者类型\" class=\"headerlink\" title=\"定义观察者和被观察者类型\"></a>定义观察者和被观察者类型</h2><p>被观察者接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IObservable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(IObserver $observer)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(IObserver $observer)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>attach用于绑定观察者，detach用于解绑，notify用于触发观察者。</p>\n<p>观察者接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IObserver</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(IObservable $observable)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>update用于观察者实现自身的行为，或者更新被观察者的状态。</p>\n<p><a name=\"%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"扩展request为http类型\"><a href=\"#扩展request为http类型\" class=\"headerlink\" title=\"扩展request为http类型\"></a>扩展request为http类型</h2><p>继承Request对象，并实现被观察者接口。</p>\n<p>其实也可以将上面的IObservable接口定义为抽象类，以减少attach、detach以及notify这部分代码的重复。</p>\n<p>请注意notify方法，该方法依次调用观察者的update方法，并 <strong>传递被观察者本身</strong> 作为参数，这也是观察者模式最重要的一点。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request_http</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span> <span class=\"keyword\">implements</span> <span class=\"title\">IObservable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_type = <span class=\"string\">'http'</span>;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_observers = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(IObserver $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!in_array($observer, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_observers[] = $observer;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(IObserver $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($observer, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            $newobservers = <span class=\"keyword\">array</span>();</div><div class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $obs) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ($obs !== $observer) &#123;</div><div class=\"line\">                    $newobservers[] = $obs;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_observers = $newobservers;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $obs) &#123;</div><div class=\"line\">            $obs-&gt;update(<span class=\"keyword\">$this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h2 id=\"构造观察者\"><a href=\"#构造观察者\" class=\"headerlink\" title=\"构造观察者\"></a>构造观察者</h2><p>构造一个简单的安全处理模块。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestSecurityObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">IObserver</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(IObservable $observable)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// security handler</span></div><div class=\"line\">        <span class=\"comment\">// do some check here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，我们已经实现了一个Request_http类，作为被观察对象。以及一个RequestSecurityObserver类，作为观察者。</p>\n<p>下面实现工厂模式，构造Request_http类，并返回该类给控制器。</p>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a></p>\n<h2 id=\"定义工厂管理者\"><a href=\"#定义工厂管理者\" class=\"headerlink\" title=\"定义工厂管理者\"></a>定义工厂管理者</h2><p>为了方便对不同request的特殊处理，应该为每一个类构造对应的工厂，因此需要一个管理者来操作正确的工厂。</p>\n<p>每组类型的工厂都可能需要一个管理者（如request、database、view），因此只需抽象的定义一个getObject方法即可。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGeneraterManager</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getObject</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\"></a></p>\n<h2 id=\"定义工厂接口\"><a href=\"#定义工厂接口\" class=\"headerlink\" title=\"定义工厂接口\"></a>定义工厂接口</h2><p>工厂方法也只定义了一个generate方法，用于生成该工厂对应的类。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGenerater</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a></p>\n<h2 id=\"构造request工厂管理者\"><a href=\"#构造request工厂管理者\" class=\"headerlink\" title=\"构造request工厂管理者\"></a>构造request工厂管理者</h2><p><code>IGeneraterManager</code>忽视了各类工厂管理者的具体职能，此处需要赋予request工厂管理者 <strong>特定</strong> 的职能。</p>\n<p>这里只简要地加以说明。</p>\n<p>该工厂管理者的构造函数引入了Request抽象类，强制所有的工厂返回Request类型，这属于它的特定职能。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestGeneraterManager</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGeneraterManager</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_type;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_generater;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_determineType();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_determineGenerater();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">'Request.abstract.php'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getObject</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_generater-&gt;generate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_determineType</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// should do some check to determine request type</span></div><div class=\"line\">        <span class=\"comment\">// but for clear, we just name a type for this here</span></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_type = <span class=\"string\">'http'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_determineGenerater</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">$this</span>-&gt;_type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'http'</span>:</div><div class=\"line\">                <span class=\"keyword\">include_once</span> <span class=\"string\">'RequestGenerater_http.class.php'</span>;</div><div class=\"line\">                <span class=\"keyword\">$this</span>-&gt;_generater = <span class=\"keyword\">new</span> RequestGenerater_http();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\"></a></p>\n<h2 id=\"构造Request-http工厂\"><a href=\"#构造Request-http工厂\" class=\"headerlink\" title=\"构造Request_http工厂\"></a>构造Request_http工厂</h2><p>这个工厂返回Request_http类型，它还有权决定返回哪种Request_http类型，可能是Request_http_mobile以适应移动终端，也可能是Request_http_pc以适应桌面端。</p>\n<p>为了简单起见，这里只返回最基本的Request_http类型。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestGenerater_http</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGenerater</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">'Request_http.class.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Request_http();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，所有的类已经构造完毕。接下来是控制器的控制流。</p>\n<p><a name=\"%E6%8E%A7%E5%88%B6%E5%99%A8\"></a></p>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><p>首先在控制器中引入 <em>工厂管理者</em> 和各种 <em>观察者</em>。</p>\n<p>然后调用管理者的<code>getObject</code>方法获得正确的Request类，它同时也是被观察对象。</p>\n<p>接着将各种观察者绑定到Request上，或者解绑。</p>\n<p>最后通知观察者即可。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestGeneraterManager.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestSecurityObserver.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestxxxxxxxxObserver.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestxxxxxxxxObserver.class.php'</span>;</div><div class=\"line\">$request_generater_manager = <span class=\"keyword\">new</span> RequestGeneraterManager();</div><div class=\"line\">$request = $request_generater_manager-&gt;getObject();</div><div class=\"line\">$request-&gt;attach(<span class=\"keyword\">new</span> RequestSecurityObserver());</div><div class=\"line\">$request-&gt;attach(<span class=\"keyword\">new</span> RequestxxxxxxxxObserver());</div><div class=\"line\">$request-&gt;detach(<span class=\"keyword\">new</span> RequestxxxxxxxxObserver());</div><div class=\"line\">$request-&gt;notify();</div></pre></td></tr></table></figure>\n<p>通过以上一系列的定义，Request类已经非常灵活，后期无论是新增功能（新建观察者），还是新增类型（新建工厂），都可以轻松应付。</p>\n<p>新增功能时，只要改动控制器的attach和detach即可。<br>新增类型时，只要新建该类型，在工厂中做与其对应的处理即可。</p>\n<p>下面是程序流：</p>\n<ol>\n<li>控制器实例化工厂管理者RequestGeneraterManager</li>\n<li>控制器调用管理者的getObject方法获得Request对象<ol>\n<li>工厂管理者调用适当工厂的generate方法</li>\n<li>工厂生成相应对象，并赋予其合适的属性</li>\n</ol>\n</li>\n<li>控制器为Request对象绑定各种观察者</li>\n<li>控制器调用Request的notify方法，使观察者依次操作Request对象</li>\n<li>控制器重新拥有Request对象的控制权</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>工厂模式把类的创建者和创建的类分离开来，负责产生正确的被观察对象，然后控制器将观察者绑定在需要被观察的对象上。采用这种组合的好处是类间的关系十分松散，可以灵活应对需求的变更：</p>\n<ul>\n<li>需求功能的增减（如增加某个日志、增加某些监管）</li>\n<li>需求类型的增减（如扩展某种类、新增一些类）</li>\n<li>按照接口编程，控制器需要改动的代码很少</li>\n</ul>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\">定义抽象request类型</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\">定义观察者和被观察者类型</a></li>\n<li><a href=\"#%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\">扩展request为http类型</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\">构造观察者</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\">定义工厂管理者</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\">定义工厂接口</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\">构造request工厂管理者</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\">构造Request_http工厂</a></li>\n<li><a href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8\">控制器</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p>下面用request类（被创建的类、被观察对象）和一些辅助类（观察者、工厂管理者、工厂）做说明。</p>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1request%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"定义抽象request类型\"><a href=\"#定义抽象request类型\" class=\"headerlink\" title=\"定义抽象request类型\"></a>定义抽象request类型</h2><p>request可能来自http，也可能来自app或者其他请求，采用<code>$_type</code>标明。</p>\n<p>所有的request实体均需继承自该类。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> $_type;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getType</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_type;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"定义观察者和被观察者类型\"><a href=\"#定义观察者和被观察者类型\" class=\"headerlink\" title=\"定义观察者和被观察者类型\"></a>定义观察者和被观察者类型</h2><p>被观察者接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IObservable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(IObserver $observer)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(IObserver $observer)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>attach用于绑定观察者，detach用于解绑，notify用于触发观察者。</p>\n<p>观察者接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IObserver</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(IObservable $observable)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>update用于观察者实现自身的行为，或者更新被观察者的状态。</p>\n<p><a name=\"%E6%89%A9%E5%B1%95request%E4%B8%BAhttp%E7%B1%BB%E5%9E%8B\"></a></p>\n<h2 id=\"扩展request为http类型\"><a href=\"#扩展request为http类型\" class=\"headerlink\" title=\"扩展request为http类型\"></a>扩展request为http类型</h2><p>继承Request对象，并实现被观察者接口。</p>\n<p>其实也可以将上面的IObservable接口定义为抽象类，以减少attach、detach以及notify这部分代码的重复。</p>\n<p>请注意notify方法，该方法依次调用观察者的update方法，并 <strong>传递被观察者本身</strong> 作为参数，这也是观察者模式最重要的一点。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request_http</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span> <span class=\"keyword\">implements</span> <span class=\"title\">IObservable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_type = <span class=\"string\">'http'</span>;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_observers = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(IObserver $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!in_array($observer, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_observers[] = $observer;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(IObserver $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($observer, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            $newobservers = <span class=\"keyword\">array</span>();</div><div class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $obs) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ($obs !== $observer) &#123;</div><div class=\"line\">                    $newobservers[] = $obs;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_observers = $newobservers;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $obs) &#123;</div><div class=\"line\">            $obs-&gt;update(<span class=\"keyword\">$this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h2 id=\"构造观察者\"><a href=\"#构造观察者\" class=\"headerlink\" title=\"构造观察者\"></a>构造观察者</h2><p>构造一个简单的安全处理模块。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestSecurityObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">IObserver</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(IObservable $observable)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// security handler</span></div><div class=\"line\">        <span class=\"comment\">// do some check here</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，我们已经实现了一个Request_http类，作为被观察对象。以及一个RequestSecurityObserver类，作为观察者。</p>\n<p>下面实现工厂模式，构造Request_http类，并返回该类给控制器。</p>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a></p>\n<h2 id=\"定义工厂管理者\"><a href=\"#定义工厂管理者\" class=\"headerlink\" title=\"定义工厂管理者\"></a>定义工厂管理者</h2><p>为了方便对不同request的特殊处理，应该为每一个类构造对应的工厂，因此需要一个管理者来操作正确的工厂。</p>\n<p>每组类型的工厂都可能需要一个管理者（如request、database、view），因此只需抽象的定义一个getObject方法即可。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGeneraterManager</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getObject</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3\"></a></p>\n<h2 id=\"定义工厂接口\"><a href=\"#定义工厂接口\" class=\"headerlink\" title=\"定义工厂接口\"></a>定义工厂接口</h2><p>工厂方法也只定义了一个generate方法，用于生成该工厂对应的类。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGenerater</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0request%E5%B7%A5%E5%8E%82%E7%AE%A1%E7%90%86%E8%80%85\"></a></p>\n<h2 id=\"构造request工厂管理者\"><a href=\"#构造request工厂管理者\" class=\"headerlink\" title=\"构造request工厂管理者\"></a>构造request工厂管理者</h2><p><code>IGeneraterManager</code>忽视了各类工厂管理者的具体职能，此处需要赋予request工厂管理者 <strong>特定</strong> 的职能。</p>\n<p>这里只简要地加以说明。</p>\n<p>该工厂管理者的构造函数引入了Request抽象类，强制所有的工厂返回Request类型，这属于它的特定职能。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestGeneraterManager</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGeneraterManager</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_type;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_generater;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_determineType();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_determineGenerater();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">'Request.abstract.php'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getObject</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_generater-&gt;generate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_determineType</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// should do some check to determine request type</span></div><div class=\"line\">        <span class=\"comment\">// but for clear, we just name a type for this here</span></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_type = <span class=\"string\">'http'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_determineGenerater</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">$this</span>-&gt;_type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'http'</span>:</div><div class=\"line\">                <span class=\"keyword\">include_once</span> <span class=\"string\">'RequestGenerater_http.class.php'</span>;</div><div class=\"line\">                <span class=\"keyword\">$this</span>-&gt;_generater = <span class=\"keyword\">new</span> RequestGenerater_http();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%9E%84%E9%80%A0requesthttp%E5%B7%A5%E5%8E%82\"></a></p>\n<h2 id=\"构造Request-http工厂\"><a href=\"#构造Request-http工厂\" class=\"headerlink\" title=\"构造Request_http工厂\"></a>构造Request_http工厂</h2><p>这个工厂返回Request_http类型，它还有权决定返回哪种Request_http类型，可能是Request_http_mobile以适应移动终端，也可能是Request_http_pc以适应桌面端。</p>\n<p>为了简单起见，这里只返回最基本的Request_http类型。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestGenerater_http</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGenerater</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">'Request_http.class.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Request_http();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，所有的类已经构造完毕。接下来是控制器的控制流。</p>\n<p><a name=\"%E6%8E%A7%E5%88%B6%E5%99%A8\"></a></p>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><p>首先在控制器中引入 <em>工厂管理者</em> 和各种 <em>观察者</em>。</p>\n<p>然后调用管理者的<code>getObject</code>方法获得正确的Request类，它同时也是被观察对象。</p>\n<p>接着将各种观察者绑定到Request上，或者解绑。</p>\n<p>最后通知观察者即可。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestGeneraterManager.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestSecurityObserver.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestxxxxxxxxObserver.class.php'</span>;</div><div class=\"line\"><span class=\"keyword\">include_once</span> ROOT.<span class=\"string\">'/models/datatype/request/RequestxxxxxxxxObserver.class.php'</span>;</div><div class=\"line\">$request_generater_manager = <span class=\"keyword\">new</span> RequestGeneraterManager();</div><div class=\"line\">$request = $request_generater_manager-&gt;getObject();</div><div class=\"line\">$request-&gt;attach(<span class=\"keyword\">new</span> RequestSecurityObserver());</div><div class=\"line\">$request-&gt;attach(<span class=\"keyword\">new</span> RequestxxxxxxxxObserver());</div><div class=\"line\">$request-&gt;detach(<span class=\"keyword\">new</span> RequestxxxxxxxxObserver());</div><div class=\"line\">$request-&gt;notify();</div></pre></td></tr></table></figure>\n<p>通过以上一系列的定义，Request类已经非常灵活，后期无论是新增功能（新建观察者），还是新增类型（新建工厂），都可以轻松应付。</p>\n<p>新增功能时，只要改动控制器的attach和detach即可。<br>新增类型时，只要新建该类型，在工厂中做与其对应的处理即可。</p>\n<p>下面是程序流：</p>\n<ol>\n<li>控制器实例化工厂管理者RequestGeneraterManager</li>\n<li>控制器调用管理者的getObject方法获得Request对象<ol>\n<li>工厂管理者调用适当工厂的generate方法</li>\n<li>工厂生成相应对象，并赋予其合适的属性</li>\n</ol>\n</li>\n<li>控制器为Request对象绑定各种观察者</li>\n<li>控制器调用Request的notify方法，使观察者依次操作Request对象</li>\n<li>控制器重新拥有Request对象的控制权</li>\n</ol>"},{"title":"PHP 细数自动加载","date":"2017-11-13T16:11:51.000Z","_content":"\nautoload将我们从require的痛苦中解救出来，但是简单的autoload是如何一步步构建起庞大的应用的呢？Composer作为PHP的一款优秀的依赖管理工具，又是如何进行自动加载的呢？本文以YII2下的Composer为例，解析Composer源码，一起看看Composer的autoload艺术。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [__autoload](#autoload)\n- [spl_autoload_register](#splautoloadregister)\n- [Composer的自动加载](#composer%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD)\n    - [classMap映射](#classmap%E6%98%A0%E5%B0%84)\n    - [psr-0 和 psr-4](#psr-0-%E5%92%8C-psr-4)\n    - [static类型](#static%E7%B1%BB%E5%9E%8B)\n    - [files类型自动加载文件](#files%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"autoload\"></a>\n## __autoload\n\n在很多PHP教材中，都采用[__autoload函数](http://php.net/manual/zh/function.autoload.php)讲解类的自动加载，举例如下：\n\n在`test.php`文件中定义`Test`类，该类在初始化时会输出一句话：\n\n```php\n/**\n * test.php\n */\n\nclass Test {\n    public function __construct() {\n        echo 'hi, there' . PHP_EOL;\n    }\n}\n```\n\n在`index.php`文件中定义`__autoload`函数，在当前目录下搜索类的同名文件，然后包含该文件。\n\n```php\n/**\n * index.php\n */\n\nfunction __autoload($className) {\n    $fileName = './' . strtolower($className) . '.php';\n    include_once($fileName);\n}\n\n$test = new Test();\n```\n\n运行`index.php`文件，可以看到输出：\n\n```\n$ php -f index.php\nhi, there\n```\n\n但是，**__autoload函数在PHP 7.2.0中已经不赞成使用。**\n\n使用该方法的缺点是：**`__autoload`只可以定义一次**。假如A的项目引用了B的代码，A和B采用两种`__autoload`，就会产生冲突，尤其是使用了很多插件的时候，合并`__autoload`会很麻烦。\n\n<a name=\"splautoloadregister\"></a>\n## spl_autoload_register\n\n> 如果需要多条 autoload 函数，[spl_autoload_register()](http://php.net/manual/zh/function.spl-autoload-register.php) 满足了此类需求。 它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下， __autoload() 只可以定义一次。\n\n在之前的基础上，新增一个文件`test2.class.php`：\n\n```php\n/**\n * index2.class.php\n */\n\nclass Test2 {\n    public function __construct() {\n        echo 'hi, there, too' . PHP_EOL;\n    }\n}\n```\n\n修改`index.php`文件，为`test2.class.php`建立加载函数：\n\n```php\n/**\n * index.php\n */\n\nfunction autoloader_1($className) {\n    $fileName = './' . strtolower($className) . '.php';\n    include_once($fileName);\n}\n\nfunction autoloader_2($className) {\n    $fileName = './' . strtolower($className) . '.class.php';\n    include_once($fileName);\n}\n\nspl_autoload_register('autoloader_1');\nspl_autoload_register('autoloader_2');\n\n$test = new Test();\n$test2 = new Test2();\n```\n\n运行`index.php`文件，有如下输出：\n\n```\n$ php -f index.php\nhi, there\nPHP Warning:  include_once(./test2.php): failed to open stream: No such file or directory in /Users/ycgambo/Documents/test/php/index.php on line 9\nPHP Stack trace:\nPHP   1. {main}() /Users/ycgambo/Documents/test/php/index.php:0\nPHP   2. spl_autoload_call() /Users/ycgambo/Documents/test/php/index.php:21\nPHP   3. autoloader_1() /Users/ycgambo/Documents/test/php/index.php:0\nPHP Warning:  include_once(): Failed opening './test2.php' for inclusion (include_path='.:') in /Users/ycgambo/Documents/test/php/index.php on line 9\nPHP Stack trace:\nPHP   1. {main}() /Users/ycgambo/Documents/test/php/index.php:0\nPHP   2. spl_autoload_call() /Users/ycgambo/Documents/test/php/index.php:21\nPHP   3. autoloader_1() /Users/ycgambo/Documents/test/php/index.php:0\nhi, there, too\n```\n\n通过第一行和最后一行的输出可知，PHP如期加载了两个类文件。在加载`Test2`类时，PHP按照加载函数注册的顺序，优先尝试搜索`test2.php`，但没有找到，所以报了`Warning`。\n\n<a name=\"composer%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD\"></a>\n## Composer的自动加载\n\n\nComposer作为PHP优秀的依赖管理工具，它的身影出现在许多著名框架中，因此有必要学习一下Composer是如何实现自动加载的。\n\n`ComposerAutoloaderInit`是Composer的入口文件，主要保存了一个`ClassLoader`实例用来协助加载依赖：\n\n```php\nclass ComposerAutoloaderInit\n{\n    private static $loader;\n}\n```\n\n该`ClassLoader`实例会在一开始就被初始化，然后注册`autoload`：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        // ...\n        $loader->register(true);\n        // ...\n    }\n}\n```\n\n`register`方法向`spl_autoload_register`函数注册了自身的`loadClass`：\n\n```php\nclass ClassLoader\n{\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n}\n```\n\n`loadClass`方法用来加载文件。该方法先调用`findFile`方法寻找文件，再调用`includeFile`函数加载文件：\n\n```php\nclass ClassLoader\n{\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n    public function findFile($class)\n    {\n        // ... 按照类名返回合适的文件名，具体代码下面会讲\n        \n        return $file;\n    }\n}\n\n// 隔离文件，防止加载的文件访问$this/self\nfunction includeFile($file)\n{\n    include $file;\n}\n```\n\n了解了加载流程（如何注册`spl_autoload_register`），接下来了解一下这些类文件是如何保存以及被加载的（`spl_autoload_register`的加载机制）。\n\n<a name=\"classmap%E6%98%A0%E5%B0%84\"></a>\n### classMap映射\n\nclassMap类型是一个数组，它保存了类名到文件名的映射，这份映射关系保存在`autoload_classmap.php`文件中，格式如下：\n\n```php\n// $vendorDir = 'someDir';\nreturn array(\n    'File_Iterator' => $vendorDir . '/phpunit/php-file-iterator/src/Iterator.php',\n    // ...\n);\n```\n\n`ComposerAutoloaderInit`在注册`ClassLoader`时，会读取`autoload_classmap.php`文件，`ClassLoader`将映射保存在自己的`classMap`中：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        // ...\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n        // ...\n    }\n}\n```\n\n`ClassLoader`在加载时，会首先在这份映射中搜索：\n\n```php\nclass ClassLoader\n{\n    public function findFile($class)\n    {\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        // ...\n    }\n}\n```\n\n<a name=\"psr-0-%E5%92%8C-psr-4\"></a>\n### psr-0 和 psr-4\n\n其实，`ClassLoader`的`classMap`中不止保存了`classMap`类型的映射，还保存了适合`psr-0`和`psr-4`两种自动加载规范的映射：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        // ...\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n        // ...\n    }\n}\n```\n\n与`classMap`不同的是，这两种规范定义的是命名空间的映射，可以将一个命名空间映射到一个目录，`spl_autoload_register`函数在解析命名空间下符合规范要求的类名时，可以自动解析到目录下对应的文件，因此可以不必为每一个类都指定对应的文件名。\n\n`classMap`类型的映射，每一个类都映射到文件，繁琐的对应关系，但也比较直接：\n![classMap类型](/images/PHP/syntax_autoloadCountOff/composer_classmap.png)\n\n`psr-4`类型的映射（`psr-0`与之类似），点到为止，十分简洁，但需要遵循规范：\n![psr-4类型](/images/PHP/syntax_autoloadCountOff/composer_psr4.png)\n\n<a name=\"static%E7%B1%BB%E5%9E%8B\"></a>\n### static类型\n\n先上代码，看一看static类型是在哪里引入的：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require_once __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n        // ...\n    }\n}\n```\n\nstatic静态类型和上面几种类型用`if-else`结构隔开，目的很明显，要么用`if`加载，要么用`else`加载，为什么要这么做呢？\n\n原来，如果php的版本大于5.6 ,composer会进行加载优化，减少大量映射的加载时间：\n\n> Optimized the autoloader initialization using static loading on PHP 5.6 and above, this reduces the load time for large classmaps to almost nothing\n\n不同于上面简单定义的数组，`autoload_static.php`文件定义的是一个`ComposerStaticInit`类:\n\n```php\nnamespace Composer\\Autoload;\n\nclass ComposerStaticInit\n{\n    public static $files = array (\n        // ...\n    );\n\n    public static $prefixLengthsPsr4 = array (\n        // ...\n    );\n\n    public static $prefixDirsPsr4 = array (\n        // ...\n    );\n\n    public static $prefixesPsr0 = array (\n        // ...\n    );\n\n    public static $classMap = array (\n        // ...\n    );\n\n    public static function getInitializer(ClassLoader $loader)\n    {\n        // ...\n    }\n}\n```\n\n`ComposerStaticInit`类保存了上面各种类型的映射的静态副本，此外还定义了一个初始化方法`getInitializer`。前面`ComposerAutoloaderInit`调用这个方法时，传入了一个`ClassLoader`：\n\n    call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));\n\n之后再在`getInitializer`方法中巧妙利用`Closure::bind`操作访问`ClassLoader`的私有变量，达到静态加载的目的：\n\n```php\nclass ComposerStaticInit\n{\n    // ...\n    public static function getInitializer(ClassLoader $loader)\n    {\n        return \\Closure::bind(function () use ($loader) {\n            $loader->prefixLengthsPsr4 = ComposerStaticInit::$prefixLengthsPsr4;\n            $loader->prefixDirsPsr4 = ComposerStaticInit::$prefixDirsPsr4;\n            $loader->prefixesPsr0 = ComposerStaticInit::$prefixesPsr0;\n            $loader->classMap = ComposerStaticInit::$classMap;\n\n        }, null, ClassLoader::class);\n    }\n}\n\n// 这些变量在ClassLoader定义如下\nclass ClassLoader\n{\n    // PSR-4\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n\n    // PSR-0\n    private $prefixesPsr0 = array();\n\n    private $classMap = array();\n}\n```\n\n<a name=\"files%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6\"></a>\n### files类型自动加载文件\n\n上面的几种类型都属于类的自动加载，files类型则是在`ClassLoader`注册好`loadClass`后就立即包含进所指定的文件：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require_once __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        if ($useStaticLoader) {\n            $includeFiles = Composer\\Autoload\\ComposerStaticInit::$files;\n        } else {\n            $includeFiles = require __DIR__ . '/autoload_files.php';\n        }\n        foreach ($includeFiles as $fileIdentifier => $file) {\n            composerRequire($fileIdentifier, $file);\n        }\n\n        return $loader;\n    }\n}\n```\n\n上面已经是完整的`getLoader`方法了。\n\n`autoload_files.php`文件格式如下：\n\n```php\n// $vendorDir = 'someDir';\nreturn array(\n    '0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => $vendorDir . '/symfony/polyfill-mbstring/bootstrap.php',\n    '2cffec82183ee1cea088009cef9a6fc3' => $vendorDir . '/ezyang/htmlpurifier/library/HTMLPurifier.composer.php',\n    // ...\n);\n```\n\n至此，composer的自动加载已经基本介绍完毕。需要指出的是，`ComposerAutoloaderInit`和`ComposerStaticInit`其实是有SHA值的，我的如下：`ComposerAutoloaderInit863a9fe54c36c8e7444b35fbf849f660`、`ComposerStaticInit863a9fe54c36c8e7444b35fbf849f660`，文中为了方便将其删除。","source":"_posts/PHP/syntax_autoloadCountOff.md","raw":"---\ntitle: PHP 细数自动加载\ndate: 2017/11/14 00:11:51\ncategories: PHP\ntags:\n    - PHP\n    - Syntax\n---\n\nautoload将我们从require的痛苦中解救出来，但是简单的autoload是如何一步步构建起庞大的应用的呢？Composer作为PHP的一款优秀的依赖管理工具，又是如何进行自动加载的呢？本文以YII2下的Composer为例，解析Composer源码，一起看看Composer的autoload艺术。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [__autoload](#autoload)\n- [spl_autoload_register](#splautoloadregister)\n- [Composer的自动加载](#composer%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD)\n    - [classMap映射](#classmap%E6%98%A0%E5%B0%84)\n    - [psr-0 和 psr-4](#psr-0-%E5%92%8C-psr-4)\n    - [static类型](#static%E7%B1%BB%E5%9E%8B)\n    - [files类型自动加载文件](#files%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"autoload\"></a>\n## __autoload\n\n在很多PHP教材中，都采用[__autoload函数](http://php.net/manual/zh/function.autoload.php)讲解类的自动加载，举例如下：\n\n在`test.php`文件中定义`Test`类，该类在初始化时会输出一句话：\n\n```php\n/**\n * test.php\n */\n\nclass Test {\n    public function __construct() {\n        echo 'hi, there' . PHP_EOL;\n    }\n}\n```\n\n在`index.php`文件中定义`__autoload`函数，在当前目录下搜索类的同名文件，然后包含该文件。\n\n```php\n/**\n * index.php\n */\n\nfunction __autoload($className) {\n    $fileName = './' . strtolower($className) . '.php';\n    include_once($fileName);\n}\n\n$test = new Test();\n```\n\n运行`index.php`文件，可以看到输出：\n\n```\n$ php -f index.php\nhi, there\n```\n\n但是，**__autoload函数在PHP 7.2.0中已经不赞成使用。**\n\n使用该方法的缺点是：**`__autoload`只可以定义一次**。假如A的项目引用了B的代码，A和B采用两种`__autoload`，就会产生冲突，尤其是使用了很多插件的时候，合并`__autoload`会很麻烦。\n\n<a name=\"splautoloadregister\"></a>\n## spl_autoload_register\n\n> 如果需要多条 autoload 函数，[spl_autoload_register()](http://php.net/manual/zh/function.spl-autoload-register.php) 满足了此类需求。 它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下， __autoload() 只可以定义一次。\n\n在之前的基础上，新增一个文件`test2.class.php`：\n\n```php\n/**\n * index2.class.php\n */\n\nclass Test2 {\n    public function __construct() {\n        echo 'hi, there, too' . PHP_EOL;\n    }\n}\n```\n\n修改`index.php`文件，为`test2.class.php`建立加载函数：\n\n```php\n/**\n * index.php\n */\n\nfunction autoloader_1($className) {\n    $fileName = './' . strtolower($className) . '.php';\n    include_once($fileName);\n}\n\nfunction autoloader_2($className) {\n    $fileName = './' . strtolower($className) . '.class.php';\n    include_once($fileName);\n}\n\nspl_autoload_register('autoloader_1');\nspl_autoload_register('autoloader_2');\n\n$test = new Test();\n$test2 = new Test2();\n```\n\n运行`index.php`文件，有如下输出：\n\n```\n$ php -f index.php\nhi, there\nPHP Warning:  include_once(./test2.php): failed to open stream: No such file or directory in /Users/ycgambo/Documents/test/php/index.php on line 9\nPHP Stack trace:\nPHP   1. {main}() /Users/ycgambo/Documents/test/php/index.php:0\nPHP   2. spl_autoload_call() /Users/ycgambo/Documents/test/php/index.php:21\nPHP   3. autoloader_1() /Users/ycgambo/Documents/test/php/index.php:0\nPHP Warning:  include_once(): Failed opening './test2.php' for inclusion (include_path='.:') in /Users/ycgambo/Documents/test/php/index.php on line 9\nPHP Stack trace:\nPHP   1. {main}() /Users/ycgambo/Documents/test/php/index.php:0\nPHP   2. spl_autoload_call() /Users/ycgambo/Documents/test/php/index.php:21\nPHP   3. autoloader_1() /Users/ycgambo/Documents/test/php/index.php:0\nhi, there, too\n```\n\n通过第一行和最后一行的输出可知，PHP如期加载了两个类文件。在加载`Test2`类时，PHP按照加载函数注册的顺序，优先尝试搜索`test2.php`，但没有找到，所以报了`Warning`。\n\n<a name=\"composer%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD\"></a>\n## Composer的自动加载\n\n\nComposer作为PHP优秀的依赖管理工具，它的身影出现在许多著名框架中，因此有必要学习一下Composer是如何实现自动加载的。\n\n`ComposerAutoloaderInit`是Composer的入口文件，主要保存了一个`ClassLoader`实例用来协助加载依赖：\n\n```php\nclass ComposerAutoloaderInit\n{\n    private static $loader;\n}\n```\n\n该`ClassLoader`实例会在一开始就被初始化，然后注册`autoload`：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        // ...\n        $loader->register(true);\n        // ...\n    }\n}\n```\n\n`register`方法向`spl_autoload_register`函数注册了自身的`loadClass`：\n\n```php\nclass ClassLoader\n{\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n}\n```\n\n`loadClass`方法用来加载文件。该方法先调用`findFile`方法寻找文件，再调用`includeFile`函数加载文件：\n\n```php\nclass ClassLoader\n{\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n    public function findFile($class)\n    {\n        // ... 按照类名返回合适的文件名，具体代码下面会讲\n        \n        return $file;\n    }\n}\n\n// 隔离文件，防止加载的文件访问$this/self\nfunction includeFile($file)\n{\n    include $file;\n}\n```\n\n了解了加载流程（如何注册`spl_autoload_register`），接下来了解一下这些类文件是如何保存以及被加载的（`spl_autoload_register`的加载机制）。\n\n<a name=\"classmap%E6%98%A0%E5%B0%84\"></a>\n### classMap映射\n\nclassMap类型是一个数组，它保存了类名到文件名的映射，这份映射关系保存在`autoload_classmap.php`文件中，格式如下：\n\n```php\n// $vendorDir = 'someDir';\nreturn array(\n    'File_Iterator' => $vendorDir . '/phpunit/php-file-iterator/src/Iterator.php',\n    // ...\n);\n```\n\n`ComposerAutoloaderInit`在注册`ClassLoader`时，会读取`autoload_classmap.php`文件，`ClassLoader`将映射保存在自己的`classMap`中：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        // ...\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n        // ...\n    }\n}\n```\n\n`ClassLoader`在加载时，会首先在这份映射中搜索：\n\n```php\nclass ClassLoader\n{\n    public function findFile($class)\n    {\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        // ...\n    }\n}\n```\n\n<a name=\"psr-0-%E5%92%8C-psr-4\"></a>\n### psr-0 和 psr-4\n\n其实，`ClassLoader`的`classMap`中不止保存了`classMap`类型的映射，还保存了适合`psr-0`和`psr-4`两种自动加载规范的映射：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        // ...\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n        // ...\n    }\n}\n```\n\n与`classMap`不同的是，这两种规范定义的是命名空间的映射，可以将一个命名空间映射到一个目录，`spl_autoload_register`函数在解析命名空间下符合规范要求的类名时，可以自动解析到目录下对应的文件，因此可以不必为每一个类都指定对应的文件名。\n\n`classMap`类型的映射，每一个类都映射到文件，繁琐的对应关系，但也比较直接：\n![classMap类型](/images/PHP/syntax_autoloadCountOff/composer_classmap.png)\n\n`psr-4`类型的映射（`psr-0`与之类似），点到为止，十分简洁，但需要遵循规范：\n![psr-4类型](/images/PHP/syntax_autoloadCountOff/composer_psr4.png)\n\n<a name=\"static%E7%B1%BB%E5%9E%8B\"></a>\n### static类型\n\n先上代码，看一看static类型是在哪里引入的：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require_once __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n        // ...\n    }\n}\n```\n\nstatic静态类型和上面几种类型用`if-else`结构隔开，目的很明显，要么用`if`加载，要么用`else`加载，为什么要这么做呢？\n\n原来，如果php的版本大于5.6 ,composer会进行加载优化，减少大量映射的加载时间：\n\n> Optimized the autoloader initialization using static loading on PHP 5.6 and above, this reduces the load time for large classmaps to almost nothing\n\n不同于上面简单定义的数组，`autoload_static.php`文件定义的是一个`ComposerStaticInit`类:\n\n```php\nnamespace Composer\\Autoload;\n\nclass ComposerStaticInit\n{\n    public static $files = array (\n        // ...\n    );\n\n    public static $prefixLengthsPsr4 = array (\n        // ...\n    );\n\n    public static $prefixDirsPsr4 = array (\n        // ...\n    );\n\n    public static $prefixesPsr0 = array (\n        // ...\n    );\n\n    public static $classMap = array (\n        // ...\n    );\n\n    public static function getInitializer(ClassLoader $loader)\n    {\n        // ...\n    }\n}\n```\n\n`ComposerStaticInit`类保存了上面各种类型的映射的静态副本，此外还定义了一个初始化方法`getInitializer`。前面`ComposerAutoloaderInit`调用这个方法时，传入了一个`ClassLoader`：\n\n    call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));\n\n之后再在`getInitializer`方法中巧妙利用`Closure::bind`操作访问`ClassLoader`的私有变量，达到静态加载的目的：\n\n```php\nclass ComposerStaticInit\n{\n    // ...\n    public static function getInitializer(ClassLoader $loader)\n    {\n        return \\Closure::bind(function () use ($loader) {\n            $loader->prefixLengthsPsr4 = ComposerStaticInit::$prefixLengthsPsr4;\n            $loader->prefixDirsPsr4 = ComposerStaticInit::$prefixDirsPsr4;\n            $loader->prefixesPsr0 = ComposerStaticInit::$prefixesPsr0;\n            $loader->classMap = ComposerStaticInit::$classMap;\n\n        }, null, ClassLoader::class);\n    }\n}\n\n// 这些变量在ClassLoader定义如下\nclass ClassLoader\n{\n    // PSR-4\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n\n    // PSR-0\n    private $prefixesPsr0 = array();\n\n    private $classMap = array();\n}\n```\n\n<a name=\"files%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6\"></a>\n### files类型自动加载文件\n\n上面的几种类型都属于类的自动加载，files类型则是在`ClassLoader`注册好`loadClass`后就立即包含进所指定的文件：\n\n```php\nclass ComposerAutoloaderInit\n{\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require_once __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        if ($useStaticLoader) {\n            $includeFiles = Composer\\Autoload\\ComposerStaticInit::$files;\n        } else {\n            $includeFiles = require __DIR__ . '/autoload_files.php';\n        }\n        foreach ($includeFiles as $fileIdentifier => $file) {\n            composerRequire($fileIdentifier, $file);\n        }\n\n        return $loader;\n    }\n}\n```\n\n上面已经是完整的`getLoader`方法了。\n\n`autoload_files.php`文件格式如下：\n\n```php\n// $vendorDir = 'someDir';\nreturn array(\n    '0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => $vendorDir . '/symfony/polyfill-mbstring/bootstrap.php',\n    '2cffec82183ee1cea088009cef9a6fc3' => $vendorDir . '/ezyang/htmlpurifier/library/HTMLPurifier.composer.php',\n    // ...\n);\n```\n\n至此，composer的自动加载已经基本介绍完毕。需要指出的是，`ComposerAutoloaderInit`和`ComposerStaticInit`其实是有SHA值的，我的如下：`ComposerAutoloaderInit863a9fe54c36c8e7444b35fbf849f660`、`ComposerStaticInit863a9fe54c36c8e7444b35fbf849f660`，文中为了方便将其删除。","slug":"PHP/syntax_autoloadCountOff","published":1,"updated":"2017-11-14T01:41:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1ln000i2ys8mrgefhgj","content":"<p>autoload将我们从require的痛苦中解救出来，但是简单的autoload是如何一步步构建起庞大的应用的呢？Composer作为PHP的一款优秀的依赖管理工具，又是如何进行自动加载的呢？本文以YII2下的Composer为例，解析Composer源码，一起看看Composer的autoload艺术。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#autoload\">__autoload</a></li>\n<li><a href=\"#splautoloadregister\">spl_autoload_register</a></li>\n<li><a href=\"#composer%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD\">Composer的自动加载</a><ul>\n<li><a href=\"#classmap%E6%98%A0%E5%B0%84\">classMap映射</a></li>\n<li><a href=\"#psr-0-%E5%92%8C-psr-4\">psr-0 和 psr-4</a></li>\n<li><a href=\"#static%E7%B1%BB%E5%9E%8B\">static类型</a></li>\n<li><a href=\"#files%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6\">files类型自动加载文件</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"autoload\"></a></p>\n<h2 id=\"autoload\"><a href=\"#autoload\" class=\"headerlink\" title=\"__autoload\"></a>__autoload</h2><p>在很多PHP教材中，都采用<a href=\"http://php.net/manual/zh/function.autoload.php\" target=\"_blank\" rel=\"external\">__autoload函数</a>讲解类的自动加载，举例如下：</p>\n<p>在<code>test.php</code>文件中定义<code>Test</code>类，该类在初始化时会输出一句话：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * test.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'hi, there'</span> . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>index.php</code>文件中定义<code>__autoload</code>函数，在当前目录下搜索类的同名文件，然后包含该文件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * index.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span><span class=\"params\">($className)</span> </span>&#123;</div><div class=\"line\">    $fileName = <span class=\"string\">'./'</span> . strtolower($className) . <span class=\"string\">'.php'</span>;</div><div class=\"line\">    <span class=\"keyword\">include_once</span>($fileName);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> Test();</div></pre></td></tr></table></figure>\n<p>运行<code>index.php</code>文件，可以看到输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ php -f index.php</div><div class=\"line\">hi, there</div></pre></td></tr></table></figure>\n<p>但是，<strong>__autoload函数在PHP 7.2.0中已经不赞成使用。</strong></p>\n<p>使用该方法的缺点是：<strong><code>__autoload</code>只可以定义一次</strong>。假如A的项目引用了B的代码，A和B采用两种<code>__autoload</code>，就会产生冲突，尤其是使用了很多插件的时候，合并<code>__autoload</code>会很麻烦。</p>\n<p><a name=\"splautoloadregister\"></a></p>\n<h2 id=\"spl-autoload-register\"><a href=\"#spl-autoload-register\" class=\"headerlink\" title=\"spl_autoload_register\"></a>spl_autoload_register</h2><blockquote>\n<p>如果需要多条 autoload 函数，<a href=\"http://php.net/manual/zh/function.spl-autoload-register.php\" target=\"_blank\" rel=\"external\">spl_autoload_register()</a> 满足了此类需求。 它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下， __autoload() 只可以定义一次。</p>\n</blockquote>\n<p>在之前的基础上，新增一个文件<code>test2.class.php</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * index2.class.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test2</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'hi, there, too'</span> . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改<code>index.php</code>文件，为<code>test2.class.php</code>建立加载函数：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * index.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autoloader_1</span><span class=\"params\">($className)</span> </span>&#123;</div><div class=\"line\">    $fileName = <span class=\"string\">'./'</span> . strtolower($className) . <span class=\"string\">'.php'</span>;</div><div class=\"line\">    <span class=\"keyword\">include_once</span>($fileName);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autoloader_2</span><span class=\"params\">($className)</span> </span>&#123;</div><div class=\"line\">    $fileName = <span class=\"string\">'./'</span> . strtolower($className) . <span class=\"string\">'.class.php'</span>;</div><div class=\"line\">    <span class=\"keyword\">include_once</span>($fileName);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">spl_autoload_register(<span class=\"string\">'autoloader_1'</span>);</div><div class=\"line\">spl_autoload_register(<span class=\"string\">'autoloader_2'</span>);</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">$test2 = <span class=\"keyword\">new</span> Test2();</div></pre></td></tr></table></figure>\n<p>运行<code>index.php</code>文件，有如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ php -f index.php</div><div class=\"line\">hi, there</div><div class=\"line\">PHP Warning:  include_once(./test2.php): failed to open stream: No such file or directory in /Users/ycgambo/Documents/test/php/index.php on line 9</div><div class=\"line\">PHP Stack trace:</div><div class=\"line\">PHP   1. &#123;main&#125;() /Users/ycgambo/Documents/test/php/index.php:0</div><div class=\"line\">PHP   2. spl_autoload_call() /Users/ycgambo/Documents/test/php/index.php:21</div><div class=\"line\">PHP   3. autoloader_1() /Users/ycgambo/Documents/test/php/index.php:0</div><div class=\"line\">PHP Warning:  include_once(): Failed opening &apos;./test2.php&apos; for inclusion (include_path=&apos;.:&apos;) in /Users/ycgambo/Documents/test/php/index.php on line 9</div><div class=\"line\">PHP Stack trace:</div><div class=\"line\">PHP   1. &#123;main&#125;() /Users/ycgambo/Documents/test/php/index.php:0</div><div class=\"line\">PHP   2. spl_autoload_call() /Users/ycgambo/Documents/test/php/index.php:21</div><div class=\"line\">PHP   3. autoloader_1() /Users/ycgambo/Documents/test/php/index.php:0</div><div class=\"line\">hi, there, too</div></pre></td></tr></table></figure>\n<p>通过第一行和最后一行的输出可知，PHP如期加载了两个类文件。在加载<code>Test2</code>类时，PHP按照加载函数注册的顺序，优先尝试搜索<code>test2.php</code>，但没有找到，所以报了<code>Warning</code>。</p>\n<p><a name=\"composer%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD\"></a></p>\n<h2 id=\"Composer的自动加载\"><a href=\"#Composer的自动加载\" class=\"headerlink\" title=\"Composer的自动加载\"></a>Composer的自动加载</h2><p>Composer作为PHP优秀的依赖管理工具，它的身影出现在许多著名框架中，因此有必要学习一下Composer是如何实现自动加载的。</p>\n<p><code>ComposerAutoloaderInit</code>是Composer的入口文件，主要保存了一个<code>ClassLoader</code>实例用来协助加载依赖：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $loader;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该<code>ClassLoader</code>实例会在一开始就被初始化，然后注册<code>autoload</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        $loader-&gt;register(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>register</code>方法向<code>spl_autoload_register</code>函数注册了自身的<code>loadClass</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span><span class=\"params\">($prepend = false)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        spl_autoload_register(<span class=\"keyword\">array</span>(<span class=\"keyword\">$this</span>, <span class=\"string\">'loadClass'</span>), <span class=\"keyword\">true</span>, $prepend);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>loadClass</code>方法用来加载文件。该方法先调用<code>findFile</code>方法寻找文件，再调用<code>includeFile</code>函数加载文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadClass</span><span class=\"params\">($class)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($file = <span class=\"keyword\">$this</span>-&gt;findFile($class)) &#123;</div><div class=\"line\">            includeFile($file);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findFile</span><span class=\"params\">($class)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ... 按照类名返回合适的文件名，具体代码下面会讲</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> $file;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 隔离文件，防止加载的文件访问$this/self</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">includeFile</span><span class=\"params\">($file)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">include</span> $file;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>了解了加载流程（如何注册<code>spl_autoload_register</code>），接下来了解一下这些类文件是如何保存以及被加载的（<code>spl_autoload_register</code>的加载机制）。</p>\n<p><a name=\"classmap%E6%98%A0%E5%B0%84\"></a></p>\n<h3 id=\"classMap映射\"><a href=\"#classMap映射\" class=\"headerlink\" title=\"classMap映射\"></a>classMap映射</h3><p>classMap类型是一个数组，它保存了类名到文件名的映射，这份映射关系保存在<code>autoload_classmap.php</code>文件中，格式如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// $vendorDir = 'someDir';</span></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'File_Iterator'</span> =&gt; $vendorDir . <span class=\"string\">'/phpunit/php-file-iterator/src/Iterator.php'</span>,</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p><code>ComposerAutoloaderInit</code>在注册<code>ClassLoader</code>时，会读取<code>autoload_classmap.php</code>文件，<code>ClassLoader</code>将映射保存在自己的<code>classMap</code>中：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        $classMap = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_classmap.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($classMap) &#123;</div><div class=\"line\">            $loader-&gt;addClassMap($classMap);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>ClassLoader</code>在加载时，会首先在这份映射中搜索：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findFile</span><span class=\"params\">($class)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;classMap[$class])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;classMap[$class];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"psr-0-%E5%92%8C-psr-4\"></a></p>\n<h3 id=\"psr-0-和-psr-4\"><a href=\"#psr-0-和-psr-4\" class=\"headerlink\" title=\"psr-0 和 psr-4\"></a>psr-0 和 psr-4</h3><p>其实，<code>ClassLoader</code>的<code>classMap</code>中不止保存了<code>classMap</code>类型的映射，还保存了适合<code>psr-0</code>和<code>psr-4</code>两种自动加载规范的映射：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_namespaces.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">            $loader-&gt;set($namespace, $path);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_psr4.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">            $loader-&gt;setPsr4($namespace, $path);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        $classMap = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_classmap.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($classMap) &#123;</div><div class=\"line\">            $loader-&gt;addClassMap($classMap);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>与<code>classMap</code>不同的是，这两种规范定义的是命名空间的映射，可以将一个命名空间映射到一个目录，<code>spl_autoload_register</code>函数在解析命名空间下符合规范要求的类名时，可以自动解析到目录下对应的文件，因此可以不必为每一个类都指定对应的文件名。</p>\n<p><code>classMap</code>类型的映射，每一个类都映射到文件，繁琐的对应关系，但也比较直接：<br><img src=\"/images/PHP/syntax_autoloadCountOff/composer_classmap.png\" alt=\"classMap类型\"></p>\n<p><code>psr-4</code>类型的映射（<code>psr-0</code>与之类似），点到为止，十分简洁，但需要遵循规范：<br><img src=\"/images/PHP/syntax_autoloadCountOff/composer_psr4.png\" alt=\"psr-4类型\"></p>\n<p><a name=\"static%E7%B1%BB%E5%9E%8B\"></a></p>\n<h3 id=\"static类型\"><a href=\"#static类型\" class=\"headerlink\" title=\"static类型\"></a>static类型</h3><p>先上代码，看一看static类型是在哪里引入的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== <span class=\"keyword\">self</span>::$loader) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$loader;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        spl_autoload_register(<span class=\"keyword\">array</span>(<span class=\"string\">'ComposerAutoloaderInit'</span>, <span class=\"string\">'loadClassLoader'</span>), <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">self</span>::$loader = $loader = <span class=\"keyword\">new</span> \\Composer\\Autoload\\ClassLoader();</div><div class=\"line\">        spl_autoload_unregister(<span class=\"keyword\">array</span>(<span class=\"string\">'ComposerAutoloaderInit'</span>, <span class=\"string\">'loadClassLoader'</span>));</div><div class=\"line\"></div><div class=\"line\">        $useStaticLoader = PHP_VERSION_ID &gt;= <span class=\"number\">50600</span> &amp;&amp; !defined(<span class=\"string\">'HHVM_VERSION'</span>) &amp;&amp; (!function_exists(<span class=\"string\">'zend_loader_file_encoded'</span>) || !zend_loader_file_encoded());</div><div class=\"line\">        <span class=\"keyword\">if</span> ($useStaticLoader) &#123;</div><div class=\"line\">            <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_static.php'</span>;</div><div class=\"line\"></div><div class=\"line\">            call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_namespaces.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">                $loader-&gt;set($namespace, $path);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_psr4.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">                $loader-&gt;setPsr4($namespace, $path);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            $classMap = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_classmap.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($classMap) &#123;</div><div class=\"line\">                $loader-&gt;addClassMap($classMap);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>static静态类型和上面几种类型用<code>if-else</code>结构隔开，目的很明显，要么用<code>if</code>加载，要么用<code>else</code>加载，为什么要这么做呢？</p>\n<p>原来，如果php的版本大于5.6 ,composer会进行加载优化，减少大量映射的加载时间：</p>\n<blockquote>\n<p>Optimized the autoloader initialization using static loading on PHP 5.6 and above, this reduces the load time for large classmaps to almost nothing</p>\n</blockquote>\n<p>不同于上面简单定义的数组，<code>autoload_static.php</code>文件定义的是一个<code>ComposerStaticInit</code>类:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Composer</span>\\<span class=\"title\">Autoload</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerStaticInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $files = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $prefixLengthsPsr4 = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $prefixDirsPsr4 = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $prefixesPsr0 = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $classMap = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInitializer</span><span class=\"params\">(ClassLoader $loader)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>ComposerStaticInit</code>类保存了上面各种类型的映射的静态副本，此外还定义了一个初始化方法<code>getInitializer</code>。前面<code>ComposerAutoloaderInit</code>调用这个方法时，传入了一个<code>ClassLoader</code>：</p>\n<pre><code>call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));\n</code></pre><p>之后再在<code>getInitializer</code>方法中巧妙利用<code>Closure::bind</code>操作访问<code>ClassLoader</code>的私有变量，达到静态加载的目的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerStaticInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInitializer</span><span class=\"params\">(ClassLoader $loader)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> \\Closure::bind(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($loader)</span> </span>&#123;</div><div class=\"line\">            $loader-&gt;prefixLengthsPsr4 = ComposerStaticInit::$prefixLengthsPsr4;</div><div class=\"line\">            $loader-&gt;prefixDirsPsr4 = ComposerStaticInit::$prefixDirsPsr4;</div><div class=\"line\">            $loader-&gt;prefixesPsr0 = ComposerStaticInit::$prefixesPsr0;</div><div class=\"line\">            $loader-&gt;classMap = ComposerStaticInit::$classMap;</div><div class=\"line\"></div><div class=\"line\">        &#125;, <span class=\"keyword\">null</span>, ClassLoader::class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这些变量在ClassLoader定义如下</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// PSR-4</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $prefixLengthsPsr4 = <span class=\"keyword\">array</span>();</div><div class=\"line\">    <span class=\"keyword\">private</span> $prefixDirsPsr4 = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// PSR-0</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $prefixesPsr0 = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> $classMap = <span class=\"keyword\">array</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"files%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6\"></a></p>\n<h3 id=\"files类型自动加载文件\"><a href=\"#files类型自动加载文件\" class=\"headerlink\" title=\"files类型自动加载文件\"></a>files类型自动加载文件</h3><p>上面的几种类型都属于类的自动加载，files类型则是在<code>ClassLoader</code>注册好<code>loadClass</code>后就立即包含进所指定的文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== <span class=\"keyword\">self</span>::$loader) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$loader;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        spl_autoload_register(<span class=\"keyword\">array</span>(<span class=\"string\">'ComposerAutoloaderInit'</span>, <span class=\"string\">'loadClassLoader'</span>), <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">self</span>::$loader = $loader = <span class=\"keyword\">new</span> \\Composer\\Autoload\\ClassLoader();</div><div class=\"line\">        spl_autoload_unregister(<span class=\"keyword\">array</span>(<span class=\"string\">'ComposerAutoloaderInit'</span>, <span class=\"string\">'loadClassLoader'</span>));</div><div class=\"line\"></div><div class=\"line\">        $useStaticLoader = PHP_VERSION_ID &gt;= <span class=\"number\">50600</span> &amp;&amp; !defined(<span class=\"string\">'HHVM_VERSION'</span>) &amp;&amp; (!function_exists(<span class=\"string\">'zend_loader_file_encoded'</span>) || !zend_loader_file_encoded());</div><div class=\"line\">        <span class=\"keyword\">if</span> ($useStaticLoader) &#123;</div><div class=\"line\">            <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_static.php'</span>;</div><div class=\"line\"></div><div class=\"line\">            call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_namespaces.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">                $loader-&gt;set($namespace, $path);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_psr4.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">                $loader-&gt;setPsr4($namespace, $path);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            $classMap = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_classmap.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($classMap) &#123;</div><div class=\"line\">                $loader-&gt;addClassMap($classMap);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        $loader-&gt;register(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> ($useStaticLoader) &#123;</div><div class=\"line\">            $includeFiles = Composer\\Autoload\\ComposerStaticInit::$files;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $includeFiles = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_files.php'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> ($includeFiles <span class=\"keyword\">as</span> $fileIdentifier =&gt; $file) &#123;</div><div class=\"line\">            composerRequire($fileIdentifier, $file);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> $loader;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面已经是完整的<code>getLoader</code>方法了。</p>\n<p><code>autoload_files.php</code>文件格式如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// $vendorDir = 'someDir';</span></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'0e6d7bf4a5811bfa5cf40c5ccd6fae6a'</span> =&gt; $vendorDir . <span class=\"string\">'/symfony/polyfill-mbstring/bootstrap.php'</span>,</div><div class=\"line\">    <span class=\"string\">'2cffec82183ee1cea088009cef9a6fc3'</span> =&gt; $vendorDir . <span class=\"string\">'/ezyang/htmlpurifier/library/HTMLPurifier.composer.php'</span>,</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>至此，composer的自动加载已经基本介绍完毕。需要指出的是，<code>ComposerAutoloaderInit</code>和<code>ComposerStaticInit</code>其实是有SHA值的，我的如下：<code>ComposerAutoloaderInit863a9fe54c36c8e7444b35fbf849f660</code>、<code>ComposerStaticInit863a9fe54c36c8e7444b35fbf849f660</code>，文中为了方便将其删除。</p>\n","site":{"data":{}},"excerpt":"<p>autoload将我们从require的痛苦中解救出来，但是简单的autoload是如何一步步构建起庞大的应用的呢？Composer作为PHP的一款优秀的依赖管理工具，又是如何进行自动加载的呢？本文以YII2下的Composer为例，解析Composer源码，一起看看Composer的autoload艺术。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#autoload\">__autoload</a></li>\n<li><a href=\"#splautoloadregister\">spl_autoload_register</a></li>\n<li><a href=\"#composer%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD\">Composer的自动加载</a><ul>\n<li><a href=\"#classmap%E6%98%A0%E5%B0%84\">classMap映射</a></li>\n<li><a href=\"#psr-0-%E5%92%8C-psr-4\">psr-0 和 psr-4</a></li>\n<li><a href=\"#static%E7%B1%BB%E5%9E%8B\">static类型</a></li>\n<li><a href=\"#files%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6\">files类型自动加载文件</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"autoload\"></a></p>\n<h2 id=\"autoload\"><a href=\"#autoload\" class=\"headerlink\" title=\"__autoload\"></a>__autoload</h2><p>在很多PHP教材中，都采用<a href=\"http://php.net/manual/zh/function.autoload.php\" target=\"_blank\" rel=\"external\">__autoload函数</a>讲解类的自动加载，举例如下：</p>\n<p>在<code>test.php</code>文件中定义<code>Test</code>类，该类在初始化时会输出一句话：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * test.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'hi, there'</span> . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>index.php</code>文件中定义<code>__autoload</code>函数，在当前目录下搜索类的同名文件，然后包含该文件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * index.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span><span class=\"params\">($className)</span> </span>&#123;</div><div class=\"line\">    $fileName = <span class=\"string\">'./'</span> . strtolower($className) . <span class=\"string\">'.php'</span>;</div><div class=\"line\">    <span class=\"keyword\">include_once</span>($fileName);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> Test();</div></pre></td></tr></table></figure>\n<p>运行<code>index.php</code>文件，可以看到输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ php -f index.php</div><div class=\"line\">hi, there</div></pre></td></tr></table></figure>\n<p>但是，<strong>__autoload函数在PHP 7.2.0中已经不赞成使用。</strong></p>\n<p>使用该方法的缺点是：<strong><code>__autoload</code>只可以定义一次</strong>。假如A的项目引用了B的代码，A和B采用两种<code>__autoload</code>，就会产生冲突，尤其是使用了很多插件的时候，合并<code>__autoload</code>会很麻烦。</p>\n<p><a name=\"splautoloadregister\"></a></p>\n<h2 id=\"spl-autoload-register\"><a href=\"#spl-autoload-register\" class=\"headerlink\" title=\"spl_autoload_register\"></a>spl_autoload_register</h2><blockquote>\n<p>如果需要多条 autoload 函数，<a href=\"http://php.net/manual/zh/function.spl-autoload-register.php\" target=\"_blank\" rel=\"external\">spl_autoload_register()</a> 满足了此类需求。 它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下， __autoload() 只可以定义一次。</p>\n</blockquote>\n<p>在之前的基础上，新增一个文件<code>test2.class.php</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * index2.class.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test2</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'hi, there, too'</span> . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改<code>index.php</code>文件，为<code>test2.class.php</code>建立加载函数：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * index.php</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autoloader_1</span><span class=\"params\">($className)</span> </span>&#123;</div><div class=\"line\">    $fileName = <span class=\"string\">'./'</span> . strtolower($className) . <span class=\"string\">'.php'</span>;</div><div class=\"line\">    <span class=\"keyword\">include_once</span>($fileName);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autoloader_2</span><span class=\"params\">($className)</span> </span>&#123;</div><div class=\"line\">    $fileName = <span class=\"string\">'./'</span> . strtolower($className) . <span class=\"string\">'.class.php'</span>;</div><div class=\"line\">    <span class=\"keyword\">include_once</span>($fileName);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">spl_autoload_register(<span class=\"string\">'autoloader_1'</span>);</div><div class=\"line\">spl_autoload_register(<span class=\"string\">'autoloader_2'</span>);</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">$test2 = <span class=\"keyword\">new</span> Test2();</div></pre></td></tr></table></figure>\n<p>运行<code>index.php</code>文件，有如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ php -f index.php</div><div class=\"line\">hi, there</div><div class=\"line\">PHP Warning:  include_once(./test2.php): failed to open stream: No such file or directory in /Users/ycgambo/Documents/test/php/index.php on line 9</div><div class=\"line\">PHP Stack trace:</div><div class=\"line\">PHP   1. &#123;main&#125;() /Users/ycgambo/Documents/test/php/index.php:0</div><div class=\"line\">PHP   2. spl_autoload_call() /Users/ycgambo/Documents/test/php/index.php:21</div><div class=\"line\">PHP   3. autoloader_1() /Users/ycgambo/Documents/test/php/index.php:0</div><div class=\"line\">PHP Warning:  include_once(): Failed opening &apos;./test2.php&apos; for inclusion (include_path=&apos;.:&apos;) in /Users/ycgambo/Documents/test/php/index.php on line 9</div><div class=\"line\">PHP Stack trace:</div><div class=\"line\">PHP   1. &#123;main&#125;() /Users/ycgambo/Documents/test/php/index.php:0</div><div class=\"line\">PHP   2. spl_autoload_call() /Users/ycgambo/Documents/test/php/index.php:21</div><div class=\"line\">PHP   3. autoloader_1() /Users/ycgambo/Documents/test/php/index.php:0</div><div class=\"line\">hi, there, too</div></pre></td></tr></table></figure>\n<p>通过第一行和最后一行的输出可知，PHP如期加载了两个类文件。在加载<code>Test2</code>类时，PHP按照加载函数注册的顺序，优先尝试搜索<code>test2.php</code>，但没有找到，所以报了<code>Warning</code>。</p>\n<p><a name=\"composer%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD\"></a></p>\n<h2 id=\"Composer的自动加载\"><a href=\"#Composer的自动加载\" class=\"headerlink\" title=\"Composer的自动加载\"></a>Composer的自动加载</h2><p>Composer作为PHP优秀的依赖管理工具，它的身影出现在许多著名框架中，因此有必要学习一下Composer是如何实现自动加载的。</p>\n<p><code>ComposerAutoloaderInit</code>是Composer的入口文件，主要保存了一个<code>ClassLoader</code>实例用来协助加载依赖：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $loader;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该<code>ClassLoader</code>实例会在一开始就被初始化，然后注册<code>autoload</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        $loader-&gt;register(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>register</code>方法向<code>spl_autoload_register</code>函数注册了自身的<code>loadClass</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span><span class=\"params\">($prepend = false)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        spl_autoload_register(<span class=\"keyword\">array</span>(<span class=\"keyword\">$this</span>, <span class=\"string\">'loadClass'</span>), <span class=\"keyword\">true</span>, $prepend);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>loadClass</code>方法用来加载文件。该方法先调用<code>findFile</code>方法寻找文件，再调用<code>includeFile</code>函数加载文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadClass</span><span class=\"params\">($class)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($file = <span class=\"keyword\">$this</span>-&gt;findFile($class)) &#123;</div><div class=\"line\">            includeFile($file);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findFile</span><span class=\"params\">($class)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ... 按照类名返回合适的文件名，具体代码下面会讲</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> $file;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 隔离文件，防止加载的文件访问$this/self</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">includeFile</span><span class=\"params\">($file)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">include</span> $file;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>了解了加载流程（如何注册<code>spl_autoload_register</code>），接下来了解一下这些类文件是如何保存以及被加载的（<code>spl_autoload_register</code>的加载机制）。</p>\n<p><a name=\"classmap%E6%98%A0%E5%B0%84\"></a></p>\n<h3 id=\"classMap映射\"><a href=\"#classMap映射\" class=\"headerlink\" title=\"classMap映射\"></a>classMap映射</h3><p>classMap类型是一个数组，它保存了类名到文件名的映射，这份映射关系保存在<code>autoload_classmap.php</code>文件中，格式如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// $vendorDir = 'someDir';</span></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'File_Iterator'</span> =&gt; $vendorDir . <span class=\"string\">'/phpunit/php-file-iterator/src/Iterator.php'</span>,</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p><code>ComposerAutoloaderInit</code>在注册<code>ClassLoader</code>时，会读取<code>autoload_classmap.php</code>文件，<code>ClassLoader</code>将映射保存在自己的<code>classMap</code>中：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        $classMap = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_classmap.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($classMap) &#123;</div><div class=\"line\">            $loader-&gt;addClassMap($classMap);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>ClassLoader</code>在加载时，会首先在这份映射中搜索：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findFile</span><span class=\"params\">($class)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;classMap[$class])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;classMap[$class];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"psr-0-%E5%92%8C-psr-4\"></a></p>\n<h3 id=\"psr-0-和-psr-4\"><a href=\"#psr-0-和-psr-4\" class=\"headerlink\" title=\"psr-0 和 psr-4\"></a>psr-0 和 psr-4</h3><p>其实，<code>ClassLoader</code>的<code>classMap</code>中不止保存了<code>classMap</code>类型的映射，还保存了适合<code>psr-0</code>和<code>psr-4</code>两种自动加载规范的映射：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_namespaces.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">            $loader-&gt;set($namespace, $path);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_psr4.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">            $loader-&gt;setPsr4($namespace, $path);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        $classMap = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_classmap.php'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($classMap) &#123;</div><div class=\"line\">            $loader-&gt;addClassMap($classMap);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>与<code>classMap</code>不同的是，这两种规范定义的是命名空间的映射，可以将一个命名空间映射到一个目录，<code>spl_autoload_register</code>函数在解析命名空间下符合规范要求的类名时，可以自动解析到目录下对应的文件，因此可以不必为每一个类都指定对应的文件名。</p>\n<p><code>classMap</code>类型的映射，每一个类都映射到文件，繁琐的对应关系，但也比较直接：<br><img src=\"/images/PHP/syntax_autoloadCountOff/composer_classmap.png\" alt=\"classMap类型\"></p>\n<p><code>psr-4</code>类型的映射（<code>psr-0</code>与之类似），点到为止，十分简洁，但需要遵循规范：<br><img src=\"/images/PHP/syntax_autoloadCountOff/composer_psr4.png\" alt=\"psr-4类型\"></p>\n<p><a name=\"static%E7%B1%BB%E5%9E%8B\"></a></p>\n<h3 id=\"static类型\"><a href=\"#static类型\" class=\"headerlink\" title=\"static类型\"></a>static类型</h3><p>先上代码，看一看static类型是在哪里引入的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== <span class=\"keyword\">self</span>::$loader) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$loader;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        spl_autoload_register(<span class=\"keyword\">array</span>(<span class=\"string\">'ComposerAutoloaderInit'</span>, <span class=\"string\">'loadClassLoader'</span>), <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">self</span>::$loader = $loader = <span class=\"keyword\">new</span> \\Composer\\Autoload\\ClassLoader();</div><div class=\"line\">        spl_autoload_unregister(<span class=\"keyword\">array</span>(<span class=\"string\">'ComposerAutoloaderInit'</span>, <span class=\"string\">'loadClassLoader'</span>));</div><div class=\"line\"></div><div class=\"line\">        $useStaticLoader = PHP_VERSION_ID &gt;= <span class=\"number\">50600</span> &amp;&amp; !defined(<span class=\"string\">'HHVM_VERSION'</span>) &amp;&amp; (!function_exists(<span class=\"string\">'zend_loader_file_encoded'</span>) || !zend_loader_file_encoded());</div><div class=\"line\">        <span class=\"keyword\">if</span> ($useStaticLoader) &#123;</div><div class=\"line\">            <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_static.php'</span>;</div><div class=\"line\"></div><div class=\"line\">            call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_namespaces.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">                $loader-&gt;set($namespace, $path);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_psr4.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">                $loader-&gt;setPsr4($namespace, $path);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            $classMap = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_classmap.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($classMap) &#123;</div><div class=\"line\">                $loader-&gt;addClassMap($classMap);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>static静态类型和上面几种类型用<code>if-else</code>结构隔开，目的很明显，要么用<code>if</code>加载，要么用<code>else</code>加载，为什么要这么做呢？</p>\n<p>原来，如果php的版本大于5.6 ,composer会进行加载优化，减少大量映射的加载时间：</p>\n<blockquote>\n<p>Optimized the autoloader initialization using static loading on PHP 5.6 and above, this reduces the load time for large classmaps to almost nothing</p>\n</blockquote>\n<p>不同于上面简单定义的数组，<code>autoload_static.php</code>文件定义的是一个<code>ComposerStaticInit</code>类:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Composer</span>\\<span class=\"title\">Autoload</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerStaticInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $files = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $prefixLengthsPsr4 = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $prefixDirsPsr4 = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $prefixesPsr0 = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $classMap = <span class=\"keyword\">array</span> (</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInitializer</span><span class=\"params\">(ClassLoader $loader)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>ComposerStaticInit</code>类保存了上面各种类型的映射的静态副本，此外还定义了一个初始化方法<code>getInitializer</code>。前面<code>ComposerAutoloaderInit</code>调用这个方法时，传入了一个<code>ClassLoader</code>：</p>\n<pre><code>call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));\n</code></pre><p>之后再在<code>getInitializer</code>方法中巧妙利用<code>Closure::bind</code>操作访问<code>ClassLoader</code>的私有变量，达到静态加载的目的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerStaticInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInitializer</span><span class=\"params\">(ClassLoader $loader)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> \\Closure::bind(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($loader)</span> </span>&#123;</div><div class=\"line\">            $loader-&gt;prefixLengthsPsr4 = ComposerStaticInit::$prefixLengthsPsr4;</div><div class=\"line\">            $loader-&gt;prefixDirsPsr4 = ComposerStaticInit::$prefixDirsPsr4;</div><div class=\"line\">            $loader-&gt;prefixesPsr0 = ComposerStaticInit::$prefixesPsr0;</div><div class=\"line\">            $loader-&gt;classMap = ComposerStaticInit::$classMap;</div><div class=\"line\"></div><div class=\"line\">        &#125;, <span class=\"keyword\">null</span>, ClassLoader::class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这些变量在ClassLoader定义如下</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// PSR-4</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $prefixLengthsPsr4 = <span class=\"keyword\">array</span>();</div><div class=\"line\">    <span class=\"keyword\">private</span> $prefixDirsPsr4 = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// PSR-0</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $prefixesPsr0 = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> $classMap = <span class=\"keyword\">array</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"files%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6\"></a></p>\n<h3 id=\"files类型自动加载文件\"><a href=\"#files类型自动加载文件\" class=\"headerlink\" title=\"files类型自动加载文件\"></a>files类型自动加载文件</h3><p>上面的几种类型都属于类的自动加载，files类型则是在<code>ClassLoader</code>注册好<code>loadClass</code>后就立即包含进所指定的文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposerAutoloaderInit</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLoader</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== <span class=\"keyword\">self</span>::$loader) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$loader;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        spl_autoload_register(<span class=\"keyword\">array</span>(<span class=\"string\">'ComposerAutoloaderInit'</span>, <span class=\"string\">'loadClassLoader'</span>), <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">self</span>::$loader = $loader = <span class=\"keyword\">new</span> \\Composer\\Autoload\\ClassLoader();</div><div class=\"line\">        spl_autoload_unregister(<span class=\"keyword\">array</span>(<span class=\"string\">'ComposerAutoloaderInit'</span>, <span class=\"string\">'loadClassLoader'</span>));</div><div class=\"line\"></div><div class=\"line\">        $useStaticLoader = PHP_VERSION_ID &gt;= <span class=\"number\">50600</span> &amp;&amp; !defined(<span class=\"string\">'HHVM_VERSION'</span>) &amp;&amp; (!function_exists(<span class=\"string\">'zend_loader_file_encoded'</span>) || !zend_loader_file_encoded());</div><div class=\"line\">        <span class=\"keyword\">if</span> ($useStaticLoader) &#123;</div><div class=\"line\">            <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_static.php'</span>;</div><div class=\"line\"></div><div class=\"line\">            call_user_func(\\Composer\\Autoload\\ComposerStaticInit::getInitializer($loader));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_namespaces.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">                $loader-&gt;set($namespace, $path);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            $map = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_psr4.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> ($map <span class=\"keyword\">as</span> $namespace =&gt; $path) &#123;</div><div class=\"line\">                $loader-&gt;setPsr4($namespace, $path);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            $classMap = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_classmap.php'</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($classMap) &#123;</div><div class=\"line\">                $loader-&gt;addClassMap($classMap);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        $loader-&gt;register(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> ($useStaticLoader) &#123;</div><div class=\"line\">            $includeFiles = Composer\\Autoload\\ComposerStaticInit::$files;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $includeFiles = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/autoload_files.php'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> ($includeFiles <span class=\"keyword\">as</span> $fileIdentifier =&gt; $file) &#123;</div><div class=\"line\">            composerRequire($fileIdentifier, $file);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> $loader;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面已经是完整的<code>getLoader</code>方法了。</p>\n<p><code>autoload_files.php</code>文件格式如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// $vendorDir = 'someDir';</span></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'0e6d7bf4a5811bfa5cf40c5ccd6fae6a'</span> =&gt; $vendorDir . <span class=\"string\">'/symfony/polyfill-mbstring/bootstrap.php'</span>,</div><div class=\"line\">    <span class=\"string\">'2cffec82183ee1cea088009cef9a6fc3'</span> =&gt; $vendorDir . <span class=\"string\">'/ezyang/htmlpurifier/library/HTMLPurifier.composer.php'</span>,</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>至此，composer的自动加载已经基本介绍完毕。需要指出的是，<code>ComposerAutoloaderInit</code>和<code>ComposerStaticInit</code>其实是有SHA值的，我的如下：<code>ComposerAutoloaderInit863a9fe54c36c8e7444b35fbf849f660</code>、<code>ComposerStaticInit863a9fe54c36c8e7444b35fbf849f660</code>，文中为了方便将其删除。</p>"},{"title":"PHP观察者模式与发布订阅模式","date":"2017-10-27T16:00:00.000Z","_content":"\n>观察者模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。\n\n发布订阅模式实现了相同的功能，所以很多人认为观察者模式和发布订阅模式是一种A和A的别名的关系，其实不然：\n- 观察者模式\n    + 被观察者中注册了许多观察者，因此被观察者需要关心有哪些观察者需要注册\n    + 观察者拥有被观察者的引用，因此观察者可以读取、检测甚至更改被观察者的状态\n- 发布订阅模式\n    + 发布者不关心有多少订阅者，不关心他们的状态，只用通知消息中心即可\n    + 订阅者不关心谁是发布者，不关心发布者的状态，只用订阅消息中心即可\n\n观察者模式更像是一种监督：嘿，观察者，你得盯着我，如果发现什么问题，帮我处理一下。\n发布订阅模式则像一种广播体系：我们收听一些频道内容，而不去关心谁在维护这些频道内容。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [观察者模式](#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F)\n    - [观察者和被观察者接口](#%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3)\n    - [构造被观察者](#%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85)\n    - [构造观察者](#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85)\n    - [测试与说明](#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E)\n- [发布订阅模式](#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F)\n    - [消息中心](#%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83)\n    - [发布者和订阅者](#%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85)\n    - [测试与说明](#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"></a>\n## 观察者模式\n\n<a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\"></a>\n### 观察者和被观察者接口\n\n```php\ninterface Observer\n{\n    function update(Observable $observee);\n}\n\ninterface Observable\n{\n    function attach(Observer $observer);\n    function detach(Observer $obesrver);\n    function notify();\n}\n```\n\n观察者接收被观察者并调用自身的update方法进行适当更新；被观察者利用attach注册观察者，detach解除某个注册，notify通知观察者进行更新。\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n### 构造被观察者\n\n```php\nclass MyObservee implements Observable\n{\n    private $_observers = [];\n    public $val = 0;\n\n    function attach(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    function detach(Observer $observer)\n    {\n        foreach ($this->_observers as $_index => $_observer) {\n            if ($_observer === $observer) {\n                unset($this->_observers[$_index]);\n                $this->_observers = array_values($this->_observers);\n                return;\n            }\n        }\n    }\n\n    function notify()\n    {\n        foreach ($this->_observers as $_observer) {\n            $_observer->update($this);\n        }\n    }\n}\n```\n\n注意notify方法中传递了$this。被观察者的val属性是为了测试使用，以便解释观察者是如何修改被观察者的状态的。\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n### 构造观察者\n\n```php\nclass MyObserver_1 implements Observer\n{\n    function update(Observable $observee)\n    {\n        $observee->val += 1;\n    }\n}\n\nclass MyObserver_2 implements Observer\n{\n    function update(Observable $observee)\n    {\n        $observee->val += 2;\n    }\n}\n```\n\n<a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\"></a>\n### 测试与说明\n\n```php\n$observee = new MyObservee();\n$observer = new MyObserver_1();\n\n$observee->attach($observer);\n$observee->attach(new MyObserver_2());\n$observee->notify();\necho $observee->val;    // 3\n\n$observee->detach($observer);\n$observee->notify();\necho $observee->val;    // 5\n```\n\n观察者模式中，观察者和被观察者存在一定的耦合，被观察者在请求观察者监控自己的同时，也赋予了观察者修改自身的能力。有时候这种副作用是我们想要的，比如设置一些flag，但同时也会为debug造成不便。\n\n<a name=\"%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"></a>\n## 发布订阅模式\n\n<a name=\"%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\"></a>\n### 消息中心\n\n```php\nclass MessageCenter\n{\n    // stores all the topic that can be subscribed\n    private static $_topics = [];\n\n    public static function publish($topic, $data = null)\n    {\n        if (isset(self::$_topics[$topic])) {\n            foreach (self::$_topics[$topic] as $_subscriber) {\n                call_user_func($_subscriber, $data);\n            }\n        }\n    }\n\n    public static function subscribe($topic, $callback)\n    {\n        if (!is_callable($callback)) {\n            return false;\n        }\n\n        if (!isset(self::$_topics[$topic])) {\n            self::$_topics[$topic] = [];\n        }\n        self::$_topics[$topic][] = $callback;\n        return true;\n    }\n\n    public static function getAllTopics()\n    {\n        return array_keys(self::$_topics);\n    }\n}\n```\n\n消息中心将消息频道保存在topics静态数组中，同时开发以下三个接口：\n- publish为发布者提供服务，供发布者发布消息，并允许发布者为消息附加解释数据\n- subscribe为订阅者服务，供其订阅服务，并要求其注册回调，以在有新消息时可以通知订阅者\n- getAllTopics获取当前存在的订阅服务\n\n在publish时，发布者不需要关心订阅者状态，因此消息中心在有订阅者存在时通知订阅者，没有订阅者存在时直接忽略这条publish。\n\n<a name=\"%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\"></a>\n### 发布者和订阅者\n\n我们虚构一个发布者Hollywood和一个MovieFans。MovieFans很喜欢Hollywood，我们为他订阅了Hoolywood的一些推送。\n\n```php\nclass Hollywood\n{\n    public function publishMovie()\n    {\n        $data = new \\stdClass();\n        $data->message = 'new movie comes!';\n        MessageCenter::publish('Hollywood\\movie', $data);\n    }\n\n    public function sayHelloToFans()\n    {\n        MessageCenter::publish('Hollywood\\hello');\n    }\n}\n\nclass MovieFans\n{\n    public function __construct()\n    {\n        MessageCenter::subscribe('Hollywood\\movie', [__CLASS__, 'checkMovie']);\n        MessageCenter::subscribe('Hollywood\\hello', [__CLASS__, 'feelHappy']);\n\n    }\n\n    public function checkMovie($data) {\n        echo 'WOW. Hollywood relased a new movie and said: ' . $data->message . PHP_EOL;\n    }\n\n    public function feelHappy() {\n        echo 'OH MY GOD ! ! ! Hollywood just said hello to me ! ! !' . PHP_EOL;\n    }\n}\n```\n\n<a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\"></a>\n### 测试与说明\n\n```php\n$hollywood = new Hollywood();\n$movieFans = new movieFans();\n$hollywood->publishMovie();\n$hollywood->sayHelloToFans();\n// echo: WOW. Hollywood relased a new movie and said: new movie comes!\n// echo: OH MY GOD ! ! ! Hollywood just said hello to me ! ! !\n```\n\nHollywood推送了一些消息，他的粉丝MovieFans订阅了这些服务，很开心能收到通知。\n\n更进一步，Hollywood可能有很多部门都在向同一个频道发布更新，这时只要消息中心进行一定的权限认证，保证这些推送是正规有效的，那么我们的订阅者则可以获得Hollywood的推送服务，而不必关心这些推送来自哪个部门。\n\n通过发布订阅模式，我们解除了发布者和订阅者之间的依赖，他们成为相互独立的对象。发布者专心做自己的事情，然后推送更新到消息中心；订阅者只需在消息中心订阅想要的服务，在其更新时便能收到消息中心的通知。","source":"_posts/PHP/designPattern_observerVsPublishSubscribe.md","raw":"---\ntitle: PHP观察者模式与发布订阅模式\ndate: 2017/10/28\ncategories: PHP\ntags:\n    - PHP\n    - 设计模式\n---\n\n>观察者模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。\n\n发布订阅模式实现了相同的功能，所以很多人认为观察者模式和发布订阅模式是一种A和A的别名的关系，其实不然：\n- 观察者模式\n    + 被观察者中注册了许多观察者，因此被观察者需要关心有哪些观察者需要注册\n    + 观察者拥有被观察者的引用，因此观察者可以读取、检测甚至更改被观察者的状态\n- 发布订阅模式\n    + 发布者不关心有多少订阅者，不关心他们的状态，只用通知消息中心即可\n    + 订阅者不关心谁是发布者，不关心发布者的状态，只用订阅消息中心即可\n\n观察者模式更像是一种监督：嘿，观察者，你得盯着我，如果发现什么问题，帮我处理一下。\n发布订阅模式则像一种广播体系：我们收听一些频道内容，而不去关心谁在维护这些频道内容。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [观察者模式](#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F)\n    - [观察者和被观察者接口](#%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3)\n    - [构造被观察者](#%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85)\n    - [构造观察者](#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85)\n    - [测试与说明](#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E)\n- [发布订阅模式](#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F)\n    - [消息中心](#%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83)\n    - [发布者和订阅者](#%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85)\n    - [测试与说明](#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"></a>\n## 观察者模式\n\n<a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\"></a>\n### 观察者和被观察者接口\n\n```php\ninterface Observer\n{\n    function update(Observable $observee);\n}\n\ninterface Observable\n{\n    function attach(Observer $observer);\n    function detach(Observer $obesrver);\n    function notify();\n}\n```\n\n观察者接收被观察者并调用自身的update方法进行适当更新；被观察者利用attach注册观察者，detach解除某个注册，notify通知观察者进行更新。\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n### 构造被观察者\n\n```php\nclass MyObservee implements Observable\n{\n    private $_observers = [];\n    public $val = 0;\n\n    function attach(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    function detach(Observer $observer)\n    {\n        foreach ($this->_observers as $_index => $_observer) {\n            if ($_observer === $observer) {\n                unset($this->_observers[$_index]);\n                $this->_observers = array_values($this->_observers);\n                return;\n            }\n        }\n    }\n\n    function notify()\n    {\n        foreach ($this->_observers as $_observer) {\n            $_observer->update($this);\n        }\n    }\n}\n```\n\n注意notify方法中传递了$this。被观察者的val属性是为了测试使用，以便解释观察者是如何修改被观察者的状态的。\n\n<a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a>\n### 构造观察者\n\n```php\nclass MyObserver_1 implements Observer\n{\n    function update(Observable $observee)\n    {\n        $observee->val += 1;\n    }\n}\n\nclass MyObserver_2 implements Observer\n{\n    function update(Observable $observee)\n    {\n        $observee->val += 2;\n    }\n}\n```\n\n<a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\"></a>\n### 测试与说明\n\n```php\n$observee = new MyObservee();\n$observer = new MyObserver_1();\n\n$observee->attach($observer);\n$observee->attach(new MyObserver_2());\n$observee->notify();\necho $observee->val;    // 3\n\n$observee->detach($observer);\n$observee->notify();\necho $observee->val;    // 5\n```\n\n观察者模式中，观察者和被观察者存在一定的耦合，被观察者在请求观察者监控自己的同时，也赋予了观察者修改自身的能力。有时候这种副作用是我们想要的，比如设置一些flag，但同时也会为debug造成不便。\n\n<a name=\"%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"></a>\n## 发布订阅模式\n\n<a name=\"%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\"></a>\n### 消息中心\n\n```php\nclass MessageCenter\n{\n    // stores all the topic that can be subscribed\n    private static $_topics = [];\n\n    public static function publish($topic, $data = null)\n    {\n        if (isset(self::$_topics[$topic])) {\n            foreach (self::$_topics[$topic] as $_subscriber) {\n                call_user_func($_subscriber, $data);\n            }\n        }\n    }\n\n    public static function subscribe($topic, $callback)\n    {\n        if (!is_callable($callback)) {\n            return false;\n        }\n\n        if (!isset(self::$_topics[$topic])) {\n            self::$_topics[$topic] = [];\n        }\n        self::$_topics[$topic][] = $callback;\n        return true;\n    }\n\n    public static function getAllTopics()\n    {\n        return array_keys(self::$_topics);\n    }\n}\n```\n\n消息中心将消息频道保存在topics静态数组中，同时开发以下三个接口：\n- publish为发布者提供服务，供发布者发布消息，并允许发布者为消息附加解释数据\n- subscribe为订阅者服务，供其订阅服务，并要求其注册回调，以在有新消息时可以通知订阅者\n- getAllTopics获取当前存在的订阅服务\n\n在publish时，发布者不需要关心订阅者状态，因此消息中心在有订阅者存在时通知订阅者，没有订阅者存在时直接忽略这条publish。\n\n<a name=\"%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\"></a>\n### 发布者和订阅者\n\n我们虚构一个发布者Hollywood和一个MovieFans。MovieFans很喜欢Hollywood，我们为他订阅了Hoolywood的一些推送。\n\n```php\nclass Hollywood\n{\n    public function publishMovie()\n    {\n        $data = new \\stdClass();\n        $data->message = 'new movie comes!';\n        MessageCenter::publish('Hollywood\\movie', $data);\n    }\n\n    public function sayHelloToFans()\n    {\n        MessageCenter::publish('Hollywood\\hello');\n    }\n}\n\nclass MovieFans\n{\n    public function __construct()\n    {\n        MessageCenter::subscribe('Hollywood\\movie', [__CLASS__, 'checkMovie']);\n        MessageCenter::subscribe('Hollywood\\hello', [__CLASS__, 'feelHappy']);\n\n    }\n\n    public function checkMovie($data) {\n        echo 'WOW. Hollywood relased a new movie and said: ' . $data->message . PHP_EOL;\n    }\n\n    public function feelHappy() {\n        echo 'OH MY GOD ! ! ! Hollywood just said hello to me ! ! !' . PHP_EOL;\n    }\n}\n```\n\n<a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\"></a>\n### 测试与说明\n\n```php\n$hollywood = new Hollywood();\n$movieFans = new movieFans();\n$hollywood->publishMovie();\n$hollywood->sayHelloToFans();\n// echo: WOW. Hollywood relased a new movie and said: new movie comes!\n// echo: OH MY GOD ! ! ! Hollywood just said hello to me ! ! !\n```\n\nHollywood推送了一些消息，他的粉丝MovieFans订阅了这些服务，很开心能收到通知。\n\n更进一步，Hollywood可能有很多部门都在向同一个频道发布更新，这时只要消息中心进行一定的权限认证，保证这些推送是正规有效的，那么我们的订阅者则可以获得Hollywood的推送服务，而不必关心这些推送来自哪个部门。\n\n通过发布订阅模式，我们解除了发布者和订阅者之间的依赖，他们成为相互独立的对象。发布者专心做自己的事情，然后推送更新到消息中心；订阅者只需在消息中心订阅想要的服务，在其更新时便能收到消息中心的通知。","slug":"PHP/designPattern_observerVsPublishSubscribe","published":1,"updated":"2017-11-13T04:45:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1lp000n2ys80qea816g","content":"<blockquote>\n<p>观察者模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。</p>\n</blockquote>\n<p>发布订阅模式实现了相同的功能，所以很多人认为观察者模式和发布订阅模式是一种A和A的别名的关系，其实不然：</p>\n<ul>\n<li>观察者模式<ul>\n<li>被观察者中注册了许多观察者，因此被观察者需要关心有哪些观察者需要注册</li>\n<li>观察者拥有被观察者的引用，因此观察者可以读取、检测甚至更改被观察者的状态</li>\n</ul>\n</li>\n<li>发布订阅模式<ul>\n<li>发布者不关心有多少订阅者，不关心他们的状态，只用通知消息中心即可</li>\n<li>订阅者不关心谁是发布者，不关心发布者的状态，只用订阅消息中心即可</li>\n</ul>\n</li>\n</ul>\n<p>观察者模式更像是一种监督：嘿，观察者，你得盯着我，如果发现什么问题，帮我处理一下。<br>发布订阅模式则像一种广播体系：我们收听一些频道内容，而不去关心谁在维护这些频道内容。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">观察者模式</a><ul>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\">观察者和被观察者接口</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\">构造被观察者</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\">构造观察者</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\">测试与说明</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\">发布订阅模式</a><ul>\n<li><a href=\"#%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\">消息中心</a></li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\">发布者和订阅者</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\">测试与说明</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"></a></p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p><a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\"></a></p>\n<h3 id=\"观察者和被观察者接口\"><a href=\"#观察者和被观察者接口\" class=\"headerlink\" title=\"观察者和被观察者接口\"></a>观察者和被观察者接口</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $obesrver)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>观察者接收被观察者并调用自身的update方法进行适当更新；被观察者利用attach注册观察者，detach解除某个注册，notify通知观察者进行更新。</p>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h3 id=\"构造被观察者\"><a href=\"#构造被观察者\" class=\"headerlink\" title=\"构造被观察者\"></a>构造被观察者</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObservee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers = [];</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers[] = $observer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $_index =&gt; $_observer) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($_observer === $observer) &#123;</div><div class=\"line\">                <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_observers[$_index]);</div><div class=\"line\">                <span class=\"keyword\">$this</span>-&gt;_observers = array_values(<span class=\"keyword\">$this</span>-&gt;_observers);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $_observer) &#123;</div><div class=\"line\">            $_observer-&gt;update(<span class=\"keyword\">$this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意notify方法中传递了$this。被观察者的val属性是为了测试使用，以便解释观察者是如何修改被观察者的状态的。</p>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h3 id=\"构造观察者\"><a href=\"#构造观察者\" class=\"headerlink\" title=\"构造观察者\"></a>构造观察者</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver_1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $observee-&gt;val += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver_2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $observee-&gt;val += <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\"></a></p>\n<h3 id=\"测试与说明\"><a href=\"#测试与说明\" class=\"headerlink\" title=\"测试与说明\"></a>测试与说明</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$observee = <span class=\"keyword\">new</span> MyObservee();</div><div class=\"line\">$observer = <span class=\"keyword\">new</span> MyObserver_1();</div><div class=\"line\"></div><div class=\"line\">$observee-&gt;attach($observer);</div><div class=\"line\">$observee-&gt;attach(<span class=\"keyword\">new</span> MyObserver_2());</div><div class=\"line\">$observee-&gt;notify();</div><div class=\"line\"><span class=\"keyword\">echo</span> $observee-&gt;val;    <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\">$observee-&gt;detach($observer);</div><div class=\"line\">$observee-&gt;notify();</div><div class=\"line\"><span class=\"keyword\">echo</span> $observee-&gt;val;    <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>观察者模式中，观察者和被观察者存在一定的耦合，被观察者在请求观察者监控自己的同时，也赋予了观察者修改自身的能力。有时候这种副作用是我们想要的，比如设置一些flag，但同时也会为debug造成不便。</p>\n<p><a name=\"%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"></a></p>\n<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p><a name=\"%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\"></a></p>\n<h3 id=\"消息中心\"><a href=\"#消息中心\" class=\"headerlink\" title=\"消息中心\"></a>消息中心</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageCenter</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// stores all the topic that can be subscribed</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_topics = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publish</span><span class=\"params\">($topic, $data = null)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_topics[$topic])) &#123;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">self</span>::$_topics[$topic] <span class=\"keyword\">as</span> $_subscriber) &#123;</div><div class=\"line\">                call_user_func($_subscriber, $data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span><span class=\"params\">($topic, $callback)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!is_callable($callback)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_topics[$topic])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_topics[$topic] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>::$_topics[$topic][] = $callback;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAllTopics</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> array_keys(<span class=\"keyword\">self</span>::$_topics);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>消息中心将消息频道保存在topics静态数组中，同时开发以下三个接口：</p>\n<ul>\n<li>publish为发布者提供服务，供发布者发布消息，并允许发布者为消息附加解释数据</li>\n<li>subscribe为订阅者服务，供其订阅服务，并要求其注册回调，以在有新消息时可以通知订阅者</li>\n<li>getAllTopics获取当前存在的订阅服务</li>\n</ul>\n<p>在publish时，发布者不需要关心订阅者状态，因此消息中心在有订阅者存在时通知订阅者，没有订阅者存在时直接忽略这条publish。</p>\n<p><a name=\"%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\"></a></p>\n<h3 id=\"发布者和订阅者\"><a href=\"#发布者和订阅者\" class=\"headerlink\" title=\"发布者和订阅者\"></a>发布者和订阅者</h3><p>我们虚构一个发布者Hollywood和一个MovieFans。MovieFans很喜欢Hollywood，我们为他订阅了Hoolywood的一些推送。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hollywood</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publishMovie</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $data = <span class=\"keyword\">new</span> \\stdClass();</div><div class=\"line\">        $data-&gt;message = <span class=\"string\">'new movie comes!'</span>;</div><div class=\"line\">        MessageCenter::publish(<span class=\"string\">'Hollywood\\movie'</span>, $data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHelloToFans</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        MessageCenter::publish(<span class=\"string\">'Hollywood\\hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieFans</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        MessageCenter::subscribe(<span class=\"string\">'Hollywood\\movie'</span>, [<span class=\"keyword\">__CLASS__</span>, <span class=\"string\">'checkMovie'</span>]);</div><div class=\"line\">        MessageCenter::subscribe(<span class=\"string\">'Hollywood\\hello'</span>, [<span class=\"keyword\">__CLASS__</span>, <span class=\"string\">'feelHappy'</span>]);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMovie</span><span class=\"params\">($data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'WOW. Hollywood relased a new movie and said: '</span> . $data-&gt;message . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">feelHappy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'OH MY GOD ! ! ! Hollywood just said hello to me ! ! !'</span> . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\"></a></p>\n<h3 id=\"测试与说明-1\"><a href=\"#测试与说明-1\" class=\"headerlink\" title=\"测试与说明\"></a>测试与说明</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hollywood = <span class=\"keyword\">new</span> Hollywood();</div><div class=\"line\">$movieFans = <span class=\"keyword\">new</span> movieFans();</div><div class=\"line\">$hollywood-&gt;publishMovie();</div><div class=\"line\">$hollywood-&gt;sayHelloToFans();</div><div class=\"line\"><span class=\"comment\">// echo: WOW. Hollywood relased a new movie and said: new movie comes!</span></div><div class=\"line\"><span class=\"comment\">// echo: OH MY GOD ! ! ! Hollywood just said hello to me ! ! !</span></div></pre></td></tr></table></figure>\n<p>Hollywood推送了一些消息，他的粉丝MovieFans订阅了这些服务，很开心能收到通知。</p>\n<p>更进一步，Hollywood可能有很多部门都在向同一个频道发布更新，这时只要消息中心进行一定的权限认证，保证这些推送是正规有效的，那么我们的订阅者则可以获得Hollywood的推送服务，而不必关心这些推送来自哪个部门。</p>\n<p>通过发布订阅模式，我们解除了发布者和订阅者之间的依赖，他们成为相互独立的对象。发布者专心做自己的事情，然后推送更新到消息中心；订阅者只需在消息中心订阅想要的服务，在其更新时便能收到消息中心的通知。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>观察者模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。</p>\n</blockquote>\n<p>发布订阅模式实现了相同的功能，所以很多人认为观察者模式和发布订阅模式是一种A和A的别名的关系，其实不然：</p>\n<ul>\n<li>观察者模式<ul>\n<li>被观察者中注册了许多观察者，因此被观察者需要关心有哪些观察者需要注册</li>\n<li>观察者拥有被观察者的引用，因此观察者可以读取、检测甚至更改被观察者的状态</li>\n</ul>\n</li>\n<li>发布订阅模式<ul>\n<li>发布者不关心有多少订阅者，不关心他们的状态，只用通知消息中心即可</li>\n<li>订阅者不关心谁是发布者，不关心发布者的状态，只用订阅消息中心即可</li>\n</ul>\n</li>\n</ul>\n<p>观察者模式更像是一种监督：嘿，观察者，你得盯着我，如果发现什么问题，帮我处理一下。<br>发布订阅模式则像一种广播体系：我们收听一些频道内容，而不去关心谁在维护这些频道内容。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">观察者模式</a><ul>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\">观察者和被观察者接口</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\">构造被观察者</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\">构造观察者</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\">测试与说明</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\">发布订阅模式</a><ul>\n<li><a href=\"#%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\">消息中心</a></li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\">发布者和订阅者</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\">测试与说明</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"></a></p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p><a name=\"%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3\"></a></p>\n<h3 id=\"观察者和被观察者接口\"><a href=\"#观察者和被观察者接口\" class=\"headerlink\" title=\"观察者和被观察者接口\"></a>观察者和被观察者接口</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $obesrver)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>观察者接收被观察者并调用自身的update方法进行适当更新；被观察者利用attach注册观察者，detach解除某个注册，notify通知观察者进行更新。</p>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h3 id=\"构造被观察者\"><a href=\"#构造被观察者\" class=\"headerlink\" title=\"构造被观察者\"></a>构造被观察者</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObservee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers = [];</div><div class=\"line\">    <span class=\"keyword\">public</span> $val = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers[] = $observer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $_index =&gt; $_observer) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($_observer === $observer) &#123;</div><div class=\"line\">                <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_observers[$_index]);</div><div class=\"line\">                <span class=\"keyword\">$this</span>-&gt;_observers = array_values(<span class=\"keyword\">$this</span>-&gt;_observers);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $_observer) &#123;</div><div class=\"line\">            $_observer-&gt;update(<span class=\"keyword\">$this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意notify方法中传递了$this。被观察者的val属性是为了测试使用，以便解释观察者是如何修改被观察者的状态的。</p>\n<p><a name=\"%E6%9E%84%E9%80%A0%E8%A7%82%E5%AF%9F%E8%80%85\"></a></p>\n<h3 id=\"构造观察者\"><a href=\"#构造观察者\" class=\"headerlink\" title=\"构造观察者\"></a>构造观察者</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver_1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $observee-&gt;val += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver_2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">(Observable $observee)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $observee-&gt;val += <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E\"></a></p>\n<h3 id=\"测试与说明\"><a href=\"#测试与说明\" class=\"headerlink\" title=\"测试与说明\"></a>测试与说明</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$observee = <span class=\"keyword\">new</span> MyObservee();</div><div class=\"line\">$observer = <span class=\"keyword\">new</span> MyObserver_1();</div><div class=\"line\"></div><div class=\"line\">$observee-&gt;attach($observer);</div><div class=\"line\">$observee-&gt;attach(<span class=\"keyword\">new</span> MyObserver_2());</div><div class=\"line\">$observee-&gt;notify();</div><div class=\"line\"><span class=\"keyword\">echo</span> $observee-&gt;val;    <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\">$observee-&gt;detach($observer);</div><div class=\"line\">$observee-&gt;notify();</div><div class=\"line\"><span class=\"keyword\">echo</span> $observee-&gt;val;    <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>观察者模式中，观察者和被观察者存在一定的耦合，被观察者在请求观察者监控自己的同时，也赋予了观察者修改自身的能力。有时候这种副作用是我们想要的，比如设置一些flag，但同时也会为debug造成不便。</p>\n<p><a name=\"%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"></a></p>\n<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p><a name=\"%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83\"></a></p>\n<h3 id=\"消息中心\"><a href=\"#消息中心\" class=\"headerlink\" title=\"消息中心\"></a>消息中心</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageCenter</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// stores all the topic that can be subscribed</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_topics = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publish</span><span class=\"params\">($topic, $data = null)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_topics[$topic])) &#123;</div><div class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">self</span>::$_topics[$topic] <span class=\"keyword\">as</span> $_subscriber) &#123;</div><div class=\"line\">                call_user_func($_subscriber, $data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span><span class=\"params\">($topic, $callback)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!is_callable($callback)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$_topics[$topic])) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_topics[$topic] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>::$_topics[$topic][] = $callback;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAllTopics</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> array_keys(<span class=\"keyword\">self</span>::$_topics);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>消息中心将消息频道保存在topics静态数组中，同时开发以下三个接口：</p>\n<ul>\n<li>publish为发布者提供服务，供发布者发布消息，并允许发布者为消息附加解释数据</li>\n<li>subscribe为订阅者服务，供其订阅服务，并要求其注册回调，以在有新消息时可以通知订阅者</li>\n<li>getAllTopics获取当前存在的订阅服务</li>\n</ul>\n<p>在publish时，发布者不需要关心订阅者状态，因此消息中心在有订阅者存在时通知订阅者，没有订阅者存在时直接忽略这条publish。</p>\n<p><a name=\"%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85\"></a></p>\n<h3 id=\"发布者和订阅者\"><a href=\"#发布者和订阅者\" class=\"headerlink\" title=\"发布者和订阅者\"></a>发布者和订阅者</h3><p>我们虚构一个发布者Hollywood和一个MovieFans。MovieFans很喜欢Hollywood，我们为他订阅了Hoolywood的一些推送。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hollywood</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publishMovie</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        $data = <span class=\"keyword\">new</span> \\stdClass();</div><div class=\"line\">        $data-&gt;message = <span class=\"string\">'new movie comes!'</span>;</div><div class=\"line\">        MessageCenter::publish(<span class=\"string\">'Hollywood\\movie'</span>, $data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHelloToFans</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        MessageCenter::publish(<span class=\"string\">'Hollywood\\hello'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieFans</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        MessageCenter::subscribe(<span class=\"string\">'Hollywood\\movie'</span>, [<span class=\"keyword\">__CLASS__</span>, <span class=\"string\">'checkMovie'</span>]);</div><div class=\"line\">        MessageCenter::subscribe(<span class=\"string\">'Hollywood\\hello'</span>, [<span class=\"keyword\">__CLASS__</span>, <span class=\"string\">'feelHappy'</span>]);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMovie</span><span class=\"params\">($data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'WOW. Hollywood relased a new movie and said: '</span> . $data-&gt;message . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">feelHappy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'OH MY GOD ! ! ! Hollywood just said hello to me ! ! !'</span> . PHP_EOL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a name=\"%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%AF%B4%E6%98%8E-1\"></a></p>\n<h3 id=\"测试与说明-1\"><a href=\"#测试与说明-1\" class=\"headerlink\" title=\"测试与说明\"></a>测试与说明</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hollywood = <span class=\"keyword\">new</span> Hollywood();</div><div class=\"line\">$movieFans = <span class=\"keyword\">new</span> movieFans();</div><div class=\"line\">$hollywood-&gt;publishMovie();</div><div class=\"line\">$hollywood-&gt;sayHelloToFans();</div><div class=\"line\"><span class=\"comment\">// echo: WOW. Hollywood relased a new movie and said: new movie comes!</span></div><div class=\"line\"><span class=\"comment\">// echo: OH MY GOD ! ! ! Hollywood just said hello to me ! ! !</span></div></pre></td></tr></table></figure>\n<p>Hollywood推送了一些消息，他的粉丝MovieFans订阅了这些服务，很开心能收到通知。</p>\n<p>更进一步，Hollywood可能有很多部门都在向同一个频道发布更新，这时只要消息中心进行一定的权限认证，保证这些推送是正规有效的，那么我们的订阅者则可以获得Hollywood的推送服务，而不必关心这些推送来自哪个部门。</p>\n<p>通过发布订阅模式，我们解除了发布者和订阅者之间的依赖，他们成为相互独立的对象。发布者专心做自己的事情，然后推送更新到消息中心；订阅者只需在消息中心订阅想要的服务，在其更新时便能收到消息中心的通知。</p>"},{"title":"PHP Socket","date":"2017-11-09T16:11:34.000Z","_content":"\n挂念PHP的Socket扩展好几天了，只看不练，心里痒痒，于是决定写一下代码。本文实现了一款简单的在线聊天系统，对理解socket通信很有好处。Socket还需要一些Http知识，我这里就不补充了。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [支持单一连接的服务端](#%E6%94%AF%E6%8C%81%E5%8D%95%E4%B8%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF)\n- [支持多个连接的服务端](#%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF)\n- [服务端调度客户端通信](#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B0%83%E5%BA%A6%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E6%94%AF%E6%8C%81%E5%8D%95%E4%B8%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\"></a>\n## 支持单一连接的服务端\n\n这里参考[Socket example: Simple TCP/IP server](http://php.net/manual/en/sockets.examples.php)构建了一个简单的服务器，把客户端发来的消息返回给客户端，它只能支持单一连接。当客户端A接入服务端时，其它客户端的接入会排队，当客户端A断开连接后，其它客户端才能得到响应。\n\n完整代码如下：\n\n```php\n/* 设置脚本时间限制为无限 */\nset_time_limit(0);\n/* 自动刷新输出缓存 */\nob_implicit_flush();\n\n/* 设置监听地址和端口 */\n$address = '0.0.0.0';\n$port = 10000;\n\n/* 创建socket */\nif (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 绑定socket监听的地址和端口 */\nif (socket_bind($sock, $address, $port) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 监听socket时，允许5个socket排队等待 */\nif (socket_listen($sock, 5) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 无限循环，依次监听请求 */\ndo {\n    /* 此处会阻塞直到$sock接收到消息，为其创建socket */\n    if (($msgsock = socket_accept($sock)) === false) {\n        echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n        break;\n    }\n\n    /* 客户端连入，显示欢迎信息 */\n    $msg = \"Welcome to the PHP Test Server.\" . PHP_EOL;\n    socket_write($msgsock, $msg, strlen($msg));\n\n    do {\n        /* 读取消息 */\n        if (false === ($buf = socket_read($msgsock, 2048, PHP_NORMAL_READ))) {\n            echo socket_strerror(socket_last_error($msgsock)) . PHP_EOL;\n            break 2;    // 系统异常，中断服务\n        }\n        if (!$buf = trim($buf)) {\n            continue;   // 忽略空消息\n        }\n        if ($buf == 'quit') {\n            break;      // 客户端请求中断通信\n        }\n\n        /* 向客户端回显消息，并在服务端输出 */\n        $talkback = \"You said '$buf'\" . PHP_EOL;\n        socket_write($msgsock, $talkback, strlen($talkback));\n        echo \"$buf\" . PHP_EOL;\n    } while (true);\n\n    /* 关闭当前消息通道 */\n    socket_close($msgsock);\n} while (true);\n\n/* 停止socket监听 */\nsocket_close($sock);\n```\n\n循环中创建的msgsock和循环外部的socket是两种不同的资源类型，具体可参看[socket_accept](http://php.net/manual/en/function.socket-accept.php)\n\n此时在服务端启动脚本：\n\n    $ php -f socket_server.php\n\n然后用另一台机器作为客户端，请求通信：\n\n```\n$ telnet host port\nTrying 119.28.24.83...\nConnected to hongkong.\nEscape character is '^]'.\nWelcome to the PHP Test Server.\n\n```\n\n之后客户端的消息会被服务端处理并回显，服务端也会输出该消息。客户端输入`quit`即可中断通信，如果另一台客户端B也连接了服务，但处于排队状态，则可以看到B之前发送的消息得到了回显。\n\n至此，我们成功构建了一个简单的服务，测试了socket通信。接下来，我们让服务端同时处理多个连接。\n\n<a name=\"%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\"></a>\n## 支持多个连接的服务端\n\n该功能主要利用了[socket_select函数](http://php.net/manual/en/function.socket-select.php)。**该函数接收读、写、异常三个socket数组，观察它们对应状态在指定时间内是否发生改变，将它们的值修改为那些相应状态改变的socket，返回改变的socket的数目。**\n\n完整代码如下：\n\n```php\n/* 设置脚本时间限制为无限 */\nset_time_limit(0);\n/* 自动刷新输出缓存 */\nob_implicit_flush();\n\n/* 设置监听地址和端口 */\n$address = '0.0.0.0';\n$port = 10000;\n\n/* 创建socket */\nif (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 绑定socket监听的地址和端口 */\nif (socket_bind($sock, $address, $port) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 监听socket时，允许5个socket排队等待 */\nif (socket_listen($sock, 5) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n$clients = array();     // 保存所有客户端\n\n/* 无限循环，不断观察通信 */\ndo {\n    $reads = $clients;      // 所有客户端\n    $reads[] = $sock;       // 当前socket\n\n    /* 阻塞直到有通信可读 */\n    if (socket_select($reads, $write = NULL, $except = NULL, 0) == 0) {\n        continue;\n    }\n\n    /* 该通信是主socket，说明有新客户端连入 */\n    if (in_array($sock, $reads)) {\n        /* 查看活跃的通信，为其创建socket */\n        if (($msgsock = socket_accept($sock)) === false) {\n            echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n            break;\n        }\n\n        /* 客户端连入，显示欢迎信息 */\n        $msg = \"Welcome to the PHP Test Server.\" . PHP_EOL;\n        socket_write($msgsock, $msg, strlen($msg));\n\n        /* 跟踪新客户端 */\n        $clients[] = $msgsock;\n\n        /* 新连接已建立，继续观察通信 */\n        continue;\n    }\n\n    /* 该通信是普通消息，遍历所有客户端，查看被截获的通信 */\n    foreach ($clients as $id => $client) {\n        if (in_array($client, $reads)) {\n            /* 读取消息 */\n            if (false === ($buf = socket_read($client, 2048, PHP_NORMAL_READ))) {\n                echo socket_strerror(socket_last_error($client)) . PHP_EOL;\n                break 2;    // 系统异常，中断服务\n            }\n            if (!$buf = trim($buf)) {\n                continue;   // 忽略空消息\n            }\n            if ($buf == 'quit') {\n                /* 客户端请求中断通信 */\n                socket_close($client);  // 关闭当前消息通道\n                unset($clients[$id]);   // 清理活跃客户端记录\n                break;\n            }\n\n            /* 向客户端回显消息，并在服务端输出 */\n            $talkback = \"You said '$buf'\" . PHP_EOL;\n            socket_write($msgsock, $talkback, strlen($talkback));\n            echo \"$buf\" . PHP_EOL;\n        }\n    }\n} while (true);\n\n/* 停止socket监听 */\nsocket_close($sock);\n```\n\n这个实现主要利用了以下几点：\n\n- 利用对`socket_select`函数对`reads`数组的修改，实现了区分新连接和普通消息。\n- 将所有客户端保存在数组中，监控他们是否活跃，利用遍历找到活跃通信。\n- 采用`socket_select`阻塞程序，可以防止`socket_accept`阻塞而阻断其它客户端。\n\n在服务端启动脚本后，就可以在不同的客户端连接服务端进行测试了，不再赘述。\n\n<a name=\"%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B0%83%E5%BA%A6%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1\"></a>\n## 服务端调度客户端通信\n\n上面的实现，客户端都只能和服务端通信，这里只需稍加扩展，客户端之间就能互相通信了。\n\n有以下几种思路：\n- 点对点通信，客户端指定对方id，服务端处理后投放到该id\n- 群组通信，采用一定的分组策略，将客户端划分到不同的组中，通信时指定组id，向该组广播，或同时指定组id和客户端id单点通信\n\n这里实现一个简单的点对点：\n\n```php\n/* 设置脚本时间限制为无限 */\nset_time_limit(0);\n/* 自动刷新输出缓存 */\nob_implicit_flush();\n\n/* 设置监听地址和端口 */\n$address = '0.0.0.0';\n$port = 10000;\n\n/* 创建socket */\nif (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 绑定socket监听的地址和端口 */\nif (socket_bind($sock, $address, $port) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 监听socket时，允许5个socket排队等待 */\nif (socket_listen($sock, 5) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n$clients = array();     // 保存所有客户端\n$users = array();       // 保存用户uid\n$users_rvt = array();   // users数组的倒排索引\n$to = array();          // 保存用户当前通信伙伴\n\n/* 无限循环，不断观察通信 */\ndo {\n    $reads = $clients;      // 所有客户端\n    $reads[] = $sock;       // 当前socket\n\n    /* 阻塞直到有通信可读 */\n    if (socket_select($reads, $write = NULL, $except = NULL, 0) == 0) {\n        continue;\n    }\n\n    /* 该通信是主socket，说明有新客户端连入 */\n    if (in_array($sock, $reads)) {\n        /* 查看活跃的通信，为其创建socket */\n        if (($msgsock = socket_accept($sock)) === false) {\n            echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n            break;\n        }\n\n        /* 客户端连入，显示欢迎信息 */\n        $msg = \"Welcome to the PHP Test Server.\" . PHP_EOL;\n        socket_write($msgsock, $msg, strlen($msg));\n\n        /* 跟踪新客户端 */\n        $next_index = 'client_' . count($clients);  // 数字索引unset后，索引重排会导致消息发错socket\n        $clients[$next_index] = $msgsock;\n\n        /* 新连接已建立，继续观察通信 */\n        continue;\n    }\n\n    /* 该通信是普通消息，遍历所有客户端，查看被截获的通信 */\n    foreach ($clients as $id => $client) {\n        if (in_array($client, $reads)) {\n            $talkback = '';\n            /* 读取消息 */\n            if (false === ($buf = socket_read($client, 2048, PHP_NORMAL_READ))) {\n                echo socket_strerror(socket_last_error($client)) . PHP_EOL;\n                break 2;    // 系统异常，中断服务\n            }\n            if (!$buf = trim($buf)) {\n                continue;   // 忽略空消息\n            }\n            if (substr($buf, 0, 3) == 'uid' && ($uid = substr($buf, 4))) {\n                if (!isset($users_rvt[$uid])) {\n                    $users[$id] = $uid;\n                    $users_rvt[$uid] = $id;\n                    $to[$id] = $uid;\n                    $talkback = 'OK! please set your partner(yourself as default).' . PHP_EOL;\n                } else {\n                    $talkback = 'uid already in use.' . PHP_EOL;\n                }\n                socket_write($client, $talkback, strlen($talkback));\n                continue;\n            } elseif (substr($buf, 0, 3) == 'to:' && ($partner = substr($buf, 4))) {\n                $to[$id] = $partner;\n                $talkback = 'OK! please send your message.' . PHP_EOL;\n                socket_write($client, $talkback, strlen($talkback));\n                continue;\n            } elseif ($buf == 'quit') {\n                /* 客户端请求中断通信 */\n                socket_close($client);  // 关闭当前消息通道\n                unset($clients[$id]);   // 清理活跃客户端记录\n                unset($users[$id]);     // 用户下线\n                break;\n            }\n\n            /* 转发消息 */\n            if (isset($users[$id])) {\n                if (isset($to[$id])) {\n                    if (isset($users_rvt[$to[$id]]) && ($client_rcv = $users_rvt[$to[$id]]) && isset($users[$client_rcv]) && isset($clients[$client_rcv])) {\n                        $sendto = $users[$id] . \" said '$buf'\" . PHP_EOL;\n                        echo $users[$id] . ' sent a message to ' . $to[$id] . PHP_EOL;\n                        socket_send($clients[$users_rvt[$to[$id]]], $sendto, strlen($sendto), MSG_EOF);\n                    } else {\n                        $talkback = 'user ' . $to[$id] . ' is off-line now.' . PHP_EOL;\n                    }\n                } else {\n                    $talkback = 'please set your partner. to: xxx' . PHP_EOL;\n                }\n            } else {\n                $talkback = 'please set your uid. uid xxx' . PHP_EOL;\n            }\n            if (!empty($talkback)) {\n                socket_write($client, $talkback, strlen($talkback));\n            }\n        }\n    }\n} while (true);\n\n/* 停止socket监听 */\nsocket_close($sock);\n```\n\n以上代码简单实现了点对点通信功能，要注意一点：\n\n`clients`数组的索引变成了字符串索引，目的是为了避免客户端下线时`unset`操作导致索引重排，进而使`users_rvt`所保存的状态过期，可能出现”串台“现象\n\n测试如下：\n\n先在服务端启动脚本；\n\n客户端A连接服务，设置自己的uid，尝试与234通信：\n![234OffLine](/images/PHP/extension_socket/234OffLine.png)\n\n然后启动客户端B，A再次尝试通信，成功发送 *hello again*：\n![234Up](/images/PHP/extension_socket/234Up.png)\n\n关闭客户端B，A再次尝试通信：\n![234OffLineAgain](/images/PHP/extension_socket/234OffLineAgain.png)\n\n服务端通知：\n![severNotify](/images/PHP/extension_socket/severNotify.png)","source":"_posts/PHP/extension_socket.md","raw":"---\ntitle: PHP Socket\ndate: 2017/11/10 00:11:34\ncategories: PHP\ntags:\n    - PHP\n    - Extension\n    - Socket\n---\n\n挂念PHP的Socket扩展好几天了，只看不练，心里痒痒，于是决定写一下代码。本文实现了一款简单的在线聊天系统，对理解socket通信很有好处。Socket还需要一些Http知识，我这里就不补充了。\n\n目录：\n<!-- MarkdownTOC -->\n\n- [支持单一连接的服务端](#%E6%94%AF%E6%8C%81%E5%8D%95%E4%B8%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF)\n- [支持多个连接的服务端](#%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF)\n- [服务端调度客户端通信](#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B0%83%E5%BA%A6%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1)\n\n<!-- /MarkdownTOC -->\n\n<!-- more -->\n\n> 转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a>\n\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<a name=\"%E6%94%AF%E6%8C%81%E5%8D%95%E4%B8%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\"></a>\n## 支持单一连接的服务端\n\n这里参考[Socket example: Simple TCP/IP server](http://php.net/manual/en/sockets.examples.php)构建了一个简单的服务器，把客户端发来的消息返回给客户端，它只能支持单一连接。当客户端A接入服务端时，其它客户端的接入会排队，当客户端A断开连接后，其它客户端才能得到响应。\n\n完整代码如下：\n\n```php\n/* 设置脚本时间限制为无限 */\nset_time_limit(0);\n/* 自动刷新输出缓存 */\nob_implicit_flush();\n\n/* 设置监听地址和端口 */\n$address = '0.0.0.0';\n$port = 10000;\n\n/* 创建socket */\nif (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 绑定socket监听的地址和端口 */\nif (socket_bind($sock, $address, $port) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 监听socket时，允许5个socket排队等待 */\nif (socket_listen($sock, 5) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 无限循环，依次监听请求 */\ndo {\n    /* 此处会阻塞直到$sock接收到消息，为其创建socket */\n    if (($msgsock = socket_accept($sock)) === false) {\n        echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n        break;\n    }\n\n    /* 客户端连入，显示欢迎信息 */\n    $msg = \"Welcome to the PHP Test Server.\" . PHP_EOL;\n    socket_write($msgsock, $msg, strlen($msg));\n\n    do {\n        /* 读取消息 */\n        if (false === ($buf = socket_read($msgsock, 2048, PHP_NORMAL_READ))) {\n            echo socket_strerror(socket_last_error($msgsock)) . PHP_EOL;\n            break 2;    // 系统异常，中断服务\n        }\n        if (!$buf = trim($buf)) {\n            continue;   // 忽略空消息\n        }\n        if ($buf == 'quit') {\n            break;      // 客户端请求中断通信\n        }\n\n        /* 向客户端回显消息，并在服务端输出 */\n        $talkback = \"You said '$buf'\" . PHP_EOL;\n        socket_write($msgsock, $talkback, strlen($talkback));\n        echo \"$buf\" . PHP_EOL;\n    } while (true);\n\n    /* 关闭当前消息通道 */\n    socket_close($msgsock);\n} while (true);\n\n/* 停止socket监听 */\nsocket_close($sock);\n```\n\n循环中创建的msgsock和循环外部的socket是两种不同的资源类型，具体可参看[socket_accept](http://php.net/manual/en/function.socket-accept.php)\n\n此时在服务端启动脚本：\n\n    $ php -f socket_server.php\n\n然后用另一台机器作为客户端，请求通信：\n\n```\n$ telnet host port\nTrying 119.28.24.83...\nConnected to hongkong.\nEscape character is '^]'.\nWelcome to the PHP Test Server.\n\n```\n\n之后客户端的消息会被服务端处理并回显，服务端也会输出该消息。客户端输入`quit`即可中断通信，如果另一台客户端B也连接了服务，但处于排队状态，则可以看到B之前发送的消息得到了回显。\n\n至此，我们成功构建了一个简单的服务，测试了socket通信。接下来，我们让服务端同时处理多个连接。\n\n<a name=\"%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\"></a>\n## 支持多个连接的服务端\n\n该功能主要利用了[socket_select函数](http://php.net/manual/en/function.socket-select.php)。**该函数接收读、写、异常三个socket数组，观察它们对应状态在指定时间内是否发生改变，将它们的值修改为那些相应状态改变的socket，返回改变的socket的数目。**\n\n完整代码如下：\n\n```php\n/* 设置脚本时间限制为无限 */\nset_time_limit(0);\n/* 自动刷新输出缓存 */\nob_implicit_flush();\n\n/* 设置监听地址和端口 */\n$address = '0.0.0.0';\n$port = 10000;\n\n/* 创建socket */\nif (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 绑定socket监听的地址和端口 */\nif (socket_bind($sock, $address, $port) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 监听socket时，允许5个socket排队等待 */\nif (socket_listen($sock, 5) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n$clients = array();     // 保存所有客户端\n\n/* 无限循环，不断观察通信 */\ndo {\n    $reads = $clients;      // 所有客户端\n    $reads[] = $sock;       // 当前socket\n\n    /* 阻塞直到有通信可读 */\n    if (socket_select($reads, $write = NULL, $except = NULL, 0) == 0) {\n        continue;\n    }\n\n    /* 该通信是主socket，说明有新客户端连入 */\n    if (in_array($sock, $reads)) {\n        /* 查看活跃的通信，为其创建socket */\n        if (($msgsock = socket_accept($sock)) === false) {\n            echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n            break;\n        }\n\n        /* 客户端连入，显示欢迎信息 */\n        $msg = \"Welcome to the PHP Test Server.\" . PHP_EOL;\n        socket_write($msgsock, $msg, strlen($msg));\n\n        /* 跟踪新客户端 */\n        $clients[] = $msgsock;\n\n        /* 新连接已建立，继续观察通信 */\n        continue;\n    }\n\n    /* 该通信是普通消息，遍历所有客户端，查看被截获的通信 */\n    foreach ($clients as $id => $client) {\n        if (in_array($client, $reads)) {\n            /* 读取消息 */\n            if (false === ($buf = socket_read($client, 2048, PHP_NORMAL_READ))) {\n                echo socket_strerror(socket_last_error($client)) . PHP_EOL;\n                break 2;    // 系统异常，中断服务\n            }\n            if (!$buf = trim($buf)) {\n                continue;   // 忽略空消息\n            }\n            if ($buf == 'quit') {\n                /* 客户端请求中断通信 */\n                socket_close($client);  // 关闭当前消息通道\n                unset($clients[$id]);   // 清理活跃客户端记录\n                break;\n            }\n\n            /* 向客户端回显消息，并在服务端输出 */\n            $talkback = \"You said '$buf'\" . PHP_EOL;\n            socket_write($msgsock, $talkback, strlen($talkback));\n            echo \"$buf\" . PHP_EOL;\n        }\n    }\n} while (true);\n\n/* 停止socket监听 */\nsocket_close($sock);\n```\n\n这个实现主要利用了以下几点：\n\n- 利用对`socket_select`函数对`reads`数组的修改，实现了区分新连接和普通消息。\n- 将所有客户端保存在数组中，监控他们是否活跃，利用遍历找到活跃通信。\n- 采用`socket_select`阻塞程序，可以防止`socket_accept`阻塞而阻断其它客户端。\n\n在服务端启动脚本后，就可以在不同的客户端连接服务端进行测试了，不再赘述。\n\n<a name=\"%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B0%83%E5%BA%A6%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1\"></a>\n## 服务端调度客户端通信\n\n上面的实现，客户端都只能和服务端通信，这里只需稍加扩展，客户端之间就能互相通信了。\n\n有以下几种思路：\n- 点对点通信，客户端指定对方id，服务端处理后投放到该id\n- 群组通信，采用一定的分组策略，将客户端划分到不同的组中，通信时指定组id，向该组广播，或同时指定组id和客户端id单点通信\n\n这里实现一个简单的点对点：\n\n```php\n/* 设置脚本时间限制为无限 */\nset_time_limit(0);\n/* 自动刷新输出缓存 */\nob_implicit_flush();\n\n/* 设置监听地址和端口 */\n$address = '0.0.0.0';\n$port = 10000;\n\n/* 创建socket */\nif (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 绑定socket监听的地址和端口 */\nif (socket_bind($sock, $address, $port) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n/* 监听socket时，允许5个socket排队等待 */\nif (socket_listen($sock, 5) === false) {\n    echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n}\n\n$clients = array();     // 保存所有客户端\n$users = array();       // 保存用户uid\n$users_rvt = array();   // users数组的倒排索引\n$to = array();          // 保存用户当前通信伙伴\n\n/* 无限循环，不断观察通信 */\ndo {\n    $reads = $clients;      // 所有客户端\n    $reads[] = $sock;       // 当前socket\n\n    /* 阻塞直到有通信可读 */\n    if (socket_select($reads, $write = NULL, $except = NULL, 0) == 0) {\n        continue;\n    }\n\n    /* 该通信是主socket，说明有新客户端连入 */\n    if (in_array($sock, $reads)) {\n        /* 查看活跃的通信，为其创建socket */\n        if (($msgsock = socket_accept($sock)) === false) {\n            echo socket_strerror(socket_last_error($sock)) . PHP_EOL;\n            break;\n        }\n\n        /* 客户端连入，显示欢迎信息 */\n        $msg = \"Welcome to the PHP Test Server.\" . PHP_EOL;\n        socket_write($msgsock, $msg, strlen($msg));\n\n        /* 跟踪新客户端 */\n        $next_index = 'client_' . count($clients);  // 数字索引unset后，索引重排会导致消息发错socket\n        $clients[$next_index] = $msgsock;\n\n        /* 新连接已建立，继续观察通信 */\n        continue;\n    }\n\n    /* 该通信是普通消息，遍历所有客户端，查看被截获的通信 */\n    foreach ($clients as $id => $client) {\n        if (in_array($client, $reads)) {\n            $talkback = '';\n            /* 读取消息 */\n            if (false === ($buf = socket_read($client, 2048, PHP_NORMAL_READ))) {\n                echo socket_strerror(socket_last_error($client)) . PHP_EOL;\n                break 2;    // 系统异常，中断服务\n            }\n            if (!$buf = trim($buf)) {\n                continue;   // 忽略空消息\n            }\n            if (substr($buf, 0, 3) == 'uid' && ($uid = substr($buf, 4))) {\n                if (!isset($users_rvt[$uid])) {\n                    $users[$id] = $uid;\n                    $users_rvt[$uid] = $id;\n                    $to[$id] = $uid;\n                    $talkback = 'OK! please set your partner(yourself as default).' . PHP_EOL;\n                } else {\n                    $talkback = 'uid already in use.' . PHP_EOL;\n                }\n                socket_write($client, $talkback, strlen($talkback));\n                continue;\n            } elseif (substr($buf, 0, 3) == 'to:' && ($partner = substr($buf, 4))) {\n                $to[$id] = $partner;\n                $talkback = 'OK! please send your message.' . PHP_EOL;\n                socket_write($client, $talkback, strlen($talkback));\n                continue;\n            } elseif ($buf == 'quit') {\n                /* 客户端请求中断通信 */\n                socket_close($client);  // 关闭当前消息通道\n                unset($clients[$id]);   // 清理活跃客户端记录\n                unset($users[$id]);     // 用户下线\n                break;\n            }\n\n            /* 转发消息 */\n            if (isset($users[$id])) {\n                if (isset($to[$id])) {\n                    if (isset($users_rvt[$to[$id]]) && ($client_rcv = $users_rvt[$to[$id]]) && isset($users[$client_rcv]) && isset($clients[$client_rcv])) {\n                        $sendto = $users[$id] . \" said '$buf'\" . PHP_EOL;\n                        echo $users[$id] . ' sent a message to ' . $to[$id] . PHP_EOL;\n                        socket_send($clients[$users_rvt[$to[$id]]], $sendto, strlen($sendto), MSG_EOF);\n                    } else {\n                        $talkback = 'user ' . $to[$id] . ' is off-line now.' . PHP_EOL;\n                    }\n                } else {\n                    $talkback = 'please set your partner. to: xxx' . PHP_EOL;\n                }\n            } else {\n                $talkback = 'please set your uid. uid xxx' . PHP_EOL;\n            }\n            if (!empty($talkback)) {\n                socket_write($client, $talkback, strlen($talkback));\n            }\n        }\n    }\n} while (true);\n\n/* 停止socket监听 */\nsocket_close($sock);\n```\n\n以上代码简单实现了点对点通信功能，要注意一点：\n\n`clients`数组的索引变成了字符串索引，目的是为了避免客户端下线时`unset`操作导致索引重排，进而使`users_rvt`所保存的状态过期，可能出现”串台“现象\n\n测试如下：\n\n先在服务端启动脚本；\n\n客户端A连接服务，设置自己的uid，尝试与234通信：\n![234OffLine](/images/PHP/extension_socket/234OffLine.png)\n\n然后启动客户端B，A再次尝试通信，成功发送 *hello again*：\n![234Up](/images/PHP/extension_socket/234Up.png)\n\n关闭客户端B，A再次尝试通信：\n![234OffLineAgain](/images/PHP/extension_socket/234OffLineAgain.png)\n\n服务端通知：\n![severNotify](/images/PHP/extension_socket/severNotify.png)","slug":"PHP/extension_socket","published":1,"updated":"2017-11-13T12:32:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9z0r1lq000o2ys80y70qj0n","content":"<p>挂念PHP的Socket扩展好几天了，只看不练，心里痒痒，于是决定写一下代码。本文实现了一款简单的在线聊天系统，对理解socket通信很有好处。Socket还需要一些Http知识，我这里就不补充了。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E6%94%AF%E6%8C%81%E5%8D%95%E4%B8%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\">支持单一连接的服务端</a></li>\n<li><a href=\"#%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\">支持多个连接的服务端</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B0%83%E5%BA%A6%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1\">服务端调度客户端通信</a></li>\n</ul>\n<!-- /MarkdownTOC -->\n<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E6%94%AF%E6%8C%81%E5%8D%95%E4%B8%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\"></a></p>\n<h2 id=\"支持单一连接的服务端\"><a href=\"#支持单一连接的服务端\" class=\"headerlink\" title=\"支持单一连接的服务端\"></a>支持单一连接的服务端</h2><p>这里参考<a href=\"http://php.net/manual/en/sockets.examples.php\" target=\"_blank\" rel=\"external\">Socket example: Simple TCP/IP server</a>构建了一个简单的服务器，把客户端发来的消息返回给客户端，它只能支持单一连接。当客户端A接入服务端时，其它客户端的接入会排队，当客户端A断开连接后，其它客户端才能得到响应。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 设置脚本时间限制为无限 */</span></div><div class=\"line\">set_time_limit(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">/* 自动刷新输出缓存 */</span></div><div class=\"line\">ob_implicit_flush();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 设置监听地址和端口 */</span></div><div class=\"line\">$address = <span class=\"string\">'0.0.0.0'</span>;</div><div class=\"line\">$port = <span class=\"number\">10000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 创建socket */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 绑定socket监听的地址和端口 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_bind($sock, $address, $port) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 监听socket时，允许5个socket排队等待 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_listen($sock, <span class=\"number\">5</span>) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 无限循环，依次监听请求 */</span></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* 此处会阻塞直到$sock接收到消息，为其创建socket */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (($msgsock = socket_accept($sock)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 客户端连入，显示欢迎信息 */</span></div><div class=\"line\">    $msg = <span class=\"string\">\"Welcome to the PHP Test Server.\"</span> . PHP_EOL;</div><div class=\"line\">    socket_write($msgsock, $msg, strlen($msg));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* 读取消息 */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span> === ($buf = socket_read($msgsock, <span class=\"number\">2048</span>, PHP_NORMAL_READ))) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($msgsock)) . PHP_EOL;</div><div class=\"line\">            <span class=\"keyword\">break</span> <span class=\"number\">2</span>;    <span class=\"comment\">// 系统异常，中断服务</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!$buf = trim($buf)) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;   <span class=\"comment\">// 忽略空消息</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($buf == <span class=\"string\">'quit'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;      <span class=\"comment\">// 客户端请求中断通信</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 向客户端回显消息，并在服务端输出 */</span></div><div class=\"line\">        $talkback = <span class=\"string\">\"You said '$buf'\"</span> . PHP_EOL;</div><div class=\"line\">        socket_write($msgsock, $talkback, strlen($talkback));</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"$buf\"</span> . PHP_EOL;</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 关闭当前消息通道 */</span></div><div class=\"line\">    socket_close($msgsock);</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 停止socket监听 */</span></div><div class=\"line\">socket_close($sock);</div></pre></td></tr></table></figure>\n<p>循环中创建的msgsock和循环外部的socket是两种不同的资源类型，具体可参看<a href=\"http://php.net/manual/en/function.socket-accept.php\" target=\"_blank\" rel=\"external\">socket_accept</a></p>\n<p>此时在服务端启动脚本：</p>\n<pre><code>$ php -f socket_server.php\n</code></pre><p>然后用另一台机器作为客户端，请求通信：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ telnet host port</div><div class=\"line\">Trying 119.28.24.83...</div><div class=\"line\">Connected to hongkong.</div><div class=\"line\">Escape character is &apos;^]&apos;.</div><div class=\"line\">Welcome to the PHP Test Server.</div></pre></td></tr></table></figure>\n<p>之后客户端的消息会被服务端处理并回显，服务端也会输出该消息。客户端输入<code>quit</code>即可中断通信，如果另一台客户端B也连接了服务，但处于排队状态，则可以看到B之前发送的消息得到了回显。</p>\n<p>至此，我们成功构建了一个简单的服务，测试了socket通信。接下来，我们让服务端同时处理多个连接。</p>\n<p><a name=\"%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\"></a></p>\n<h2 id=\"支持多个连接的服务端\"><a href=\"#支持多个连接的服务端\" class=\"headerlink\" title=\"支持多个连接的服务端\"></a>支持多个连接的服务端</h2><p>该功能主要利用了<a href=\"http://php.net/manual/en/function.socket-select.php\" target=\"_blank\" rel=\"external\">socket_select函数</a>。<strong>该函数接收读、写、异常三个socket数组，观察它们对应状态在指定时间内是否发生改变，将它们的值修改为那些相应状态改变的socket，返回改变的socket的数目。</strong></p>\n<p>完整代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 设置脚本时间限制为无限 */</span></div><div class=\"line\">set_time_limit(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">/* 自动刷新输出缓存 */</span></div><div class=\"line\">ob_implicit_flush();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 设置监听地址和端口 */</span></div><div class=\"line\">$address = <span class=\"string\">'0.0.0.0'</span>;</div><div class=\"line\">$port = <span class=\"number\">10000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 创建socket */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 绑定socket监听的地址和端口 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_bind($sock, $address, $port) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 监听socket时，允许5个socket排队等待 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_listen($sock, <span class=\"number\">5</span>) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$clients = <span class=\"keyword\">array</span>();     <span class=\"comment\">// 保存所有客户端</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 无限循环，不断观察通信 */</span></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    $reads = $clients;      <span class=\"comment\">// 所有客户端</span></div><div class=\"line\">    $reads[] = $sock;       <span class=\"comment\">// 当前socket</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 阻塞直到有通信可读 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (socket_select($reads, $write = <span class=\"keyword\">NULL</span>, $except = <span class=\"keyword\">NULL</span>, <span class=\"number\">0</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 该通信是主socket，说明有新客户端连入 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (in_array($sock, $reads)) &#123;</div><div class=\"line\">        <span class=\"comment\">/* 查看活跃的通信，为其创建socket */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (($msgsock = socket_accept($sock)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 客户端连入，显示欢迎信息 */</span></div><div class=\"line\">        $msg = <span class=\"string\">\"Welcome to the PHP Test Server.\"</span> . PHP_EOL;</div><div class=\"line\">        socket_write($msgsock, $msg, strlen($msg));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 跟踪新客户端 */</span></div><div class=\"line\">        $clients[] = $msgsock;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 新连接已建立，继续观察通信 */</span></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 该通信是普通消息，遍历所有客户端，查看被截获的通信 */</span></div><div class=\"line\">    <span class=\"keyword\">foreach</span> ($clients <span class=\"keyword\">as</span> $id =&gt; $client) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($client, $reads)) &#123;</div><div class=\"line\">            <span class=\"comment\">/* 读取消息 */</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span> === ($buf = socket_read($client, <span class=\"number\">2048</span>, PHP_NORMAL_READ))) &#123;</div><div class=\"line\">                <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($client)) . PHP_EOL;</div><div class=\"line\">                <span class=\"keyword\">break</span> <span class=\"number\">2</span>;    <span class=\"comment\">// 系统异常，中断服务</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!$buf = trim($buf)) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;   <span class=\"comment\">// 忽略空消息</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($buf == <span class=\"string\">'quit'</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">/* 客户端请求中断通信 */</span></div><div class=\"line\">                socket_close($client);  <span class=\"comment\">// 关闭当前消息通道</span></div><div class=\"line\">                <span class=\"keyword\">unset</span>($clients[$id]);   <span class=\"comment\">// 清理活跃客户端记录</span></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* 向客户端回显消息，并在服务端输出 */</span></div><div class=\"line\">            $talkback = <span class=\"string\">\"You said '$buf'\"</span> . PHP_EOL;</div><div class=\"line\">            socket_write($msgsock, $talkback, strlen($talkback));</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"$buf\"</span> . PHP_EOL;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 停止socket监听 */</span></div><div class=\"line\">socket_close($sock);</div></pre></td></tr></table></figure>\n<p>这个实现主要利用了以下几点：</p>\n<ul>\n<li>利用对<code>socket_select</code>函数对<code>reads</code>数组的修改，实现了区分新连接和普通消息。</li>\n<li>将所有客户端保存在数组中，监控他们是否活跃，利用遍历找到活跃通信。</li>\n<li>采用<code>socket_select</code>阻塞程序，可以防止<code>socket_accept</code>阻塞而阻断其它客户端。</li>\n</ul>\n<p>在服务端启动脚本后，就可以在不同的客户端连接服务端进行测试了，不再赘述。</p>\n<p><a name=\"%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B0%83%E5%BA%A6%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1\"></a></p>\n<h2 id=\"服务端调度客户端通信\"><a href=\"#服务端调度客户端通信\" class=\"headerlink\" title=\"服务端调度客户端通信\"></a>服务端调度客户端通信</h2><p>上面的实现，客户端都只能和服务端通信，这里只需稍加扩展，客户端之间就能互相通信了。</p>\n<p>有以下几种思路：</p>\n<ul>\n<li>点对点通信，客户端指定对方id，服务端处理后投放到该id</li>\n<li>群组通信，采用一定的分组策略，将客户端划分到不同的组中，通信时指定组id，向该组广播，或同时指定组id和客户端id单点通信</li>\n</ul>\n<p>这里实现一个简单的点对点：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 设置脚本时间限制为无限 */</span></div><div class=\"line\">set_time_limit(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">/* 自动刷新输出缓存 */</span></div><div class=\"line\">ob_implicit_flush();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 设置监听地址和端口 */</span></div><div class=\"line\">$address = <span class=\"string\">'0.0.0.0'</span>;</div><div class=\"line\">$port = <span class=\"number\">10000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 创建socket */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 绑定socket监听的地址和端口 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_bind($sock, $address, $port) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 监听socket时，允许5个socket排队等待 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_listen($sock, <span class=\"number\">5</span>) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$clients = <span class=\"keyword\">array</span>();     <span class=\"comment\">// 保存所有客户端</span></div><div class=\"line\">$users = <span class=\"keyword\">array</span>();       <span class=\"comment\">// 保存用户uid</span></div><div class=\"line\">$users_rvt = <span class=\"keyword\">array</span>();   <span class=\"comment\">// users数组的倒排索引</span></div><div class=\"line\">$to = <span class=\"keyword\">array</span>();          <span class=\"comment\">// 保存用户当前通信伙伴</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 无限循环，不断观察通信 */</span></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    $reads = $clients;      <span class=\"comment\">// 所有客户端</span></div><div class=\"line\">    $reads[] = $sock;       <span class=\"comment\">// 当前socket</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 阻塞直到有通信可读 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (socket_select($reads, $write = <span class=\"keyword\">NULL</span>, $except = <span class=\"keyword\">NULL</span>, <span class=\"number\">0</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 该通信是主socket，说明有新客户端连入 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (in_array($sock, $reads)) &#123;</div><div class=\"line\">        <span class=\"comment\">/* 查看活跃的通信，为其创建socket */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (($msgsock = socket_accept($sock)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 客户端连入，显示欢迎信息 */</span></div><div class=\"line\">        $msg = <span class=\"string\">\"Welcome to the PHP Test Server.\"</span> . PHP_EOL;</div><div class=\"line\">        socket_write($msgsock, $msg, strlen($msg));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 跟踪新客户端 */</span></div><div class=\"line\">        $next_index = <span class=\"string\">'client_'</span> . count($clients);  <span class=\"comment\">// 数字索引unset后，索引重排会导致消息发错socket</span></div><div class=\"line\">        $clients[$next_index] = $msgsock;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 新连接已建立，继续观察通信 */</span></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 该通信是普通消息，遍历所有客户端，查看被截获的通信 */</span></div><div class=\"line\">    <span class=\"keyword\">foreach</span> ($clients <span class=\"keyword\">as</span> $id =&gt; $client) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($client, $reads)) &#123;</div><div class=\"line\">            $talkback = <span class=\"string\">''</span>;</div><div class=\"line\">            <span class=\"comment\">/* 读取消息 */</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span> === ($buf = socket_read($client, <span class=\"number\">2048</span>, PHP_NORMAL_READ))) &#123;</div><div class=\"line\">                <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($client)) . PHP_EOL;</div><div class=\"line\">                <span class=\"keyword\">break</span> <span class=\"number\">2</span>;    <span class=\"comment\">// 系统异常，中断服务</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!$buf = trim($buf)) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;   <span class=\"comment\">// 忽略空消息</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (substr($buf, <span class=\"number\">0</span>, <span class=\"number\">3</span>) == <span class=\"string\">'uid'</span> &amp;&amp; ($uid = substr($buf, <span class=\"number\">4</span>))) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($users_rvt[$uid])) &#123;</div><div class=\"line\">                    $users[$id] = $uid;</div><div class=\"line\">                    $users_rvt[$uid] = $id;</div><div class=\"line\">                    $to[$id] = $uid;</div><div class=\"line\">                    $talkback = <span class=\"string\">'OK! please set your partner(yourself as default).'</span> . PHP_EOL;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $talkback = <span class=\"string\">'uid already in use.'</span> . PHP_EOL;</div><div class=\"line\">                &#125;</div><div class=\"line\">                socket_write($client, $talkback, strlen($talkback));</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">elseif</span> (substr($buf, <span class=\"number\">0</span>, <span class=\"number\">3</span>) == <span class=\"string\">'to:'</span> &amp;&amp; ($partner = substr($buf, <span class=\"number\">4</span>))) &#123;</div><div class=\"line\">                $to[$id] = $partner;</div><div class=\"line\">                $talkback = <span class=\"string\">'OK! please send your message.'</span> . PHP_EOL;</div><div class=\"line\">                socket_write($client, $talkback, strlen($talkback));</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">elseif</span> ($buf == <span class=\"string\">'quit'</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">/* 客户端请求中断通信 */</span></div><div class=\"line\">                socket_close($client);  <span class=\"comment\">// 关闭当前消息通道</span></div><div class=\"line\">                <span class=\"keyword\">unset</span>($clients[$id]);   <span class=\"comment\">// 清理活跃客户端记录</span></div><div class=\"line\">                <span class=\"keyword\">unset</span>($users[$id]);     <span class=\"comment\">// 用户下线</span></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* 转发消息 */</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($users[$id])) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($to[$id])) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($users_rvt[$to[$id]]) &amp;&amp; ($client_rcv = $users_rvt[$to[$id]]) &amp;&amp; <span class=\"keyword\">isset</span>($users[$client_rcv]) &amp;&amp; <span class=\"keyword\">isset</span>($clients[$client_rcv])) &#123;</div><div class=\"line\">                        $sendto = $users[$id] . <span class=\"string\">\" said '$buf'\"</span> . PHP_EOL;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> $users[$id] . <span class=\"string\">' sent a message to '</span> . $to[$id] . PHP_EOL;</div><div class=\"line\">                        socket_send($clients[$users_rvt[$to[$id]]], $sendto, strlen($sendto), MSG_EOF);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        $talkback = <span class=\"string\">'user '</span> . $to[$id] . <span class=\"string\">' is off-line now.'</span> . PHP_EOL;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $talkback = <span class=\"string\">'please set your partner. to: xxx'</span> . PHP_EOL;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                $talkback = <span class=\"string\">'please set your uid. uid xxx'</span> . PHP_EOL;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($talkback)) &#123;</div><div class=\"line\">                socket_write($client, $talkback, strlen($talkback));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 停止socket监听 */</span></div><div class=\"line\">socket_close($sock);</div></pre></td></tr></table></figure>\n<p>以上代码简单实现了点对点通信功能，要注意一点：</p>\n<p><code>clients</code>数组的索引变成了字符串索引，目的是为了避免客户端下线时<code>unset</code>操作导致索引重排，进而使<code>users_rvt</code>所保存的状态过期，可能出现”串台“现象</p>\n<p>测试如下：</p>\n<p>先在服务端启动脚本；</p>\n<p>客户端A连接服务，设置自己的uid，尝试与234通信：<br><img src=\"/images/PHP/extension_socket/234OffLine.png\" alt=\"234OffLine\"></p>\n<p>然后启动客户端B，A再次尝试通信，成功发送 <em>hello again</em>：<br><img src=\"/images/PHP/extension_socket/234Up.png\" alt=\"234Up\"></p>\n<p>关闭客户端B，A再次尝试通信：<br><img src=\"/images/PHP/extension_socket/234OffLineAgain.png\" alt=\"234OffLineAgain\"></p>\n<p>服务端通知：<br><img src=\"/images/PHP/extension_socket/severNotify.png\" alt=\"severNotify\"></p>\n","site":{"data":{}},"excerpt":"<p>挂念PHP的Socket扩展好几天了，只看不练，心里痒痒，于是决定写一下代码。本文实现了一款简单的在线聊天系统，对理解socket通信很有好处。Socket还需要一些Http知识，我这里就不补充了。</p>\n<p>目录：<br><!-- MarkdownTOC --></p>\n<ul>\n<li><a href=\"#%E6%94%AF%E6%8C%81%E5%8D%95%E4%B8%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\">支持单一连接的服务端</a></li>\n<li><a href=\"#%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\">支持多个连接的服务端</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B0%83%E5%BA%A6%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1\">服务端调度客户端通信</a></li>\n</ul>\n<!-- /MarkdownTOC -->","more":"<blockquote>\n<p>转载请注明出处：<a id=\"reproduction_link\">www.notee.cc</a></p>\n</blockquote>\n<script type=\"text/javascript\">document.getElementById('reproduction_link').innerHTML = window.location.href;document.getElementById('reproduction_link').href = window.location.href;</script>\n\n<hr>\n\n<p><a name=\"%E6%94%AF%E6%8C%81%E5%8D%95%E4%B8%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\"></a></p>\n<h2 id=\"支持单一连接的服务端\"><a href=\"#支持单一连接的服务端\" class=\"headerlink\" title=\"支持单一连接的服务端\"></a>支持单一连接的服务端</h2><p>这里参考<a href=\"http://php.net/manual/en/sockets.examples.php\" target=\"_blank\" rel=\"external\">Socket example: Simple TCP/IP server</a>构建了一个简单的服务器，把客户端发来的消息返回给客户端，它只能支持单一连接。当客户端A接入服务端时，其它客户端的接入会排队，当客户端A断开连接后，其它客户端才能得到响应。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 设置脚本时间限制为无限 */</span></div><div class=\"line\">set_time_limit(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">/* 自动刷新输出缓存 */</span></div><div class=\"line\">ob_implicit_flush();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 设置监听地址和端口 */</span></div><div class=\"line\">$address = <span class=\"string\">'0.0.0.0'</span>;</div><div class=\"line\">$port = <span class=\"number\">10000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 创建socket */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 绑定socket监听的地址和端口 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_bind($sock, $address, $port) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 监听socket时，允许5个socket排队等待 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_listen($sock, <span class=\"number\">5</span>) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 无限循环，依次监听请求 */</span></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* 此处会阻塞直到$sock接收到消息，为其创建socket */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (($msgsock = socket_accept($sock)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 客户端连入，显示欢迎信息 */</span></div><div class=\"line\">    $msg = <span class=\"string\">\"Welcome to the PHP Test Server.\"</span> . PHP_EOL;</div><div class=\"line\">    socket_write($msgsock, $msg, strlen($msg));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* 读取消息 */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span> === ($buf = socket_read($msgsock, <span class=\"number\">2048</span>, PHP_NORMAL_READ))) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($msgsock)) . PHP_EOL;</div><div class=\"line\">            <span class=\"keyword\">break</span> <span class=\"number\">2</span>;    <span class=\"comment\">// 系统异常，中断服务</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!$buf = trim($buf)) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;   <span class=\"comment\">// 忽略空消息</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($buf == <span class=\"string\">'quit'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;      <span class=\"comment\">// 客户端请求中断通信</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 向客户端回显消息，并在服务端输出 */</span></div><div class=\"line\">        $talkback = <span class=\"string\">\"You said '$buf'\"</span> . PHP_EOL;</div><div class=\"line\">        socket_write($msgsock, $talkback, strlen($talkback));</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"$buf\"</span> . PHP_EOL;</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 关闭当前消息通道 */</span></div><div class=\"line\">    socket_close($msgsock);</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 停止socket监听 */</span></div><div class=\"line\">socket_close($sock);</div></pre></td></tr></table></figure>\n<p>循环中创建的msgsock和循环外部的socket是两种不同的资源类型，具体可参看<a href=\"http://php.net/manual/en/function.socket-accept.php\" target=\"_blank\" rel=\"external\">socket_accept</a></p>\n<p>此时在服务端启动脚本：</p>\n<pre><code>$ php -f socket_server.php\n</code></pre><p>然后用另一台机器作为客户端，请求通信：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ telnet host port</div><div class=\"line\">Trying 119.28.24.83...</div><div class=\"line\">Connected to hongkong.</div><div class=\"line\">Escape character is &apos;^]&apos;.</div><div class=\"line\">Welcome to the PHP Test Server.</div></pre></td></tr></table></figure>\n<p>之后客户端的消息会被服务端处理并回显，服务端也会输出该消息。客户端输入<code>quit</code>即可中断通信，如果另一台客户端B也连接了服务，但处于排队状态，则可以看到B之前发送的消息得到了回显。</p>\n<p>至此，我们成功构建了一个简单的服务，测试了socket通信。接下来，我们让服务端同时处理多个连接。</p>\n<p><a name=\"%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%AA%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF\"></a></p>\n<h2 id=\"支持多个连接的服务端\"><a href=\"#支持多个连接的服务端\" class=\"headerlink\" title=\"支持多个连接的服务端\"></a>支持多个连接的服务端</h2><p>该功能主要利用了<a href=\"http://php.net/manual/en/function.socket-select.php\" target=\"_blank\" rel=\"external\">socket_select函数</a>。<strong>该函数接收读、写、异常三个socket数组，观察它们对应状态在指定时间内是否发生改变，将它们的值修改为那些相应状态改变的socket，返回改变的socket的数目。</strong></p>\n<p>完整代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 设置脚本时间限制为无限 */</span></div><div class=\"line\">set_time_limit(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">/* 自动刷新输出缓存 */</span></div><div class=\"line\">ob_implicit_flush();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 设置监听地址和端口 */</span></div><div class=\"line\">$address = <span class=\"string\">'0.0.0.0'</span>;</div><div class=\"line\">$port = <span class=\"number\">10000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 创建socket */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 绑定socket监听的地址和端口 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_bind($sock, $address, $port) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 监听socket时，允许5个socket排队等待 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_listen($sock, <span class=\"number\">5</span>) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$clients = <span class=\"keyword\">array</span>();     <span class=\"comment\">// 保存所有客户端</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 无限循环，不断观察通信 */</span></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    $reads = $clients;      <span class=\"comment\">// 所有客户端</span></div><div class=\"line\">    $reads[] = $sock;       <span class=\"comment\">// 当前socket</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 阻塞直到有通信可读 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (socket_select($reads, $write = <span class=\"keyword\">NULL</span>, $except = <span class=\"keyword\">NULL</span>, <span class=\"number\">0</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 该通信是主socket，说明有新客户端连入 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (in_array($sock, $reads)) &#123;</div><div class=\"line\">        <span class=\"comment\">/* 查看活跃的通信，为其创建socket */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (($msgsock = socket_accept($sock)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 客户端连入，显示欢迎信息 */</span></div><div class=\"line\">        $msg = <span class=\"string\">\"Welcome to the PHP Test Server.\"</span> . PHP_EOL;</div><div class=\"line\">        socket_write($msgsock, $msg, strlen($msg));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 跟踪新客户端 */</span></div><div class=\"line\">        $clients[] = $msgsock;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 新连接已建立，继续观察通信 */</span></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 该通信是普通消息，遍历所有客户端，查看被截获的通信 */</span></div><div class=\"line\">    <span class=\"keyword\">foreach</span> ($clients <span class=\"keyword\">as</span> $id =&gt; $client) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($client, $reads)) &#123;</div><div class=\"line\">            <span class=\"comment\">/* 读取消息 */</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span> === ($buf = socket_read($client, <span class=\"number\">2048</span>, PHP_NORMAL_READ))) &#123;</div><div class=\"line\">                <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($client)) . PHP_EOL;</div><div class=\"line\">                <span class=\"keyword\">break</span> <span class=\"number\">2</span>;    <span class=\"comment\">// 系统异常，中断服务</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!$buf = trim($buf)) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;   <span class=\"comment\">// 忽略空消息</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($buf == <span class=\"string\">'quit'</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">/* 客户端请求中断通信 */</span></div><div class=\"line\">                socket_close($client);  <span class=\"comment\">// 关闭当前消息通道</span></div><div class=\"line\">                <span class=\"keyword\">unset</span>($clients[$id]);   <span class=\"comment\">// 清理活跃客户端记录</span></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* 向客户端回显消息，并在服务端输出 */</span></div><div class=\"line\">            $talkback = <span class=\"string\">\"You said '$buf'\"</span> . PHP_EOL;</div><div class=\"line\">            socket_write($msgsock, $talkback, strlen($talkback));</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"$buf\"</span> . PHP_EOL;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 停止socket监听 */</span></div><div class=\"line\">socket_close($sock);</div></pre></td></tr></table></figure>\n<p>这个实现主要利用了以下几点：</p>\n<ul>\n<li>利用对<code>socket_select</code>函数对<code>reads</code>数组的修改，实现了区分新连接和普通消息。</li>\n<li>将所有客户端保存在数组中，监控他们是否活跃，利用遍历找到活跃通信。</li>\n<li>采用<code>socket_select</code>阻塞程序，可以防止<code>socket_accept</code>阻塞而阻断其它客户端。</li>\n</ul>\n<p>在服务端启动脚本后，就可以在不同的客户端连接服务端进行测试了，不再赘述。</p>\n<p><a name=\"%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B0%83%E5%BA%A6%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1\"></a></p>\n<h2 id=\"服务端调度客户端通信\"><a href=\"#服务端调度客户端通信\" class=\"headerlink\" title=\"服务端调度客户端通信\"></a>服务端调度客户端通信</h2><p>上面的实现，客户端都只能和服务端通信，这里只需稍加扩展，客户端之间就能互相通信了。</p>\n<p>有以下几种思路：</p>\n<ul>\n<li>点对点通信，客户端指定对方id，服务端处理后投放到该id</li>\n<li>群组通信，采用一定的分组策略，将客户端划分到不同的组中，通信时指定组id，向该组广播，或同时指定组id和客户端id单点通信</li>\n</ul>\n<p>这里实现一个简单的点对点：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 设置脚本时间限制为无限 */</span></div><div class=\"line\">set_time_limit(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">/* 自动刷新输出缓存 */</span></div><div class=\"line\">ob_implicit_flush();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 设置监听地址和端口 */</span></div><div class=\"line\">$address = <span class=\"string\">'0.0.0.0'</span>;</div><div class=\"line\">$port = <span class=\"number\">10000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 创建socket */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 绑定socket监听的地址和端口 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_bind($sock, $address, $port) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 监听socket时，允许5个socket排队等待 */</span></div><div class=\"line\"><span class=\"keyword\">if</span> (socket_listen($sock, <span class=\"number\">5</span>) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$clients = <span class=\"keyword\">array</span>();     <span class=\"comment\">// 保存所有客户端</span></div><div class=\"line\">$users = <span class=\"keyword\">array</span>();       <span class=\"comment\">// 保存用户uid</span></div><div class=\"line\">$users_rvt = <span class=\"keyword\">array</span>();   <span class=\"comment\">// users数组的倒排索引</span></div><div class=\"line\">$to = <span class=\"keyword\">array</span>();          <span class=\"comment\">// 保存用户当前通信伙伴</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 无限循环，不断观察通信 */</span></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    $reads = $clients;      <span class=\"comment\">// 所有客户端</span></div><div class=\"line\">    $reads[] = $sock;       <span class=\"comment\">// 当前socket</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 阻塞直到有通信可读 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (socket_select($reads, $write = <span class=\"keyword\">NULL</span>, $except = <span class=\"keyword\">NULL</span>, <span class=\"number\">0</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 该通信是主socket，说明有新客户端连入 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (in_array($sock, $reads)) &#123;</div><div class=\"line\">        <span class=\"comment\">/* 查看活跃的通信，为其创建socket */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (($msgsock = socket_accept($sock)) === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($sock)) . PHP_EOL;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 客户端连入，显示欢迎信息 */</span></div><div class=\"line\">        $msg = <span class=\"string\">\"Welcome to the PHP Test Server.\"</span> . PHP_EOL;</div><div class=\"line\">        socket_write($msgsock, $msg, strlen($msg));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 跟踪新客户端 */</span></div><div class=\"line\">        $next_index = <span class=\"string\">'client_'</span> . count($clients);  <span class=\"comment\">// 数字索引unset后，索引重排会导致消息发错socket</span></div><div class=\"line\">        $clients[$next_index] = $msgsock;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 新连接已建立，继续观察通信 */</span></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 该通信是普通消息，遍历所有客户端，查看被截获的通信 */</span></div><div class=\"line\">    <span class=\"keyword\">foreach</span> ($clients <span class=\"keyword\">as</span> $id =&gt; $client) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($client, $reads)) &#123;</div><div class=\"line\">            $talkback = <span class=\"string\">''</span>;</div><div class=\"line\">            <span class=\"comment\">/* 读取消息 */</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span> === ($buf = socket_read($client, <span class=\"number\">2048</span>, PHP_NORMAL_READ))) &#123;</div><div class=\"line\">                <span class=\"keyword\">echo</span> socket_strerror(socket_last_error($client)) . PHP_EOL;</div><div class=\"line\">                <span class=\"keyword\">break</span> <span class=\"number\">2</span>;    <span class=\"comment\">// 系统异常，中断服务</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!$buf = trim($buf)) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;   <span class=\"comment\">// 忽略空消息</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (substr($buf, <span class=\"number\">0</span>, <span class=\"number\">3</span>) == <span class=\"string\">'uid'</span> &amp;&amp; ($uid = substr($buf, <span class=\"number\">4</span>))) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($users_rvt[$uid])) &#123;</div><div class=\"line\">                    $users[$id] = $uid;</div><div class=\"line\">                    $users_rvt[$uid] = $id;</div><div class=\"line\">                    $to[$id] = $uid;</div><div class=\"line\">                    $talkback = <span class=\"string\">'OK! please set your partner(yourself as default).'</span> . PHP_EOL;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $talkback = <span class=\"string\">'uid already in use.'</span> . PHP_EOL;</div><div class=\"line\">                &#125;</div><div class=\"line\">                socket_write($client, $talkback, strlen($talkback));</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">elseif</span> (substr($buf, <span class=\"number\">0</span>, <span class=\"number\">3</span>) == <span class=\"string\">'to:'</span> &amp;&amp; ($partner = substr($buf, <span class=\"number\">4</span>))) &#123;</div><div class=\"line\">                $to[$id] = $partner;</div><div class=\"line\">                $talkback = <span class=\"string\">'OK! please send your message.'</span> . PHP_EOL;</div><div class=\"line\">                socket_write($client, $talkback, strlen($talkback));</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">elseif</span> ($buf == <span class=\"string\">'quit'</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">/* 客户端请求中断通信 */</span></div><div class=\"line\">                socket_close($client);  <span class=\"comment\">// 关闭当前消息通道</span></div><div class=\"line\">                <span class=\"keyword\">unset</span>($clients[$id]);   <span class=\"comment\">// 清理活跃客户端记录</span></div><div class=\"line\">                <span class=\"keyword\">unset</span>($users[$id]);     <span class=\"comment\">// 用户下线</span></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* 转发消息 */</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($users[$id])) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($to[$id])) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($users_rvt[$to[$id]]) &amp;&amp; ($client_rcv = $users_rvt[$to[$id]]) &amp;&amp; <span class=\"keyword\">isset</span>($users[$client_rcv]) &amp;&amp; <span class=\"keyword\">isset</span>($clients[$client_rcv])) &#123;</div><div class=\"line\">                        $sendto = $users[$id] . <span class=\"string\">\" said '$buf'\"</span> . PHP_EOL;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> $users[$id] . <span class=\"string\">' sent a message to '</span> . $to[$id] . PHP_EOL;</div><div class=\"line\">                        socket_send($clients[$users_rvt[$to[$id]]], $sendto, strlen($sendto), MSG_EOF);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        $talkback = <span class=\"string\">'user '</span> . $to[$id] . <span class=\"string\">' is off-line now.'</span> . PHP_EOL;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $talkback = <span class=\"string\">'please set your partner. to: xxx'</span> . PHP_EOL;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                $talkback = <span class=\"string\">'please set your uid. uid xxx'</span> . PHP_EOL;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($talkback)) &#123;</div><div class=\"line\">                socket_write($client, $talkback, strlen($talkback));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 停止socket监听 */</span></div><div class=\"line\">socket_close($sock);</div></pre></td></tr></table></figure>\n<p>以上代码简单实现了点对点通信功能，要注意一点：</p>\n<p><code>clients</code>数组的索引变成了字符串索引，目的是为了避免客户端下线时<code>unset</code>操作导致索引重排，进而使<code>users_rvt</code>所保存的状态过期，可能出现”串台“现象</p>\n<p>测试如下：</p>\n<p>先在服务端启动脚本；</p>\n<p>客户端A连接服务，设置自己的uid，尝试与234通信：<br><img src=\"/images/PHP/extension_socket/234OffLine.png\" alt=\"234OffLine\"></p>\n<p>然后启动客户端B，A再次尝试通信，成功发送 <em>hello again</em>：<br><img src=\"/images/PHP/extension_socket/234Up.png\" alt=\"234Up\"></p>\n<p>关闭客户端B，A再次尝试通信：<br><img src=\"/images/PHP/extension_socket/234OffLineAgain.png\" alt=\"234OffLineAgain\"></p>\n<p>服务端通知：<br><img src=\"/images/PHP/extension_socket/severNotify.png\" alt=\"severNotify\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9z0r1kx00022ys8pvs83z49","category_id":"cj9z0r1l400042ys81iufzez9","_id":"cj9z0r1lj000d2ys85mniae0v"},{"post_id":"cj9z0r1l200032ys87mtxbesp","category_id":"cj9z0r1lf00092ys8iinbb50i","_id":"cj9z0r1lo000k2ys8dnq1wp8y"},{"post_id":"cj9z0r1l600062ys8857rao2d","category_id":"cj9z0r1lj000e2ys8b7g1pxfp","_id":"cj9z0r1lr000p2ys86koz2d7a"},{"post_id":"cj9z0r1l900072ys837x5jay2","category_id":"cj9z0r1lo000l2ys8ra7tpjtl","_id":"cj9z0r1lu000t2ys87y75q1nw"},{"post_id":"cj9z0r1lc00082ys8vhq5jnhc","category_id":"cj9z0r1lo000l2ys8ra7tpjtl","_id":"cj9z0r1lv000x2ys8t2uesoqu"},{"post_id":"cj9z0r1lg000b2ys8da2q6d52","category_id":"cj9z0r1lo000l2ys8ra7tpjtl","_id":"cj9z0r1lv00112ys80hr9uhua"},{"post_id":"cj9z0r1li000c2ys8vbrumxom","category_id":"cj9z0r1lv000w2ys8k67gxrmk","_id":"cj9z0r1lw00162ys8y0gmwgpe"},{"post_id":"cj9z0r1ll000g2ys8omrxrw4f","category_id":"cj9z0r1lv000w2ys8k67gxrmk","_id":"cj9z0r1lw001a2ys8g7476zyb"},{"post_id":"cj9z0r1ln000i2ys8mrgefhgj","category_id":"cj9z0r1lv000w2ys8k67gxrmk","_id":"cj9z0r1lx001d2ys8j6g6h5pk"},{"post_id":"cj9z0r1lp000n2ys80qea816g","category_id":"cj9z0r1lv000w2ys8k67gxrmk","_id":"cj9z0r1lx001f2ys8gymz4yx7"},{"post_id":"cj9z0r1lq000o2ys80y70qj0n","category_id":"cj9z0r1lv000w2ys8k67gxrmk","_id":"cj9z0r1ly001h2ys84jmb28u2"}],"PostTag":[{"post_id":"cj9z0r1kx00022ys8pvs83z49","tag_id":"cj9z0r1l600052ys8ka4ejvkx","_id":"cj9z0r1lm000h2ys8h5mkmv0a"},{"post_id":"cj9z0r1kx00022ys8pvs83z49","tag_id":"cj9z0r1lf000a2ys8xy90whqd","_id":"cj9z0r1lo000j2ys8f1nqjlvv"},{"post_id":"cj9z0r1l200032ys87mtxbesp","tag_id":"cj9z0r1lk000f2ys8u1d237wy","_id":"cj9z0r1lu000v2ys8b1jegxt7"},{"post_id":"cj9z0r1l200032ys87mtxbesp","tag_id":"cj9z0r1lo000m2ys8odzxskyh","_id":"cj9z0r1lv000y2ys8lpy5kv94"},{"post_id":"cj9z0r1l200032ys87mtxbesp","tag_id":"cj9z0r1ls000r2ys8bxkl7ctg","_id":"cj9z0r1lv00102ys813208wnx"},{"post_id":"cj9z0r1l600062ys8857rao2d","tag_id":"cj9z0r1lu000u2ys8omvnboxx","_id":"cj9z0r1lv00142ys80niv5acr"},{"post_id":"cj9z0r1l600062ys8857rao2d","tag_id":"cj9z0r1lv000z2ys8jo7bm1rw","_id":"cj9z0r1lw00172ys82a34z98s"},{"post_id":"cj9z0r1l900072ys837x5jay2","tag_id":"cj9z0r1lv00132ys8u15m4g2d","_id":"cj9z0r1ly001i2ys8fm26d2nu"},{"post_id":"cj9z0r1l900072ys837x5jay2","tag_id":"cj9z0r1lw00182ys8sa0qypq3","_id":"cj9z0r1ly001j2ys8vnlh7h7f"},{"post_id":"cj9z0r1l900072ys837x5jay2","tag_id":"cj9z0r1lx001b2ys83n5lmeva","_id":"cj9z0r1ly001l2ys8fccg17z5"},{"post_id":"cj9z0r1l900072ys837x5jay2","tag_id":"cj9z0r1lx001e2ys8o2wbe14g","_id":"cj9z0r1ly001m2ys8p79es2fe"},{"post_id":"cj9z0r1lc00082ys8vhq5jnhc","tag_id":"cj9z0r1lv00132ys8u15m4g2d","_id":"cj9z0r1m1001p2ys8uas7zuse"},{"post_id":"cj9z0r1lc00082ys8vhq5jnhc","tag_id":"cj9z0r1ly001k2ys8e8nx5vvd","_id":"cj9z0r1m1001q2ys8lmt3w2rd"},{"post_id":"cj9z0r1lc00082ys8vhq5jnhc","tag_id":"cj9z0r1lz001n2ys88qtcsa3y","_id":"cj9z0r1m1001s2ys8zpz9ruqd"},{"post_id":"cj9z0r1lg000b2ys8da2q6d52","tag_id":"cj9z0r1lv00132ys8u15m4g2d","_id":"cj9z0r1m3001w2ys8vq2yksnv"},{"post_id":"cj9z0r1lg000b2ys8da2q6d52","tag_id":"cj9z0r1m1001r2ys80fidxp4o","_id":"cj9z0r1m3001x2ys8kz73ackb"},{"post_id":"cj9z0r1lg000b2ys8da2q6d52","tag_id":"cj9z0r1m1001t2ys8awy8rm7a","_id":"cj9z0r1m3001z2ys8wpzc6yrx"},{"post_id":"cj9z0r1lg000b2ys8da2q6d52","tag_id":"cj9z0r1m2001u2ys89hj4gp2z","_id":"cj9z0r1m300202ys8zucrdbls"},{"post_id":"cj9z0r1li000c2ys8vbrumxom","tag_id":"cj9z0r1m2001v2ys8803zailc","_id":"cj9z0r1m400222ys8gdhv53qa"},{"post_id":"cj9z0r1li000c2ys8vbrumxom","tag_id":"cj9z0r1m3001y2ys82iqhb793","_id":"cj9z0r1m400232ys8yaeu1wdm"},{"post_id":"cj9z0r1ll000g2ys8omrxrw4f","tag_id":"cj9z0r1m2001v2ys8803zailc","_id":"cj9z0r1m500262ys8decxe9rv"},{"post_id":"cj9z0r1ll000g2ys8omrxrw4f","tag_id":"cj9z0r1m3001y2ys82iqhb793","_id":"cj9z0r1m500272ys8m5b18g28"},{"post_id":"cj9z0r1ln000i2ys8mrgefhgj","tag_id":"cj9z0r1m2001v2ys8803zailc","_id":"cj9z0r1m8002a2ys8nm13n01k"},{"post_id":"cj9z0r1ln000i2ys8mrgefhgj","tag_id":"cj9z0r1m500282ys82s40p98q","_id":"cj9z0r1m8002b2ys8u3pzt0eo"},{"post_id":"cj9z0r1lp000n2ys80qea816g","tag_id":"cj9z0r1m2001v2ys8803zailc","_id":"cj9z0r1m9002e2ys82rb7gedm"},{"post_id":"cj9z0r1lp000n2ys80qea816g","tag_id":"cj9z0r1m3001y2ys82iqhb793","_id":"cj9z0r1m9002f2ys8bzrnqcym"},{"post_id":"cj9z0r1lq000o2ys80y70qj0n","tag_id":"cj9z0r1m2001v2ys8803zailc","_id":"cj9z0r1m9002i2ys8psx166m2"},{"post_id":"cj9z0r1lq000o2ys80y70qj0n","tag_id":"cj9z0r1m9002g2ys82xojf5ul","_id":"cj9z0r1m9002j2ys86e7vo77e"},{"post_id":"cj9z0r1lq000o2ys80y70qj0n","tag_id":"cj9z0r1m9002h2ys8ru9mjk3y","_id":"cj9z0r1m9002k2ys8a6hbmtpl"}],"Tag":[{"name":"Essay","_id":"cj9z0r1l600052ys8ka4ejvkx"},{"name":"Feeling","_id":"cj9z0r1lf000a2ys8xy90whqd"},{"name":"Markdown","_id":"cj9z0r1lk000f2ys8u1d237wy"},{"name":"Blog","_id":"cj9z0r1lo000m2ys8odzxskyh"},{"name":"Snippet","_id":"cj9z0r1ls000r2ys8bxkl7ctg"},{"name":"VB","_id":"cj9z0r1lu000u2ys8omvnboxx"},{"name":"VBS","_id":"cj9z0r1lv000z2ys8jo7bm1rw"},{"name":"Operation","_id":"cj9z0r1lv00132ys8u15m4g2d"},{"name":"Deployment","_id":"cj9z0r1lw00182ys8sa0qypq3"},{"name":"Distributed","_id":"cj9z0r1lx001b2ys83n5lmeva"},{"name":"ZooKeeper","_id":"cj9z0r1lx001e2ys8o2wbe14g"},{"name":"Common","_id":"cj9z0r1ly001k2ys8e8nx5vvd"},{"name":"ssh","_id":"cj9z0r1lz001n2ys88qtcsa3y"},{"name":"Testing","_id":"cj9z0r1m1001r2ys80fidxp4o"},{"name":"ab","_id":"cj9z0r1m1001t2ys8awy8rm7a"},{"name":"todo","_id":"cj9z0r1m2001u2ys89hj4gp2z"},{"name":"PHP","_id":"cj9z0r1m2001v2ys8803zailc"},{"name":"设计模式","_id":"cj9z0r1m3001y2ys82iqhb793"},{"name":"Syntax","_id":"cj9z0r1m500282ys82s40p98q"},{"name":"Extension","_id":"cj9z0r1m9002g2ys82xojf5ul"},{"name":"Socket","_id":"cj9z0r1m9002h2ys8ru9mjk3y"}]}}