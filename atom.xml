<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ycgambo の blog</title>
  
  <subtitle>&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.notee.cc/"/>
  <updated>2021-03-27T03:27:22.326Z</updated>
  <id>http://www.notee.cc/</id>
  
  <author>
    <name>weiqi.guo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>雨</title>
    <link href="http://www.notee.cc/Essay/feeling_rain/"/>
    <id>http://www.notee.cc/Essay/feeling_rain/</id>
    <published>2021-03-26T16:00:00.000Z</published>
    <updated>2021-03-27T03:27:22.326Z</updated>
    
    <content type="html"><![CDATA[<p>当我还是个小孩子的时候，我喜欢雨。</p><p>小雨沙沙的落在叶子上，落在地上，时间似乎不存在了，整个世界都是我和雨。<br>我有时候会站在雨里，任爸妈叫我傻子。仰起头，看雨落到眼睛里，张开嘴，让舌头也沾上几滴雨水。<br>雨在脸上越积越多，再一把抹下去，或者往上推到头发上，弄成赛亚人的发型，都是让人心生愉悦的。</p><p>我也喜欢倾盆大雨，天突然阴沉下来，雨哗的就从天而降，把人们浇成落汤鸡。<br>这时候往地上看，一条条小水流上，有被雨打出的水泡，破了又破，我可以呆呆的看很久。<br>我也会跑进雨地里，去踢一踢水，然后赶紧跑回屋去。</p><p>我不喜欢闪电，那是让我害怕的东西，它会让人，躲开雨。</p><hr><p>但现在，我讨厌雨。</p><p>雨天让我感觉沉闷，雨天让我感到压抑，雨天让我的伤口难受。<br>我明白，这跟雨没有关系，这是阴天带来的，雨是无辜的，可是我还是在怪雨。</p><p>天上飘着零星小雨，我撑着伞，避开落到脸上的哪怕一丝丝的凉意。<br>后来雨变大了，我怪它打湿我的衣服，弄湿我的鞋子，我怪它阻碍我的行动。<br>如果哪天下了大雨，而我没有带伞，那就糟透了。<br>不过，幸好我不是女孩子，否则，我也会怪雨弄脏了我的皮肤吧。</p><p>我依然不喜欢闪电，它会让我，担心下雨。</p><hr><p>可是雨做错了什么呢，日日年年，雨没有改变。<br>那是我做错了什么吗，我也不知道答案。<br>我想，可能是长大后追求的，不再是“简单的快乐”了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我还是个小孩子的时候，我喜欢雨。&lt;/p&gt;
&lt;p&gt;小雨沙沙的落在叶子上，落在地上，时间似乎不存在了，整个世界都是我和雨。&lt;br&gt;
我有时候会站在雨里，任爸妈叫我傻子。仰起头，看雨落到眼睛里，张开嘴，让舌头也沾上几滴雨水。&lt;br&gt;
雨在脸上越积越多，再一把抹下去，或者往上推到
      
    
    </summary>
    
      <category term="Essay" scheme="http://www.notee.cc/categories/Essay/"/>
    
    
      <category term="Essay" scheme="http://www.notee.cc/tags/Essay/"/>
    
      <category term="Feeling" scheme="http://www.notee.cc/tags/Feeling/"/>
    
  </entry>
  
  <entry>
    <title>善恶游戏</title>
    <link href="http://www.notee.cc/JavaScript/p5_evil/"/>
    <id>http://www.notee.cc/JavaScript/p5_evil/</id>
    <published>2020-02-01T16:00:00.000Z</published>
    <updated>2020-09-10T09:30:26.040Z</updated>
    
    <content type="html"><![CDATA[<p>游戏规则:</p><ol><li>每一回合,你需要在不知道对方出招的情况下,选择合作或者侵略</li><li>合作方拿出3分,侵略方拿出2分,作为成本;</li><li>双方都选择合作时,双方均能收回成本,并获取收益;<br>侵略方的成本无法产生收益,但可以掠夺对方的成本作为收益。<br>双方合作,各加3分,成本获利率100%;<br>某方侵略,合作方减3分,侵略方加3分,成本获利率150%;<br>互相侵略,分数高者加1分，分数低者减3分，分数相同时各减1分</li><li>每回合结束后，生存的玩家同时失去/获得指定分数，来模拟环境是否恶劣</li><li>每个人起始20分,小于3分则失去继续游戏资格</li><li>每回合将所有人随机两两配对，当仅剩一名玩家或300回合后游戏结束</li></ol><p>游戏主体类型:</p><ol><li>吃哑巴亏：始终合作</li><li>善意试探：如果双方尚未合作,首先合作,之后重复对方上一步的行动</li><li>恶意试探：如果双方尚未合作,首先侵略,之后重复对方上一步的行动</li><li>欺软怕硬：对方分数低于自己则侵略,否则合作</li><li>无脑侵占：始终侵略</li></ol><a id="more"></a><p>环境附加分数（即游戏规则4中的环境因素）随机为-3~3，刷新页面即可重置</p><h2 id="此次模拟的动画"><a class="markdownIt-Anchor" href="#此次模拟的动画"></a> 此次模拟的动画</h2><div id="p5Container" style="width: 100%;overflow: hidden;"><style type="text/css">.p5Canvas{margin: 0 auto;display: block !important;}</style><script src="https://cdn.jsdelivr.net/npm/p5@0.7.1/lib/p5.min.js"></script><script src="https://cdn.jsdelivr.net/npm/lodash@4.17.11/lodash.min.js"></script><script src="https://cdn.jsdelivr.net/npm/ismobilejs@0.5.1/dist/isMobile.min.js"></script></div><div id="echartContainer" style="width: 100%; height:600px;text-align: center;line-height: 600px;">等待生成报告...<script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script></div><h2 id="下面是几个典型的数据"><a class="markdownIt-Anchor" href="#下面是几个典型的数据"></a> 下面是几个典型的数据</h2><div id="echartContainer-3" style="width: 100%; height:600px;text-align: center;line-height: 600px;">环境-3,等待生成报告...</div><div id="echartContainer-1" style="width: 100%; height:600px;text-align: center;line-height: 600px;">环境-1,等待生成报告...</div><div id="echartContainer0" style="width: 100%; height:600px;text-align: center;line-height: 600px;">无环境影响,等待生成报告...</div><div id="echartContainer1" style="width: 100%; height:600px;text-align: center;line-height: 600px;">环境+1,等待生成报告...</div><div id="echartContainer3" style="width: 100%; height:600px;text-align: center;line-height: 600px;">环境+3,等待生成报告...</div><script>var startupScore = 20 // 起始分数，代表初始资源量var aliveBonus = Math.floor(Math.random() * 6, 1) - 3 // 生存环境附加分，代表环境是否恶劣var size = 50 // 矩阵大小，群体规模var nodeSize = 12 // 节点方块大小var mobileSize = 40 // 手机端矩阵大小var mobileNodeSize = 6 // 手机端节点方块大小function Node(p5, x, y, size) {    this.x = x;    this.y = y;    this.size = size;    this.fill = '0'    this.$ = p5    this.type = 0;    this.score = 100;    this.memories = {};}Node.prototype.attackOrNot = function (targetNode) {    switch (this.type) {        case 0:            return false        case 1:            return _.get(this.memories, String(targetNode.x) + "_" + String(targetNode.y), false)        case 2:            return _.get(this.memories, String(targetNode.x) + "_" + String(targetNode.y), true)        case 3:            return targetNode.score < this.score        case 4:            return true    }}Node.prototype.isDead = function () {    return this.score < 3;}var typeColors = ['#67C23A', '#409EFF', '#F8C9DB', '#E6A23C', '#F56C6C',]Node.prototype.refresh = function (fill = '') {    if (fill) {        this.fill = fill    } else {        this.fill = typeColors[this.type]    }    if (this.isDead()) {        this.fill = '#EBEEF5'    }    this.$.fill(this.fill)    this.$.rect(this.x * this.size, this.y * this.size, this.size, this.size)}function sketch($) { // 画板    var nodes = [] // 节点矩阵    var nodeList = [] // 节点列表    var stepData = [["step"],["吃哑巴亏"],["善意试探"],["恶意试探"],["欺软怕硬"],["无脑侵占"]]// 每一步的统计数据    var myChart = initChart('echartContainer');    var stepData0 = [["step","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299"],["吃哑巴亏",10220,9935,9650,8911,8170,7413,6418,5873,5148,4444,3848,3195,2523,1889,1410,988,729,500,299,187,84,21,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["善意试探",9640,9295,8779,8224,7382,6750,5845,5097,4433,3600,3072,2541,1995,1549,1183,916,678,499,342,202,105,55,34,22,12,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["恶意试探",10440,11573,12403,13176,13909,14550,15164,15579,15940,16362,16547,16746,16941,16997,17000,16869,16695,16518,16303,16066,15883,15558,15208,14866,14514,14223,13914,13600,13333,13056,12777,12481,12227,11986,11730,11491,11280,11045,10824,10587,10369,10172,9984,9780,9580,9347,9140,8953,8779,8602,8438,8247,8112,7959,7833,7658,7512,7387,7260,7149,7018,6882,6734,6640,6531,6422,6340,6227,6098,6025,5939,5852,5755,5695,5621,5560,5483,5402,5371,5306,5227,5176,5123,5069,5006,4937,4873,4822,4766,4725,4660,4620,4552,4504,4448,4388,4330,4277,4235,4181,4132,4087,4042,3993,3946,3938,3912,3874,3837,3793,3765,3733,3698,3669,3640,3611,3572,3527,3502,3461,3428,3387,3343,3307,3287,3254,3222,3195,3169,3134,3115,3092,3066,3040,3022,3000,2985,2952,2925,2891,2868,2845,2817,2792,2771,2737,2705,2682,2658,2629,2607,2586,2558,2538,2516,2496,2464,2436,2410,2391,2364,2334,2310,2280,2255,2234,2211,2176,2145,2110,2082,2047,2012,1984,1947,1922,1903,1885,1854,1824,1803,1782,1762,1737,1712,1687,1670,1653,1627,1598,1569,1544,1519,1500,1477,1458,1434,1411,1387,1364,1349,1329,1306,1278,1256,1234,1217,1192,1179,1158,1141,1128,1114,1093,1075,1057,1039,1017,999,977,955,937,923,915,904,893,878,863,844,829,810,795,778,769,749,736,720,707,691,681,668,659,646,633,623,610,597,580,570,556,548,545,534,526,515,507,499,491,483,475,467,455,447,439,431,423,414,407,402,397,392,387,382,377,368,363,358,353,348,343,338,329,324,319,313,311,307,304,305,306,307,308,309,310,307,308,305,306,307,308],["欺软怕硬",9940,9550,9547,9316,9209,9169,8921,8799,8608,8321,8059,7704,7388,7072,6730,6453,6052,5739,5441,5107,4790,4541,4304,4047,3867,3706,3567,3435,3300,3165,3051,2960,2831,2745,2646,2551,2474,2413,2339,2266,2197,2124,2055,2014,1955,1911,1859,1781,1746,1709,1654,1600,1539,1493,1421,1359,1328,1288,1244,1197,1173,1137,1103,1073,1052,1035,1007,975,939,893,857,852,824,779,779,747,718,705,679,653,641,608,582,542,502,484,465,460,439,417,409,390,384,362,352,342,334,333,337,341,338,321,297,280,270,253,242,238,227,218,213,208,210,205,193,181,183,178,166,168,162,157,152,147,142,130,127,115,119,116,120,117,112,100,95,83,87,75,70,72,67,65,59,62,56,50,51,45,48,42,36,30,24,27,30,24,27,30,24,18,19,13,16,10,13,16,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["无脑侵占",9760,10667,11333,11929,12522,13056,13542,13806,14276,14501,14728,15037,15193,15327,15442,15464,15467,15352,15211,15043,14805,14590,14371,14159,13920,13631,13340,13073,12803,12560,12319,12087,11869,11625,11422,11225,10996,10790,10595,10437,10275,10106,9938,9767,9620,9510,9401,9298,9149,9009,8895,8815,8702,8591,8485,8432,8326,8205,8111,8000,7905,7827,7761,7650,7554,7470,7364,7298,7252,7173,7094,6994,6929,6846,6753,6671,6604,6528,6425,6352,6288,6219,6143,6081,6039,6000,5947,5874,5819,5748,5693,5633,5583,5533,5482,5433,5395,5342,5272,5209,5152,5111,5079,5047,5008,4940,4886,4836,4795,4763,4714,4669,4620,4570,4531,4491,4448,4420,4379,4342,4307,4277,4253,4220,4173,4148,4123,4092,4055,4033,3991,3963,3932,3908,3869,3841,3798,3781,3751,3723,3690,3656,3634,3609,3584,3571,3550,3529,3506,3491,3469,3444,3428,3405,3382,3362,3352,3339,3325,3304,3286,3278,3263,3253,3241,3224,3211,3210,3205,3200,3187,3182,3177,3167,3165,3152,3135,3117,3112,3103,3090,3077,3063,3054,3045,3036,3019,3000,2992,2989,2986,2979,2972,2960,2953,2942,2938,2933,2929,2924,2911,2903,2897,2899,2893,2887,2880,2881,2870,2867,2860,2849,2839,2836,2829,2823,2817,2815,2809,2807,2805,2799,2789,2775,2764,2753,2746,2738,2735,2728,2725,2718,2711,2700,2700,2693,2689,2682,2678,2667,2660,2649,2641,2636,2628,2623,2618,2617,2609,2605,2597,2584,2579,2571,2566,2558,2549,2541,2533,2525,2517,2513,2505,2497,2489,2481,2473,2466,2457,2448,2439,2430,2419,2410,2405,2396,2387,2378,2369,2360,2351,2346,2337,2328,2322,2312,2302,2293,2280,2267,2254,2241,2228,2215,2206,2193,2184,2171,2158,2145]]    var stepData_3 = [["step","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],["吃哑巴亏",9300,7752,6006,3906,2320,1276,585,199,68,18,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["善意试探",10740,8616,6285,3955,2203,1123,500,183,42,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["恶意试探",9400,8885,8240,7399,6249,5131,4047,3087,2276,1634,1197,842,575,391,253,173,114,75,56,38,28,13,2,0,0],["欺软怕硬",9840,8220,6692,5222,4094,3030,2372,1632,1150,824,540,357,240,170,134,91,57,41,31,20,14,12,10,8,5],["无脑侵占",10720,10151,9425,8465,7107,5763,4476,3488,2628,1908,1345,935,634,432,268,159,100,63,31,18,10,8,5,0,0]]    var stepData_1 = [["step","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137"],["吃哑巴亏",9060,8184,6975,5859,4560,3607,2887,2185,1540,1045,661,370,251,153,93,54,32,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["善意试探",9840,8835,7623,6522,5170,3964,3174,2344,1503,1145,784,484,279,144,73,29,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["恶意试探",11360,11894,12246,12320,12335,12249,12070,11913,11613,11151,10569,10060,9433,8902,8348,7769,7262,6765,6293,5870,5444,5062,4665,4296,3926,3655,3399,3129,2888,2669,2451,2250,2086,1904,1770,1664,1520,1404,1287,1188,1099,1009,925,851,783,717,656,612,561,528,499,463,435,415,404,392,381,377,363,350,332,312,289,276,262,252,245,236,224,214,204,190,189,177,173,172,168,163,159,154,150,146,144,137,135,137,135,136,131,127,123,119,121,117,115,104,96,88,86,78,76,72,70,62,58,55,57,56,52,51,53,55,57,53,49,45,41,43,42,38,34,36,35,37,39,35,34,33,32,28,24,20,16,12,8,4,0,0],["欺软怕硬",10120,9458,8858,8400,7777,7068,6614,5943,5279,4635,4128,3657,3251,2861,2541,2268,2000,1779,1556,1392,1259,1153,1064,972,938,869,802,768,750,722,694,658,588,555,517,485,472,458,428,397,368,333,311,291,280,270,255,237,216,195,188,184,183,169,168,158,151,137,139,125,121,120,120,122,124,126,119,121,121,121,123,115,101,101,100,86,82,78,74,67,59,52,54,54,56,58,60,62,62,55,48,47,49,48,50,53,53,53,55,55,57,50,52,52,45,38,40,33,32,25,27,29,31,30,29,28,27,29,22,21,20,22,15,17,19,18,11,4,0,0,0,0,0,0,0,0,0,0],["无脑侵占",9620,10013,10338,10422,10475,10358,10188,10018,9739,9312,8833,8392,7898,7348,6819,6334,5846,5409,5027,4630,4291,3951,3662,3421,3187,2938,2721,2535,2333,2147,1995,1870,1777,1683,1586,1469,1380,1284,1222,1162,1103,1064,1016,968,915,868,831,787,766,732,686,650,606,568,516,480,441,406,376,357,335,315,296,276,260,241,221,206,190,173,165,164,157,149,137,134,129,125,120,119,118,117,113,109,108,103,102,98,94,96,98,94,89,85,83,83,83,83,83,83,83,86,86,86,89,92,91,94,94,97,96,95,94,94,94,94,94,93,96,96,96,95,98,97,96,96,99,102,105,105,105,105,105,105,105,105,105,104]]    var stepData3 = [["step","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99"],["吃哑巴亏",9920,11033,11984,12673,13486,13962,14443,15094,15639,16239,16662,17122,17742,18170,18541,18984,19476,19697,20025,20418,20791,21169,21429,21919,22210,22395,22535,22876,23136,23223,23464,23760,23974,24168,24339,24583,24696,24952,25160,25452,25474,25787,25932,26034,26160,26354,26509,26742,26919,27149,27157,27270,27346,27501,27490,27563,27809,27996,28272,28437,28432,28663,28657,28791,28932,29317,29374,29534,29752,29842,29959,29965,29999,30140,30209,30446,30494,30550,30640,30666,30857,31034,31019,31123,31277,31508,31635,31810,32039,32097,32060,32201,32375,32486,32507,32455,32536,32734,32768,32924],["善意试探",9340,10396,11227,11953,12724,13314,13868,14428,14961,15350,16015,16416,16795,17147,17575,18113,18545,18925,19596,19962,20340,20615,20892,21318,21607,21971,22187,22602,22872,23293,23529,23862,24223,24523,24889,25257,25445,25635,25994,26104,26406,26656,26882,27197,27472,27693,27793,28097,28156,28291,28305,28614,28787,28960,29175,29370,29674,29888,30117,30346,30478,30629,30831,30955,31214,31506,31654,31713,32070,32243,32302,32537,32760,32979,33001,33251,33455,33570,33752,33996,34233,34360,34474,34591,34647,34808,34877,35027,35201,35340,35391,35568,35642,35888,35990,36002,36104,36161,36375,36484],["恶意试探",10520,13107,15477,17854,20166,22548,24866,27166,29495,31662,33994,36249,38590,40938,43260,45468,47663,49900,52067,54319,56621,58882,61088,63312,65650,67937,70289,72585,74916,77231,79519,81645,83973,86192,88444,90687,92968,95275,97476,99733,102124,104361,106740,109026,111235,113432,115681,117967,120237,122634,124934,127291,129653,131979,134253,136611,138939,141193,143449,145718,148026,150229,152488,154832,157024,159248,161629,163882,166082,168314,170717,172878,175212,177582,179886,182142,184487,186804,189141,191410,193678,195915,198199,200486,202901,205146,207369,209529,211732,213960,216355,218631,220868,223168,225496,227822,230034,232290,234424,236690],["欺软怕硬",10220,11369,12802,14286,15576,16701,17958,19244,20281,21560,22682,23848,24950,25935,27018,28044,29127,30216,31216,32165,33130,34189,35245,36325,37188,38192,39120,40043,40980,41800,42623,43608,44434,45349,46325,47189,47922,48855,49780,50709,51453,52183,52941,53741,54669,55482,56451,57350,58140,58866,59718,60476,61207,61933,62667,63302,64005,64778,65454,66204,67023,67862,68652,69274,70016,70679,71454,72166,72860,73636,74356,75200,75784,76386,77033,77622,78268,78928,79500,80095,80619,81313,82039,82676,83169,83697,84442,85134,85663,86330,86952,87492,88085,88589,89268,89848,90517,91148,91857,92467],["无脑侵占",10000,12535,14870,16954,19104,21343,23565,25688,27864,30029,32111,34238,36236,38451,40563,42749,44878,47049,49191,51414,53555,55725,57951,59932,62127,64295,66486,68555,70718,72951,75193,77365,79482,81686,83807,85938,88279,90388,92495,94628,96828,99041,101237,103430,105574,107808,109966,112026,114319,116456,118745,120842,123056,125203,127453,129693,131737,133852,136014,138174,140366,142499,144670,146866,149096,151229,153293,155515,157653,159792,161932,164083,166297,168424,170693,172841,174990,177137,179268,181467,183669,185842,188045,190188,192305,194528,196645,198856,201109,203296,205432,207638,209834,211993,214095,216339,218512,220666,222827,224965]]    var stepData1 = [["step","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299"],["吃哑巴亏",10360,10542,10463,10175,9909,9594,9420,8879,8515,7927,7577,7182,6639,6249,5776,5329,4840,4407,3874,3482,3134,2660,2348,2037,1739,1487,1266,1013,767,622,509,405,319,254,220,174,145,125,114,103,92,77,61,51,41,35,25,15,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["善意试探",9680,9663,9574,9472,9119,8790,8741,8257,7825,7516,7196,6677,6250,5752,5381,4957,4513,4160,3770,3392,2988,2570,2214,1885,1485,1239,1043,767,598,492,381,286,216,137,84,51,31,25,24,19,14,9,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["恶意试探",10040,11620,13006,14159,15586,16865,18003,19090,20088,21062,21973,22915,23838,24719,25471,26275,26979,27716,28347,28977,29453,30069,30503,31041,31456,31708,32017,32383,32638,32887,33089,33330,33458,33637,33741,33847,33925,33970,34014,34060,34118,34158,34189,34194,34257,34258,34295,34349,34342,34388,34376,34400,34476,34531,34537,34579,34549,34587,34586,34631,34640,34686,34752,34820,34821,34835,34908,34995,35041,35096,35111,35096,35119,35127,35178,35200,35238,35249,35319,35394,35449,35472,35484,35564,35599,35624,35658,35669,35709,35705,35745,35782,35800,35804,35825,35848,35884,35876,35905,35925,35909,35855,35836,35831,35863,35845,35841,35852,35864,35887,35880,35894,35886,35887,35887,35881,35885,35850,35853,35862,35867,35889,35905,35893,35914,35928,35942,35971,36002,36007,35991,35995,36003,35989,35973,35983,35972,36008,36008,36035,36050,36100,36128,36119,36114,36133,36130,36140,36150,36179,36211,36272,36293,36282,36270,36281,36273,36290,36289,36335,36364,36363,36409,36404,36399,36410,36427,36442,36457,36456,36455,36487,36518,36553,36572,36599,36611,36615,36629,36638,36624,36634,36641,36657,36660,36667,36684,36687,36682,36678,36692,36701,36712,36719,36748,36751,36768,36774,36785,36808,36806,36822,36862,36833,36837,36840,36840,36848,36858,36859,36888,36908,36964,36948,36941,36952,36981,36999,37011,37043,37050,37060,37065,37071,37076,37084,37123,37134,37160,37161,37169,37188,37221,37227,37263,37294,37298,37345,37364,37406,37408,37434,37429,37430,37449,37477,37500,37480,37475,37487,37498,37496,37500,37508,37526,37512,37514,37528,37524,37532,37540,37537,37545,37553,37550,37547,37551,37533,37538,37531,37521,37532,37546,37540,37534,37531,37522,37534,37535,37534,37539,37507,37529,37541,37546,37532,37540,37560,37564,37565,37565,37569,37572,37595,37604,37622,37636,37674,37675,37667],["欺软怕硬",9160,9057,9289,9760,10123,10275,10452,10540,10634,10585,10529,10559,10537,10551,10623,10500,10419,10298,10200,10006,9940,9797,9652,9406,9188,9019,8893,8699,8527,8289,8069,7894,7705,7559,7356,7186,7045,6894,6758,6623,6512,6420,6320,6234,6136,6053,5966,5875,5778,5696,5627,5567,5473,5394,5358,5270,5221,5168,5143,5107,5072,5016,4955,4907,4872,4828,4774,4700,4651,4602,4573,4478,4403,4371,4306,4253,4206,4168,4141,4079,4020,3975,3943,3869,3808,3777,3742,3706,3667,3628,3588,3558,3498,3453,3393,3380,3348,3290,3270,3227,3218,3195,3176,3136,3136,3127,3121,3097,3059,3032,3031,3000,2978,2962,2957,2966,2956,2930,2925,2927,2915,2875,2863,2860,2851,2825,2803,2775,2761,2740,2739,2741,2728,2719,2712,2702,2686,2700,2693,2700,2680,2650,2641,2632,2621,2623,2614,2591,2561,2540,2540,2517,2501,2485,2483,2474,2479,2463,2468,2438,2449,2429,2402,2394,2390,2370,2350,2355,2337,2317,2310,2290,2286,2254,2239,2220,2228,2213,2198,2183,2167,2168,2170,2158,2153,2137,2118,2113,2110,2112,2100,2095,2090,2075,2068,2075,2068,2054,2054,2040,2026,2019,2012,2019,2012,2014,2014,2000,2004,2004,2004,2006,1994,1987,1987,1990,1983,1976,1985,1994,1979,1986,1986,1987,1985,1976,1974,1974,1972,1977,1982,1980,1973,1971,1971,1972,1974,1965,1970,1961,1952,1950,1946,1958,1954,1943,1949,1945,1934,1937,1949,1952,1957,1960,1951,1961,1950,1946,1949,1945,1957,1953,1949,1961,1964,1976,1986,1989,1985,1988,1991,1980,1983,1988,1993,1989,1985,1988,1991,1980,1976,1979,1977,1973,1969,1965,1970,1973,1976,1982,1994,1992,1999,2002,2005,2019,2015,2004,2011,2019],["无脑侵占",10760,12390,13820,15170,16359,17620,18825,20016,21159,22307,23363,24295,25224,26095,26936,27870,28641,29302,30025,30712,31401,31990,32625,33105,33649,34138,34464,34848,35161,35411,35647,35757,35964,36067,36219,36346,36428,36553,36654,36753,36790,36839,36904,36970,36991,37068,37100,37124,37234,37256,37299,37315,37304,37308,37326,37357,37415,37410,37414,37407,37427,37425,37405,37365,37398,37417,37385,37360,37353,37344,37348,37451,37496,37509,37501,37521,37524,37538,37459,37436,37430,37451,37461,37443,37469,37489,37479,37500,37489,37525,37511,37502,37534,37561,37592,37573,37572,37628,37624,37639,37660,37727,37752,37804,37775,37792,37791,37784,37806,37804,37812,37821,37854,37869,37865,37856,37865,37915,37915,37898,37898,37915,37906,37919,37904,37906,37912,37911,37890,37902,37910,37907,37915,37929,37956,37945,37972,37921,37935,37907,37906,37883,37854,37865,37884,37876,37882,37891,37896,37891,37876,37837,37832,37845,37863,37863,37869,37871,37870,37858,37848,37853,37832,37853,37870,37871,37872,37866,37878,37897,37902,37888,37862,37863,37862,37848,37834,37845,37846,37841,37863,37849,37841,37831,37827,37830,37829,37832,37847,37847,37843,37836,37825,37826,37802,37793,37782,37787,37777,37763,37771,37760,37725,37741,37744,37740,37738,37744,37746,37742,37714,37701,37666,37690,37694,37675,37651,37640,37624,37587,37592,37578,37580,37566,37561,37562,37520,37514,37491,37483,37470,37448,37427,37424,37390,37358,37368,37330,37303,37268,37269,37245,37252,37243,37226,37206,37178,37203,37220,37206,37190,37189,37188,37167,37166,37166,37173,37160,37162,37157,37145,37149,37144,37132,37132,37126,37112,37121,37117,37118,37124,37121,37105,37115,37125,37131,37144,37126,37123,37134,37128,37155,37141,37133,37132,37150,37143,37121,37115,37109,37106,37104,37108,37083,37072,37054,37042,37016,37022,37028]]    $.setup = function () {        renderReport(initChart('echartContainer-3'), -3, stepData_3)        renderReport(initChart('echartContainer-1'), -1, stepData_1)        renderReport(initChart('echartContainer0'), 0, stepData0)        renderReport(initChart('echartContainer1'), 1, stepData1)        renderReport(initChart('echartContainer3'), 3, stepData3)        if (isMobile.any) { // 手机兼容性            size = mobileSize            nodeSize = mobileNodeSize        }        $.createCanvas(size * nodeSize, size * nodeSize);        $.noStroke();                stepData[0].push(String(stepData[0].length - 1))        stepData[1].push(0)        stepData[2].push(0)        stepData[3].push(0)        stepData[4].push(0)        stepData[5].push(0)        // 初始化节点矩阵        for (i = 0; i < size; i++) {            nodes[i] = [];            for (j = 0; j < size; j++) {                node = new Node($, i, j, nodeSize);                node.type = Math.floor(Math.random() * 5, 1)                node.score = startupScore                node.refresh()                nodes[i][j] = node                nodeList.push(node)                stepData[node.type + 1][stepData[0].length - 1] += node.score            }        }    }    var sleep = 0    var sleepTime = 30    $.draw = function () {        if (sleepTime) { // 减慢程序速度，并逐渐缩短间隔            if (sleep++ < sleepTime) return            sleep = 0            sleepTime -= 1        }        aliveNodes = _.filter(nodeList, (n) => !n.isDead())        _.chunk(_.shuffle(aliveNodes), 2).forEach(battle)        stepData[0].push(String(stepData[0].length - 1))        stepData[1].push(0)        stepData[2].push(0)        stepData[3].push(0)        stepData[4].push(0)        stepData[5].push(0)        aliveCount = 0        nodeList.forEach((node) => {            if (!node.isDead()) {                aliveCount++                node.score += aliveBonus                stepData[node.type + 1][stepData[0].length - 1] += node.score            }            node.refresh()        })        if (aliveCount != aliveNodes.length) {            renderReport(myChart, aliveBonus, stepData)        }        if (aliveNodes.length < 2 || stepData[0].length > 300) {            $.noLoop()        }    }    function battle(pair) {        if (typeof pair[1] === 'undefined') return        node1 = pair[0]        node2 = pair[1]        attack1 = node1.attackOrNot(node2)        attack2 = node2.attackOrNot(node1)        _.set(node1.memories, String(node2.x) + "_" + String(node2.y), attack2)        _.set(node2.memories, String(node1.x) + "_" + String(node1.y), attack1)        if (!attack1 && !attack2) {            node1.score += 3            node2.score += 3            return        }        if (attack1 ^ attack2) {            if (attack1) {                node1.score += 3                node2.score -= 3            } else {                node2.score += 3                node1.score -= 3            }        }        if (node1.score > node2.score) {            node1.score += 1            node2.score -= 3        } else if (node1.score < node2.score) {            node2.score += 1            node1.score -= 3        } else {            node1.score -= 1            node2.score -= 1        }    }    function renderReport(chart, aliveBonus, stepData) {        option = {            title: {                subtext: (aliveBonus > 0 ? "每回合获得" : "每回合消耗") + Math.abs(aliveBonus) + "分",                right: '10%',                top: '10',            },            legend: {},            tooltip: {                trigger: 'axis',                showContent: false            },            dataset: { source: stepData },            xAxis: {type: 'category'},            yAxis: {gridIndex: 0},            grid: {top: '10%', bottom: '50%'},            series: [                {type: 'line', smooth: true, seriesLayoutBy: 'row', color: typeColors[0]},                {type: 'line', smooth: true, seriesLayoutBy: 'row', color: typeColors[1]},                {type: 'line', smooth: true, seriesLayoutBy: 'row', color: typeColors[2]},                {type: 'line', smooth: true, seriesLayoutBy: 'row', color: typeColors[3]},                {type: 'line', smooth: true, seriesLayoutBy: 'row', color: typeColors[4]},                {                    type: 'pie',                    id: 'pie',                    radius: '40%',                    center: ['50%', '75%'],                    label: { formatter: '{b}: {@0} ({d}%)' },                    color: typeColors,                    encode: {                        itemName: 'step',                        value: '0',                        tooltip: '0'                    }                },            ]        };        chart.setOption(option);    }    function initChart(id) {        var chart = echarts.init(document.getElementById(id));        chart.on('updateAxisPointer', function (event) {            var xAxisInfo = event.axesInfo[0];            if (xAxisInfo) {                var dimension = xAxisInfo.value + 1;                chart.setOption({                    series: {                        id: 'pie',                        label: {                            formatter: '{b}: {@[' + dimension + ']} ({d}%)'                        },                        encode: {                            value: dimension,                            tooltip: dimension                        }                    }                });            }        });        return chart    }    };new p5(sketch, 'p5Container');</script><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;游戏规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每一回合,你需要在不知道对方出招的情况下,选择合作或者侵略&lt;/li&gt;
&lt;li&gt;合作方拿出3分,侵略方拿出2分,作为成本;&lt;/li&gt;
&lt;li&gt;双方都选择合作时,双方均能收回成本,并获取收益;&lt;br&gt;
侵略方的成本无法产生收益,但可以掠夺对方的成本作为收益。&lt;br&gt;
双方合作,各加3分,成本获利率100%;&lt;br&gt;
某方侵略,合作方减3分,侵略方加3分,成本获利率150%;&lt;br&gt;
互相侵略,分数高者加1分，分数低者减3分，分数相同时各减1分&lt;/li&gt;
&lt;li&gt;每回合结束后，生存的玩家同时失去/获得指定分数，来模拟环境是否恶劣&lt;/li&gt;
&lt;li&gt;每个人起始20分,小于3分则失去继续游戏资格&lt;/li&gt;
&lt;li&gt;每回合将所有人随机两两配对，当仅剩一名玩家或300回合后游戏结束&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;游戏主体类型:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;吃哑巴亏：始终合作&lt;/li&gt;
&lt;li&gt;善意试探：如果双方尚未合作,首先合作,之后重复对方上一步的行动&lt;/li&gt;
&lt;li&gt;恶意试探：如果双方尚未合作,首先侵略,之后重复对方上一步的行动&lt;/li&gt;
&lt;li&gt;欺软怕硬：对方分数低于自己则侵略,否则合作&lt;/li&gt;
&lt;li&gt;无脑侵占：始终侵略&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.notee.cc/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.notee.cc/tags/JavaScript/"/>
    
      <category term="p5.js" scheme="http://www.notee.cc/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>迷宫寻路</title>
    <link href="http://www.notee.cc/JavaScript/p5_aStar/"/>
    <id>http://www.notee.cc/JavaScript/p5_aStar/</id>
    <published>2019-06-29T16:00:00.000Z</published>
    <updated>2020-09-10T09:30:26.030Z</updated>
    
    <content type="html"><![CDATA[<p>利用<code>p5.js</code>演示<code>A Star</code>算法迷宫寻路。</p><a id="more"></a><div id="p5Container" style="width: 100%;overflow: hidden;"><style type="text/css">.p5Canvas{margin: 0 auto;display: block !important;}</style><script src="https://cdn.jsdelivr.net/npm/p5@0.7.1/lib/p5.min.js"></script><script src="https://cdn.jsdelivr.net/npm/lodash@4.17.11/lodash.min.js"></script><script src="https://cdn.jsdelivr.net/npm/ismobilejs@0.5.1/dist/isMobile.min.js"></script></div><script>function Node(p5, x, y, size) {    this.x = x;    this.y = y;    this.size = size;    this.type = 0;    this.fill = ''    this.fill_blinked = ''    this.$ = p5    this.parent = null // type of Node    this.f = 0    this.g = 0}Node.prototype.refresh = function (fill = '') {    switch (this.type) {        case 0: // cell            this.fill = '#EBEEF5'            break        case 1: // entrance            this.fill = '#409EFF'            break        case 2: // exit            this.fill = '#67C23A'            break        case 3: // wall            this.fill = '#222222'            break        case 4: // frontier            this.fill = '#F8C9DB'            break    }    if (fill) {        this.fill = fill    }    this.$.fill(this.fill)    this.$.rect(this.x * this.size, this.y * this.size, this.size, this.size)}Node.prototype.init = function ($) {    this.$ = $    this.type = 0}Node.prototype.setAsCell = function () {    this.type = 0    this.refresh()}Node.prototype.setAsEntrance = function () {    this.type = 1    this.refresh()}Node.prototype.setAsExit = function () {    this.type = 2    this.refresh()}Node.prototype.setAsWall = function () {    this.type = 3    this.refresh()}Node.prototype.setAsFrontier = function () {    this.type = 4    this.refresh()}Node.prototype.setAsOpen = function () {    this.refresh('#409EFF')}Node.prototype.setAsClosed = function () {    this.refresh('#F8C9DB')}// 调用两次可以实现闪烁效果Node.prototype.blink = function () {    if (this.fill_blinked != '') {        this.fill = this.fill_blinked        this.fill_blinked = ''    } else {        this.fill_blinked = this.fill        this.fill = '#F94383'    }    this.refresh(this.fill)}Node.prototype.isBlinking = function () {    return this.fill_blinked != ''}function sketch($) { // 画板    var nodes = [] // 节点矩阵    var nodeList = [] // 节点列表    var size = 49 // 矩阵大小，奇数（奇数节点是通道，偶数节点是墙）    var nodeSize = 10 // 节点方块大小    var entranceNode = null // 入口节点    var exitNode = null // 出口节点    var cells = [] // 矩阵搜索映射，0是墙，1是通道    var frontiers = [] // 待搜索节点    var finished = 0 // 演示结束    var blinking = null // 闪烁中的节点    var trying = null // 尝试中的节点    var openList = []    var closedList = []    $.setup = function () {        if (isMobile.any) { // 手机兼容性            size = 39            nodeSize = 6        }        $.createCanvas(size * nodeSize, size * nodeSize);        $.noStroke();        // 初始化节点矩阵        for (i = 0; i < size; i++) {            nodes[i] = [];            for (j = 0; j < size; j++) {                node = new Node($, i, j, nodeSize);                nodes[i][j] = node                nodeList.push(node)            }        }        generateMaze() // generate maze and then select both entrance and exit out        // put the starting node on the open list (you can leave its f at zero)        openList.push(entranceNode)    }        var sleep = 0    var sleepTime = 50    $.draw = function () {        if (sleepTime) { // 减慢程序速度，并逐渐缩短间隔            if (sleep++ < sleepTime) return            sleep = 0            sleepTime -= 5        }        if (finished || !openList.length) {            console.info('Done')            console.info(exitNode)            $.noLoop()        }        if (blinking) { // 将闪烁过的节点恢复原来的状态            blinking.blink()            blinking = null            refreshNodes()            return        }        // a) find the node with the least f on the open list, call it "q"        // b) pop q off the open list        // c) generate q's successors and set their parents to q        // d) for each successor        //     i) if successor is the goal, stop search        //     successor.g = q.g + distance between successor and q        //     successor.h = distance from goal to successor         //     successor.f = successor.g + successor.h        //     ii) if a node with the same position as         //     successor is in the OPEN list which has a         //     lower f than successor, skip this successor        //     iii) if a node with the same position as         //     successor is in the CLOSED list which has        //     a lower f than successor, skip this successor        //     otherwise, add the node to the open list        // end (for loop)        // e) push q on the closed list        trying = q = _.minBy(openList, n => n.f)        _.remove(openList, n => _.isEqual(n, q))        getNeighbors(q.x, q.y).forEach(function (successor) {            if (finished) return            successor = nodes[successor[0]][successor[1]]            if (successor.x == exitNode.x && successor.y == exitNode.y) {                nodes[successor.x][successor.y].parent = nodes[q.x][q.y]                trying = exitNode                finished = 1            } else {                successor.g = q.g + 1                h = Math.abs(successor.x - exitNode.x) + Math.abs(successor.y - exitNode.y) // Manhattan Distance                successor.f = successor.g + h                if (_.filter(openList, n => n.x == successor.x && n.y == successor.y && n.f < successor.f).length) return                if (_.filter(closedList, n => n.x == successor.x && n.y == successor.y).length) return                openList.push(successor)                nodes[successor.x][successor.y].parent = nodes[q.x][q.y]            }        })        closedList.push(q)        blinking = nodes[q.x][q.y]        blinking.blink()    }    generateMaze = function () {        // 初始化搜索映射        for(i = 0; i < size; i++) {            cells[i] = new Array(size).fill(0)        }        // 随机确定开始搜索的节点        start = [Math.floor(Math.random() * (size - 1) / 2) * 2, Math.floor(Math.random() * (size - 1) / 2) * 2]        cells[start[0]][start[1]] = 1        frontiers = getFrontiers(start[0], start[1])        while(frontiers.length) {            frontier = frontiers.splice(Math.floor(Math.random() * frontiers.length), 1).pop(); // 随机选取一个待搜索节点            cells[frontier[0]][frontier[1]] = 1 // 将其标记为通道            inners = getInners(frontier[0], frontier[1])            if (inners) {                inner = inners.splice(Math.floor(Math.random() * inners.length), 1).pop();                cells[(frontier[0] + inner[0])/2][(frontier[1] + inner[1])/2] = 1 // 将分隔该节点和它的某一个已搜索节点的墙给去掉                frontiers.push(...getFrontiers(frontier[0], frontier[1])) // 将它相邻的待搜索节点加入待搜索列表中                frontiers = _.uniqWith(frontiers, _.isEqual) // 给待搜索列表去重            }        }        // 随机确定入口和出口        entranceNode = nodes[0][Math.floor(Math.random() * (size - 1) / 2) * 2]        exitNode = nodes[size - 1][Math.floor(Math.random() * (size - 1) / 2) * 2]        refreshNodes()    }    // 重新渲染节点矩阵    refreshNodes = function () {        nodeList.forEach((node) => {            if (frontiers.length && _.find(frontiers, i => _.isEqual(i, [node.x, node.y]))) {                node.setAsFrontier()            } else if (cells[node.x][node.y] == 1) {                node.setAsCell()            } else if (cells[node.x][node.y] == 0) {                node.setAsWall()            } else {                console.error('unexpect node type')            }        })        openList.forEach((node) => {            node.setAsOpen()        })        closedList.forEach((node) => {            node.setAsClosed()        })        entranceNode.setAsEntrance()        exitNode.setAsExit()        refreshPath()    }    // 重新渲染搜索路径    refreshPath = function() {        if (trying) {            to = trying            while (from = to.parent) {                nodes[(from.x + to.x)/2][(from.y + to.y)/2].setAsClosed()                to = from            }        }    }    // 获取坐标下的邻居节点    getNeighbors = function (x, y) {        if (x%2 || y%2) console.error(x, y, 'this is not a cell')        rtn = []        if (x > 1 && cells[x - 1][y] == 1) rtn.push([x - 2, y])        if (y > 1 && cells[x][y - 1] == 1) rtn.push([x, y - 2])        if (x < size - 1 && cells[x + 1][y] == 1) rtn.push([x + 2, y])        if (y < size - 1 && cells[x][y + 1] == 1) rtn.push([x, y + 2])        return rtn    }    // 获取坐标下待搜索的邻居节点    getFrontiers = function (x, y) {        if (x%2 || y%2) console.error(x, y, 'this is not a cell')        rtn = []        if (x > 1 && cells[x - 2][y] == 0) rtn.push([x - 2, y])        if (y > 1 && cells[x][y - 2] == 0) rtn.push([x, y - 2])        if (x < size - 1 && cells[x + 2][y] == 0) rtn.push([x + 2, y])        if (y < size - 1 && cells[x][y + 2] == 0) rtn.push([x, y + 2])        return rtn    }    // 获取坐标下已搜索的邻居节点    getInners = function (x, y) {        if (x%2 || y%2) console.error(x, y, 'this is not a cell')        inners = []        if (x > 1 && cells[x - 2][y] == 1) inners.push([x - 2, y])        if (y > 1 && cells[x][y - 2] == 1) inners.push([x, y - 2])        if (x < size - 1 && cells[x + 2][y] == 1) inners.push([x + 2, y])        if (y < size - 1 && cells[x][y + 2] == 1) inners.push([x, y + 2])        return inners;    }};new p5(sketch, 'p5Container');</script><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用&lt;code&gt;p5.js&lt;/code&gt;演示&lt;code&gt;A Star&lt;/code&gt;算法迷宫寻路。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.notee.cc/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.notee.cc/tags/JavaScript/"/>
    
      <category term="p5.js" scheme="http://www.notee.cc/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>迷宫生成</title>
    <link href="http://www.notee.cc/JavaScript/p5_maze/"/>
    <id>http://www.notee.cc/JavaScript/p5_maze/</id>
    <published>2019-06-29T16:00:00.000Z</published>
    <updated>2020-09-10T09:30:26.041Z</updated>
    
    <content type="html"><![CDATA[<p>利用<code>p5.js</code>演示<code>Prim</code>算法动态生成一张迷宫地图。</p><a id="more"></a><div id="p5Container" style="width: 100%;overflow: hidden;"><style type="text/css">.p5Canvas{margin: 0 auto;display: block !important;}</style><script src="https://cdn.jsdelivr.net/npm/p5@0.7.1/lib/p5.min.js"></script><script src="https://cdn.jsdelivr.net/npm/lodash@4.17.11/lodash.min.js"></script><script src="https://cdn.jsdelivr.net/npm/ismobilejs@0.5.1/dist/isMobile.min.js"></script></div><script>function Node(p5, x, y, size) {    this.x = x;    this.y = y;    this.size = size;    this.type = 0;    this.fill = '0'    this.fill_blinked = ''    this.$ = p5}Node.prototype.refresh = function (fill = '') {    switch (this.type) {        case 0: // cell            this.fill = '#EBEEF5'            break        case 1: // entrance            this.fill = '#409EFF'            break        case 2: // exit            this.fill = '#67C23A'            break        case 3: // wall            this.fill = '#222222'            break        case 4: // frontier            this.fill = '#F8C9DB'            break    }    if (fill) {        this.fill = fill    }    this.$.fill(this.fill)    this.$.rect(this.x * this.size, this.y * this.size, this.size, this.size)}Node.prototype.setAsCell = function () {    this.type = 0    this.refresh()}Node.prototype.setAsEntrance = function () {    this.type = 1    this.refresh()}Node.prototype.setAsExit = function () {    this.type = 2    this.refresh()}Node.prototype.setAsWall = function () {    this.type = 3    this.refresh()}Node.prototype.setAsFrontier = function () {    this.type = 4    this.refresh()}// 调用两次可以实现闪烁效果Node.prototype.blink = function () {    if (this.fill_blinked != '') {        this.fill = this.fill_blinked        this.fill_blinked = ''    } else {        this.fill_blinked = this.fill        this.fill = '#F94383'    }    this.refresh(this.fill)}Node.prototype.isBlinking = function () {    return this.fill_blinked != ''}function sketch($) { // 画板    var nodes = [] // 节点矩阵    var nodeList = [] // 节点列表    var size = 49 // 矩阵大小，奇数（奇数节点是通道，偶数节点是墙）    var nodeSize = 10 // 节点方块大小    var entranceNode = null // 入口节点    var exitNode = null // 出口节点    var cells = [] // 矩阵搜索映射，0是墙，1是通道    var frontiers = [] // 待搜索节点    var finished = 0 // 演示结束    var blinking = null // 闪烁中的节点    $.setup = function () {        if (isMobile.any) { // 手机兼容性            size = 39            nodeSize = 6        }        $.createCanvas(size * nodeSize, size * nodeSize);        $.noStroke();        // 初始化节点矩阵        for (i = 0; i < size; i++) {            nodes[i] = [];            for (j = 0; j < size; j++) {                node = new Node($, i, j, nodeSize);                nodes[i][j] = node                nodeList.push(node)            }        }        // 初始化搜索映射        for(i = 0; i < size; i++) {            cells[i] = new Array(size).fill(0)        }        // 随机确定开始搜索的节点        start = [Math.floor(Math.random() * (size - 1) / 2) * 2, Math.floor(Math.random() * (size - 1) / 2) * 2]        cells[start[0]][start[1]] = 1        frontiers = getFrontiers(start[0], start[1])        refreshNodes()    }    var sleep = 0    var sleepTime = 100    $.draw = function () {        if (sleepTime) { // 减慢程序速度，并逐渐缩短间隔            if (sleep++ < sleepTime) return            sleep = 0            sleepTime -= 5        }        if (blinking) { // 将闪烁过的节点恢复原来的状态            blinking.blink()            blinking = null            refreshNodes()            return        }        if(!frontiers.length) { // 全部搜索完成            if (!finished) {                // 随机确定入口和出口                entranceNode = nodes[0][Math.floor(Math.random() * (size - 1) / 2) * 2]                exitNode = nodes[size - 1][Math.floor(Math.random() * (size - 1) / 2) * 2]                entranceNode.setAsEntrance()                exitNode.setAsExit()                finished = 1            }            $.noLoop()        }        frontier = frontiers.splice(Math.floor(Math.random() * frontiers.length), 1).pop(); // 随机选取一个待搜索节点        cells[frontier[0]][frontier[1]] = 1 // 将其标记为通道        inners = getInners(frontier[0], frontier[1])        if (inners) {            inner = inners.splice(Math.floor(Math.random() * inners.length), 1).pop();            cells[(frontier[0] + inner[0])/2][(frontier[1] + inner[1])/2] = 1 // 将分隔该节点和它的某一个已搜索节点的墙给去掉            frontiers.push(...getFrontiers(frontier[0], frontier[1])) // 将它相邻的待搜索节点加入待搜索列表中            frontiers = _.uniqWith(frontiers, _.isEqual) // 给待搜索列表去重        }        blinking = nodes[frontier[0]][frontier[1]]        blinking.blink()    }    // 重新渲染节点矩阵    refreshNodes = function () {        nodeList.forEach((node) => {            if (frontiers.length && _.find(frontiers, i => _.isEqual(i, [node.x, node.y]))) {                node.setAsFrontier()            } else if (cells[node.x][node.y] == 1) {                node.setAsCell()            } else if (cells[node.x][node.y] == 0) {                node.setAsWall()            } else {                console.error('unexpect node type')            }        })    }    // 获取坐标下待搜索的邻居节点    getFrontiers = function (x, y) {        if (x%2 || y%2) console.error(x, y, 'this is not a cell')        rtn = []        if (x > 1 && cells[x - 2][y] == 0) rtn.push([x - 2, y])        if (y > 1 && cells[x][y - 2] == 0) rtn.push([x, y - 2])        if (x < size - 1 && cells[x + 2][y] == 0) rtn.push([x + 2, y])        if (y < size - 1 && cells[x][y + 2] == 0) rtn.push([x, y + 2])        return rtn    }    // 获取坐标下已搜索的邻居节点    getInners = function (x, y) {        if (x%2 || y%2) console.error(x, y, 'this is not a cell')        inners = []        if (x > 1 && cells[x - 2][y] == 1) inners.push([x - 2, y])        if (y > 1 && cells[x][y - 2] == 1) inners.push([x, y - 2])        if (x < size - 1 && cells[x + 2][y] == 1) inners.push([x + 2, y])        if (y < size - 1 && cells[x][y + 2] == 1) inners.push([x, y + 2])        return inners;    }};new p5(sketch, 'p5Container');</script><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用&lt;code&gt;p5.js&lt;/code&gt;演示&lt;code&gt;Prim&lt;/code&gt;算法动态生成一张迷宫地图。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.notee.cc/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.notee.cc/tags/JavaScript/"/>
    
      <category term="p5.js" scheme="http://www.notee.cc/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>PHP 定义可配置的类常量</title>
    <link href="http://www.notee.cc/PHP/syntax_configurable_const/"/>
    <id>http://www.notee.cc/PHP/syntax_configurable_const/</id>
    <published>2019-04-02T10:15:52.000Z</published>
    <updated>2020-09-10T09:30:26.048Z</updated>
    
    <content type="html"><![CDATA[<p>应用场景是运营频繁修改下单满多少包邮、哪些用户下单可以不限量等。<br>代码中，这些属性被定义为类的常量，每次都去修改代码是比较难受的，但是语法上又不允许定义类常量为表达式。</p><p>一个小技巧是通过类自动加载时定义一个全局常量，然后利用全局常量做媒介：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line">define(<span class="string">'POSTAGE_FREE_SHIPMENT_ORDER_AMOUNT'</span>, config(<span class="string">'order.FREE_SHIPMENT_ORDER_AMOUNT'</span>));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Postage</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> FREE_SHIPMENT_ORDER_AMOUNT = POSTAGE_FREE_SHIPMENT_ORDER_AMOUNT; <span class="comment">// 满多少可免运费</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是需要确保命名合理，不会污染全局常量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;应用场景是运营频繁修改下单满多少包邮、哪些用户下单可以不限量等。&lt;br&gt;
代码中，这些属性被定义为类的常量，每次都去修改代码是比较难受的，但是语法上又不允许定义类常量为表达式。&lt;/p&gt;
&lt;p&gt;一个小技巧是通过类自动加载时定义一个全局常量，然后利用全局常量做媒介：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Syntax" scheme="http://www.notee.cc/tags/Syntax/"/>
    
      <category term="Trick" scheme="http://www.notee.cc/tags/Trick/"/>
    
  </entry>
  
  <entry>
    <title>理解Laravel框架运行机制</title>
    <link href="http://www.notee.cc/Laravel/understanding_laravel_lifetime/"/>
    <id>http://www.notee.cc/Laravel/understanding_laravel_lifetime/</id>
    <published>2019-03-23T09:11:09.000Z</published>
    <updated>2020-09-10T09:30:26.041Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始学习这个框架的时候，看文档绕的我半死，主要是因为文档基本在阐述如何使用，而没有过多讲解功能是如何实现的。文档所灌输的一堆概念对初学者并不友好，更适合做入门之后的参考资料。<br>框架的入口文件（<code>public/index.php</code>）是我目前见过的最简洁但却最逻辑分明的，暂且跟着程序逻辑，一点点解开Laravel的核心概念。<br>希望通过这篇文章，我们可以对Laravel程序的生命周期有清晰的认识，更重要的是理解其设计原理，再也不怕文档中的诗兴大发了。<br>这篇文章会尽量侧重于解释名词和原理，如果你刚了解Laravel，大可不必担心。</p><p>推荐阅读：(框架作者有个文章，讲解他是如何设计Laravel的，看完忘记保存下来了T_T，找到再补)</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#application%E5%92%8Ccontainer">Application和Container</a></li><li><a href="#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5">依赖注入</a></li><li><a href="#serviceprovider">ServiceProvider</a></li><li><a href="#request">Request</a></li><li><a href="#bootstrapper">Bootstrapper</a><ul><li><a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7">异常捕获</a></li><li><a href="#facades">Facades</a></li><li><a href="#%E5%8A%A0%E8%BD%BDserviceprovider">加载ServiceProvider</a></li></ul></li><li><a href="#pipeline%E5%92%8Cmiddleware">Pipeline和Middleware</a></li><li><a href="#router">Router</a><ul><li><a href="#%E8%B7%AF%E7%94%B1%E5%88%86%E5%8F%91">路由分发</a></li><li><a href="#response">Response</a></li></ul></li><li><a href="#%E7%A8%8B%E5%BA%8F%E9%80%80%E5%87%BA">程序退出</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><p><a id="markdown-application和container" name="application和container"></a></p><h2 id="application和container"><a class="markdownIt-Anchor" href="#application和container"></a> Application和Container</h2><p>Application扩展了Container，本质上是一个IOC容器，可以理为是一个全局对象池，里面存放了各种全局类与属性，方便程序逻辑复用这些对象。</p><p>Container的<code>instance($abstract, $instance)</code>方法可以理解为一个键值存储系统，为一个实例（创建的类，或者是简单的数据结构）分配一个索引键，这样就可以通过简写的索引来访问所存储的具体实例。</p><p>Container还有一个<code>bind($abstract, $concrete = null, $shared = false)</code>方法也是用来创建实例，它所描述的是可以通过索引来创建这个实例，而不是像<code>instance</code>那样直接将实例所绑定，看起来更像是用来协助<code>instance</code>来完成这一实例的注册任务。</p><p>Container也贴心的设置了<code>alias($abstract, $alias)</code>、<code>extend($abstract, Closure $closure)</code>和<code>rebinding($abstract, Closure $callback)</code>方法，方便我们为索引设置别名、在实例生成后操作该实例、旧实例被覆盖时操作新的实例。</p><p>Container的<code>make($abstract, array $parameters = [])</code>方法便是获取这些注册的实例的，它会解析出索引对应的具体对象（分析索引别名，是否需要新的实例），然后返回。</p><p>在Application的构造方法中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($basePath = null)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($basePath) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setBasePath($basePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseBindings();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseServiceProviders();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerCoreContainerAliases();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将各种路径注册到实例中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBasePath</span><span class="params">($basePath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;basePath = rtrim($basePath, <span class="string">'\/'</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;bindPathsInContainer();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bindPathsInContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path'</span>, <span class="keyword">$this</span>-&gt;path());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.base'</span>, <span class="keyword">$this</span>-&gt;basePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.lang'</span>, <span class="keyword">$this</span>-&gt;langPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.config'</span>, <span class="keyword">$this</span>-&gt;configPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.public'</span>, <span class="keyword">$this</span>-&gt;publicPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.storage'</span>, <span class="keyword">$this</span>-&gt;storagePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.database'</span>, <span class="keyword">$this</span>-&gt;databasePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.resources'</span>, <span class="keyword">$this</span>-&gt;resourcePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.bootstrap'</span>, <span class="keyword">$this</span>-&gt;bootstrapPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自身也存储到实例中（索引是<code>app</code>和<code>Container::class</code>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseBindings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'app'</span>, <span class="keyword">$this</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(Container::class, <span class="keyword">$this</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(PackageManifest::class, <span class="keyword">new</span> PackageManifest(</span><br><span class="line">        <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;basePath(), <span class="keyword">$this</span>-&gt;getCachedPackagesPath()</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后为一些类设置别名，指向相应的索引</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerCoreContainerAliases</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ([</span><br><span class="line">        <span class="string">'app'</span> =&gt; [\Illuminate\Foundation\Application::class, \Illuminate\Contracts\Container\Container::class, \Illuminate\Contracts\Foundation\Application::class,  \Psr\Container\ContainerInterface::class],</span><br><span class="line">        <span class="comment">// 省略一些</span></span><br><span class="line">    ] <span class="keyword">as</span> $key =&gt; $aliases) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($aliases <span class="keyword">as</span> $alias) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;alias($key, $alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果我们调用<code>app-&gt;make(\Psr\Container\ContainerInterface::class)</code>或者<code>app-&gt;make('app')</code>，都可以获得相同的Application实例。</p><p><a id="markdown-依赖注入" name="依赖注入"></a></p><h2 id="依赖注入"><a class="markdownIt-Anchor" href="#依赖注入"></a> 依赖注入</h2><p>在调用<code>make</code>方法让IOC容器为我们生成实例时，会为实例注入相应的依赖，举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(B $b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">somethingToDo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app()-&gt;bind(<span class="string">'a'</span>, A::class)</span><br><span class="line">app()-&gt;make(<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure><p>通过依赖注入，我们可以不用在每一个方法中手动去实例化一个对象，只需要在构造方法中声明即可（其实并不能叫声明，PHP并没有这种语法，它只是利用一种小技巧来模拟声明）。</p><p><code>make</code>方法通过调用<code>build</code>方法来构造一个新的实例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">($concrete)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// If the concrete type is actually a Closure, we will just execute it and</span></span><br><span class="line">    <span class="comment">// hand back the results of the functions, which allows functions to be</span></span><br><span class="line">    <span class="comment">// used as resolvers for more fine-tuned resolution of these objects.</span></span><br><span class="line">    <span class="keyword">if</span> ($concrete <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line">        <span class="keyword">return</span> $concrete(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;getLastParameterOverride());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $reflector = <span class="keyword">new</span> ReflectionClass($concrete);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the type is not instantiable, the developer is attempting to resolve</span></span><br><span class="line">    <span class="comment">// an abstract type such as an Interface of Abstract Class and there is</span></span><br><span class="line">    <span class="comment">// no binding registered for the abstractions so we need to bail out.</span></span><br><span class="line">    <span class="keyword">if</span> (! $reflector-&gt;isInstantiable()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;notInstantiable($concrete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;buildStack[] = $concrete;</span><br><span class="line"></span><br><span class="line">    $constructor = $reflector-&gt;getConstructor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are no constructors, that means there are no dependencies then</span></span><br><span class="line">    <span class="comment">// we can just resolve the instances of the objects right away, without</span></span><br><span class="line">    <span class="comment">// resolving any other types or dependencies out of these containers.</span></span><br><span class="line">    <span class="keyword">if</span> (is_null($constructor)) &#123;</span><br><span class="line">        array_pop(<span class="keyword">$this</span>-&gt;buildStack);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> $concrete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $dependencies = $constructor-&gt;getParameters();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Once we have all the constructor's parameters we can create each of the</span></span><br><span class="line">    <span class="comment">// dependency instances and then use the reflection instances to make a</span></span><br><span class="line">    <span class="comment">// new instance of this class, injecting the created dependencies in.</span></span><br><span class="line">    $instances = <span class="keyword">$this</span>-&gt;resolveDependencies(</span><br><span class="line">        $dependencies</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    array_pop(<span class="keyword">$this</span>-&gt;buildStack);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $reflector-&gt;newInstanceArgs($instances);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入一个类的名称，它会通过反射来获取这个类的构造方法及其参数，然后处理参数中声明的依赖，利用向<code>newInstanceArgs</code>中传递处理后的合法参数来生成实例。</p><p><a id="markdown-serviceprovider" name="serviceprovider"></a></p><h2 id="serviceprovider"><a class="markdownIt-Anchor" href="#serviceprovider"></a> ServiceProvider</h2><p>注册ServiceProvider是Application的另一个重要的功能，希望通过IOC容器来将服务的使用和初始化解除耦合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($provider, $options = [], $force = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (($registered = <span class="keyword">$this</span>-&gt;getProvider($provider)) &amp;&amp; ! $force) &#123;</span><br><span class="line">        <span class="keyword">return</span> $registered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the given "provider" is a string, we will resolve it, passing in the</span></span><br><span class="line">    <span class="comment">// application instance automatically for the developer. This is simply</span></span><br><span class="line">    <span class="comment">// a more convenient way of specifying your service provider classes.</span></span><br><span class="line">    <span class="keyword">if</span> (is_string($provider)) &#123;</span><br><span class="line">        $provider = <span class="keyword">$this</span>-&gt;resolveProvider($provider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method_exists($provider, <span class="string">'register'</span>)) &#123;</span><br><span class="line">        $provider-&gt;register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;markAsRegistered($provider);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the application has already booted, we will call this boot method on</span></span><br><span class="line">    <span class="comment">// the provider class so it has an opportunity to do its boot logic and</span></span><br><span class="line">    <span class="comment">// will be ready for any usage by this developer's application logic.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;booted) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bootProvider($provider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $provider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册时会实例化这个Provider（将Application作为构造参数），然后调用其注册方法（将服务绑定到IOC容器中）。</p><p>至此，Application实例已经创建好了。其中该有的实例和别名已经设置妥当，必要的ServiceProvider也实例化并注册好了。(这就是注释里所谓的’Turn On The Lights’ …)</p><p><a id="markdown-request" name="request"></a></p><h2 id="request"><a class="markdownIt-Anchor" href="#request"></a> Request</h2><p>Laravel是这样描述处理并响应一个请求的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br></pre></td></tr></table></figure><p><code>Illuminate\Http\Request::capture()</code>借助<a href="https://symfony.com/doc/current/components/http_foundation.html" target="_blank" rel="noopener">Symfony的HttpFoundation组件</a>对当前的请求进行解析，封装成一个统一格式的对象:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">capture</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>::enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::createFromBase(SymfonyRequest::createFromGlobals());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFromBase</span><span class="params">(SymfonyRequest $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($request <span class="keyword">instanceof</span> <span class="keyword">static</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $content = $request-&gt;content;</span><br><span class="line"></span><br><span class="line">    $request = (<span class="keyword">new</span> <span class="keyword">static</span>)-&gt;duplicate(</span><br><span class="line">        $request-&gt;query-&gt;all(), $request-&gt;request-&gt;all(), $request-&gt;attributes-&gt;all(),</span><br><span class="line">        $request-&gt;cookies-&gt;all(), $request-&gt;files-&gt;all(), $request-&gt;server-&gt;all()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    $request-&gt;content = $content;</span><br><span class="line"></span><br><span class="line">    $request-&gt;request = $request-&gt;getInputSource();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>$kernal-&gt;handle($request)</code>中，有一个兜底的异常捕获：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;sendRequestThroughRouter($request);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reportException($e);</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reportException($e = <span class="keyword">new</span> FatalThrowableError($e));</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">'events'</span>]-&gt;dispatch(</span><br><span class="line">        <span class="keyword">new</span> Events\RequestHandled($request, $response)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</span><br><span class="line">                -&gt;send($request)</span><br><span class="line">                -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</span><br><span class="line">                -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-bootstrapper" name="bootstrapper"></a></p><h2 id="bootstrapper"><a class="markdownIt-Anchor" href="#bootstrapper"></a> Bootstrapper</h2><p><code>bootstrap</code>方法可以使Application针对当前环境（Http请求/CLI脚本）来加载不同的模块，为应用处理请求提供必要的支持。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bootstrapWith(<span class="keyword">$this</span>-&gt;bootstrappers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Http默认的Bootstraper有以下几种：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $bootstrappers = [</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadConfiguration::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\HandleExceptions::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterFacades::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterProviders::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\BootProviders::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><a id="markdown-环境变量" name="环境变量"></a></p><h3 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量"></a> 环境变量</h3><p>检查配置缓存，借助<a href="https://github.com/vlucas/phpdotenv" target="_blank" rel="noopener">Dotenv</a>，根据当前应用的环境加载<code>.env</code>文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($app-&gt;configurationIsCached()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;checkForSpecificEnvironmentFile($app);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        (<span class="keyword">new</span> Dotenv($app-&gt;environmentPath(), $app-&gt;environmentFile()))-&gt;load();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidPathException $e) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存文件是通过<code>artisan</code>命令手动生成的，暂且不做深入。</p><p><a id="markdown-配置文件" name="配置文件"></a></p><h3 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h3><p>检查缓存，加载配置文件，设置软件环境、时区等。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $items = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First we will see if we have a cache configuration file. If we do, we'll load</span></span><br><span class="line">    <span class="comment">// the configuration items from that file so that it is very quick. Otherwise</span></span><br><span class="line">    <span class="comment">// we will need to spin through every configuration file and load them all.</span></span><br><span class="line">    <span class="keyword">if</span> (file_exists($cached = $app-&gt;getCachedConfigPath())) &#123;</span><br><span class="line">        $items = <span class="keyword">require</span> $cached;</span><br><span class="line"></span><br><span class="line">        $loadedFromCache = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next we will spin through all of the configuration files in the configuration</span></span><br><span class="line">    <span class="comment">// directory and load each one into the repository. This will make all of the</span></span><br><span class="line">    <span class="comment">// options available to the developer for use in various parts of this app.</span></span><br><span class="line">    $app-&gt;instance(<span class="string">'config'</span>, $config = <span class="keyword">new</span> Repository($items));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">isset</span>($loadedFromCache)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadConfigurationFiles($app, $config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, we will set the application's environment based on the configuration</span></span><br><span class="line">    <span class="comment">// values that were loaded. We will pass a callback which will be used to get</span></span><br><span class="line">    <span class="comment">// the environment in a web context where an "--env" switch is not present.</span></span><br><span class="line">    $app-&gt;detectEnvironment(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $config-&gt;get(<span class="string">'app.env'</span>, <span class="string">'production'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    date_default_timezone_set($config-&gt;get(<span class="string">'app.timezone'</span>, <span class="string">'UTC'</span>));</span><br><span class="line"></span><br><span class="line">    mb_internal_encoding(<span class="string">'UTF-8'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-异常捕获" name="异常捕获"></a></p><h3 id="异常捕获"><a class="markdownIt-Anchor" href="#异常捕获"></a> 异常捕获</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app = $app;</span><br><span class="line"></span><br><span class="line">    error_reporting(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleError'</span>]);</span><br><span class="line"></span><br><span class="line">    set_exception_handler([<span class="keyword">$this</span>, <span class="string">'handleException'</span>]);</span><br><span class="line"></span><br><span class="line">    register_shutdown_function([<span class="keyword">$this</span>, <span class="string">'handleShutdown'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! $app-&gt;environment(<span class="string">'testing'</span>)) &#123;</span><br><span class="line">        ini_set(<span class="string">'display_errors'</span>, <span class="string">'Off'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getExceptionHandler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;app-&gt;make(ExceptionHandler::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ExceptionHandler</code>实例被绑定为<code>\App\Exceptions\Handler</code>，借助<a href="https://github.com/filp/whoops" target="_blank" rel="noopener">whoops</a>和<a href="https://symfony.com/doc/current/components/debug.html" target="_blank" rel="noopener">Symfony Debug Component</a>来渲染抛出的异常。</p><p><a id="markdown-facades" name="facades"></a></p><h3 id="facades"><a class="markdownIt-Anchor" href="#facades"></a> Facades</h3><p>所谓的“门面”其实是注册了一个autoload。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Facade::clearResolvedInstances();</span><br><span class="line"></span><br><span class="line">    Facade::setFacadeApplication($app);</span><br><span class="line"></span><br><span class="line">    AliasLoader::getInstance(array_merge(</span><br><span class="line">        $app-&gt;make(<span class="string">'config'</span>)-&gt;get(<span class="string">'app.aliases'</span>, []),</span><br><span class="line">        $app-&gt;make(PackageManifest::class)-&gt;aliases()</span><br><span class="line">    ))-&gt;register();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AliasLoader</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;registered) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prependToLoaderStack();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;registered = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prependToLoaderStack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    spl_autoload_register([<span class="keyword">$this</span>, <span class="string">'load'</span>], <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($alias)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">static</span>::$facadeNamespace &amp;&amp; strpos($alias, <span class="keyword">static</span>::$facadeNamespace) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadFacade($alias);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;aliases[$alias])) &#123;</span><br><span class="line">        <span class="keyword">return</span> class_alias(<span class="keyword">$this</span>-&gt;aliases[$alias], $alias);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在访问门面类的时候，会检索注册的门面，利用<a href="https://www.php.net/manual/en/function.class-alias.php" target="_blank" rel="noopener">class_alias</a>注册别名并自动加载。</p><p>在调用门面的方法的时候，利用<a href="https://www.php.net/manual/en/language.oop5.overloading.php#object.callstatic" target="_blank" rel="noopener">__callStatic</a>来调用具体的Application中绑定的实例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $instance = <span class="keyword">static</span>::getFacadeRoot();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! $instance) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'A facade root has not been set.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $instance-&gt;$method(...$args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeRoot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::resolveFacadeInstance(<span class="keyword">static</span>::getFacadeAccessor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveFacadeInstance</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_object($name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$resolvedInstance[$name])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$resolvedInstance[$name];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$resolvedInstance[$name] = <span class="keyword">static</span>::$app[$name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-加载serviceprovider" name="加载serviceprovider"></a></p><h3 id="加载serviceprovider"><a class="markdownIt-Anchor" href="#加载serviceprovider"></a> 加载ServiceProvider</h3><p>除了Application中注册的一部分核心ServiceProvider外，还需要注册配置文件中所配置的ServiceProvider。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $app-&gt;registerConfiguredProviders();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerConfiguredProviders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $providers = Collection::make(<span class="keyword">$this</span>-&gt;config[<span class="string">'app.providers'</span>])</span><br><span class="line">                    -&gt;partition(<span class="function"><span class="keyword">function</span> <span class="params">($provider)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> Str::startsWith($provider, <span class="string">'Illuminate\\'</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">    $providers-&gt;splice(<span class="number">1</span>, <span class="number">0</span>, [<span class="keyword">$this</span>-&gt;make(PackageManifest::class)-&gt;providers()]);</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">new</span> ProviderRepository(<span class="keyword">$this</span>, <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;getCachedServicesPath()))</span><br><span class="line">                -&gt;load($providers-&gt;collapse()-&gt;toArray());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后遍历注册的ServiceProvide，调用其<code>boot</code>方法完成其启动所需的动作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $app-&gt;boot();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;booted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Once the application has booted we will also fire some "booted" callbacks</span></span><br><span class="line">    <span class="comment">// for any listeners that need to do work after this initial booting gets</span></span><br><span class="line">    <span class="comment">// finished. This is useful when ordering the boot-up processes we run.</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;fireAppCallbacks(<span class="keyword">$this</span>-&gt;bootingCallbacks);</span><br><span class="line"></span><br><span class="line">    array_walk(<span class="keyword">$this</span>-&gt;serviceProviders, <span class="function"><span class="keyword">function</span> <span class="params">($p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bootProvider($p);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;booted = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;fireAppCallbacks(<span class="keyword">$this</span>-&gt;bootedCallbacks);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootProvider</span><span class="params">(ServiceProvider $provider)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (method_exists($provider, <span class="string">'boot'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;call([$provider, <span class="string">'boot'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-pipeline和middleware" name="pipeline和middleware"></a></p><h2 id="pipeline和middleware"><a class="markdownIt-Anchor" href="#pipeline和middleware"></a> Pipeline和Middleware</h2><p>在Application启动后，Laravel模拟了一个管道来分发Request对象，返回Response响应对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return (new Pipeline($this-&gt;app))</span><br><span class="line">            -&gt;send($request)</span><br><span class="line">            -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="line">            -&gt;then($this-&gt;dispatchToRouter());</span><br></pre></td></tr></table></figure><p>在<code>Pipeline</code>的构造函数中，绑定了一个容器，用来方便管道取用对象。<code>send</code>指明了需要在管道中传递的对象，<code>through</code>指明了需要在哪些管道中传递；<code>then</code>传递一个函数，在传递的对象最终通过管道时调用该函数产生动作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Container $container = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;container = $container;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($passable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;passable = $passable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">through</span><span class="params">($pipes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;pipes = is_array($pipes) ? $pipes : func_get_args();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">then</span><span class="params">(Closure $destination)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $pipeline = array_reduce(</span><br><span class="line">        array_reverse(<span class="keyword">$this</span>-&gt;pipes), <span class="keyword">$this</span>-&gt;carry(), <span class="keyword">$this</span>-&gt;prepareDestination($destination)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $pipeline(<span class="keyword">$this</span>-&gt;passable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管道的实现不按常规地巧妙借用了<a href="https://www.php.net/manual/zh/function.array-reduce.php" target="_blank" rel="noopener">array_reduce</a>函数：</p><p>通过将reduce对象设置为函数，并且使<code>array_reduce</code>的回调函数返回一个闭包，从而将这些管道闭包像栈一样一层层地包裹起来，简化后或许更容易理解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">then</span><span class="params">(Closure $destination)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $pipeline = array_reduce(</span><br><span class="line">        array_reverse(<span class="keyword">$this</span>-&gt;pipes), </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="params">($stack, $pipe)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> <span class="title">use</span> <span class="params">($stack, $pipe)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $pipe($passable, $stack);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $destination($passable);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $pipeline(<span class="keyword">$this</span>-&gt;passable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们用<code>pipeline-&gt;send(Object)-&gt;through([A, B, C])-&gt;then(D)</code>（ABCD都是应该是函数）。首先<code>array_reverse</code>将管道倒序，那么我们将得到如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$pipeline = array_reduce(</span><br><span class="line">    [C, B, A], </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="params">($stack, $pipe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> <span class="title">use</span> <span class="params">($stack, $pipe)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $pipe($passable, $stack);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    $reduce0 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> D($passable);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 第一次reduce</span></span><br><span class="line">$reduce1 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $reduce0($passable, $reduce0)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二次reduce</span></span><br><span class="line">$reduce2 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> C($passable, $reduce1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第三次reduce</span></span><br><span class="line">$reduce3 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> B($passable, $reduce2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四次reduce</span></span><br><span class="line">$reduce4 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A($passable, $reduce3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不妨换个思路，将<code>reduce0-4</code>理解为&quot;next&quot;：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$next = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> D($passable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一次reduce</span></span><br><span class="line">$next1 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $r0($passable, $next)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二次reduce</span></span><br><span class="line">$next2 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> C($passable, $next1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第三次reduce</span></span><br><span class="line">$next3 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> B($passable, $next2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四次reduce</span></span><br><span class="line">$next4 = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A($passable, $next3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么当我们调用<code>$pipeline(Object)</code>时，<code>next4</code>执行，即<code>A(obj, next)</code>函数得以执行，其获得参数<code>Object</code>和<code>next3</code>，倘若将<code>ABC</code>函数的返回值设置为<code>next(obj)</code>，整个<code>next</code>链路将被串联起来，最终执行到我们的<code>D</code>函数，正像一个管道一样！</p><p>更有意思的是，如果我们只是调用<code>$rtn = next(obj)</code>而不直接返回，我们可以在其之后的管道操作完该对象依次出栈之后，获得并修改返回值，再传递给父级管道。这就是<a href="https://laravel.com/docs/5.8/middleware" target="_blank" rel="noopener">Before &amp; After Middleware</a>的原理。</p><p>完整代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">carry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($stack, $pipe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> <span class="title">use</span> <span class="params">($stack, $pipe)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (is_callable($pipe)) &#123;</span><br><span class="line">                <span class="comment">// If the pipe is an instance of a Closure, we will just call it directly but</span></span><br><span class="line">                <span class="comment">// otherwise we'll resolve the pipes out of the container and call it with</span></span><br><span class="line">                <span class="comment">// the appropriate method and arguments, returning the results back out.</span></span><br><span class="line">                <span class="keyword">return</span> $pipe($passable, $stack);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (! is_object($pipe)) &#123;</span><br><span class="line">                <span class="keyword">list</span>($name, $parameters) = <span class="keyword">$this</span>-&gt;parsePipeString($pipe);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If the pipe is a string we will parse the string and resolve the class out</span></span><br><span class="line">                <span class="comment">// of the dependency injection container. We can then build a callable and</span></span><br><span class="line">                <span class="comment">// execute the pipe function giving in the parameters that are required.</span></span><br><span class="line">                $pipe = <span class="keyword">$this</span>-&gt;getContainer()-&gt;make($name);</span><br><span class="line"></span><br><span class="line">                $parameters = array_merge([$passable, $stack], $parameters);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// If the pipe is already an object we'll just make a callable and pass it to</span></span><br><span class="line">                <span class="comment">// the pipe as-is. There is no need to do any extra parsing and formatting</span></span><br><span class="line">                <span class="comment">// since the object we're given was already a fully instantiated object.</span></span><br><span class="line">                $parameters = [$passable, $stack];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> method_exists($pipe, <span class="keyword">$this</span>-&gt;method)</span><br><span class="line">                            ? $pipe-&gt;&#123;<span class="keyword">$this</span>-&gt;method&#125;(...$parameters)</span><br><span class="line">                            : $pipe(...$parameters);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareDestination</span><span class="params">(Closure $destination)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> <span class="title">use</span> <span class="params">($destination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $destination($passable);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-router" name="router"></a></p><h2 id="router"><a class="markdownIt-Anchor" href="#router"></a> Router</h2><p>在RouterServiceProvider启动时，会加载路由。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;setRootControllerNamespace();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;app-&gt;routesAreCached()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadCachedRoutes();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadRoutes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;booted(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app[<span class="string">'router'</span>]-&gt;getRoutes()-&gt;refreshNameLookups();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app[<span class="string">'router'</span>]-&gt;getRoutes()-&gt;refreshActionLookups();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loadRoutes</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="string">'map'</span>)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;call([<span class="keyword">$this</span>, <span class="string">'map'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">map</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapApiRoutes();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapWebRoutes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以<code>mapWebRoutes</code>为例，它利用<code>RouteRegistrar</code>封装了路由，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mapWebRoutes</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Route::middleware(<span class="string">'web'</span>)</span><br><span class="line">            -&gt;namespace(<span class="keyword">$this</span>-&gt;namespace)</span><br><span class="line">            -&gt;group(base_path(<span class="string">'routes/web.php'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Router</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $parameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">static</span>::hasMacro($method)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;macroCall($method, $parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($method == <span class="string">'middleware'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> RouteRegistrar(<span class="keyword">$this</span>))-&gt;attribute($method, is_array($parameters[<span class="number">0</span>]) ? $parameters[<span class="number">0</span>] : $parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> RouteRegistrar(<span class="keyword">$this</span>))-&gt;attribute($method, $parameters[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用group方法加载路由文件:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RouteRegistrar</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">group</span><span class="params">($callback)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;router-&gt;group(<span class="keyword">$this</span>-&gt;attributes, $callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Router</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">group</span><span class="params">(array $attributes, $routes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;updateGroupStack($attributes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Once we have updated the group stack, we'll load the provided routes and</span></span><br><span class="line">    <span class="comment">// merge in the group's attributes when the routes are created. After we</span></span><br><span class="line">    <span class="comment">// have created the routes, we will pop the attributes off the stack.</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;loadRoutes($routes);</span><br><span class="line"></span><br><span class="line">    array_pop(<span class="keyword">$this</span>-&gt;groupStack);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">updateGroupStack</span><span class="params">(array $attributes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;groupStack)) &#123;</span><br><span class="line">        $attributes = RouteGroup::merge($attributes, end(<span class="keyword">$this</span>-&gt;groupStack));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;groupStack[] = $attributes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loadRoutes</span><span class="params">($routes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($routes <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line">        $routes(<span class="keyword">$this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $router = <span class="keyword">$this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">require</span> $routes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Router维护了一个栈结构，只在当前栈中加载路由，加载后出栈，从而复用Router实例。这样既可以在多个路由文件中引用相同的Router，又减少了不必要的Router对象实例化开销。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($uri, $action = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;addRoute([<span class="string">'GET'</span>, <span class="string">'HEAD'</span>], $uri, $action);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addRoute</span><span class="params">($methods, $uri, $action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;routes-&gt;add(<span class="keyword">$this</span>-&gt;createRoute($methods, $uri, $action));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createRoute</span><span class="params">($methods, $uri, $action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// If the route is routing to a controller we will parse the route action into</span></span><br><span class="line">    <span class="comment">// an acceptable array format before registering it and creating this route</span></span><br><span class="line">    <span class="comment">// instance itself. We need to build the Closure that will call this out.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;actionReferencesController($action)) &#123;</span><br><span class="line">        $action = <span class="keyword">$this</span>-&gt;convertToControllerAction($action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $route = <span class="keyword">$this</span>-&gt;newRoute(</span><br><span class="line">        $methods, <span class="keyword">$this</span>-&gt;prefix($uri), $action</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we have groups that need to be merged, we will merge them now after this</span></span><br><span class="line">    <span class="comment">// route has already been created and is ready to go. After we're done with</span></span><br><span class="line">    <span class="comment">// the merge we will be ready to return the route back out to the caller.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasGroupStack()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mergeGroupAttributesIntoRoute($route);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;addWhereClausesToRoute($route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-路由分发" name="路由分发"></a></p><h3 id="路由分发"><a class="markdownIt-Anchor" href="#路由分发"></a> 路由分发</h3><p>在请求经过一系列中间件后，最终将被分发到具体的Controller执行并生成响应。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRoute</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runRoute($request, <span class="keyword">$this</span>-&gt;findRoute($request));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">findRoute</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;current = $route = <span class="keyword">$this</span>-&gt;routes-&gt;match($request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;container-&gt;instance(Route::class, $route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $route;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRoute</span><span class="params">(Request $request, Route $route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $request-&gt;setRouteResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $route;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">new</span> Events\RouteMatched($route, $request));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse($request,</span><br><span class="line">        <span class="keyword">$this</span>-&gt;runRouteWithinStack($route, $request)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先匹配注册过的路由，然后执行<code>runRouteWithinStack</code>执行路由。一次请求的处理，除了要经过Application层面的中间件外，还需通过针对特定路由的中间件才能得以执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRouteWithinStack</span><span class="params">(Route $route, Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $shouldSkipMiddleware = <span class="keyword">$this</span>-&gt;container-&gt;bound(<span class="string">'middleware.disable'</span>) &amp;&amp;</span><br><span class="line">                            <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'middleware.disable'</span>) === <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    $middleware = $shouldSkipMiddleware ? [] : <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;container))</span><br><span class="line">                    -&gt;send($request)</span><br><span class="line">                    -&gt;through($middleware)</span><br><span class="line">                    -&gt;then(<span class="function"><span class="keyword">function</span> <span class="params">($request)</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse(</span><br><span class="line">                            $request, $route-&gt;run()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gatherRouteMiddleware</span><span class="params">(Route $route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $middleware = collect($route-&gt;gatherMiddleware())-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">array</span>) MiddlewareNameResolver::resolve($name, <span class="keyword">$this</span>-&gt;middleware, <span class="keyword">$this</span>-&gt;middlewareGroups);</span><br><span class="line">    &#125;)-&gt;flatten();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;sortMiddleware($middleware);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过管道后，最终路由到具体的执行函数。在执行控制器函数时，通过相同的技巧处理了依赖注入，这里就不再重复了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;container = <span class="keyword">$this</span>-&gt;container ?: <span class="keyword">new</span> Container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isControllerAction()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runController();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runCallable();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (HttpResponseException $e) &#123;</span><br><span class="line">        <span class="keyword">return</span> $e-&gt;getResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-response" name="response"></a></p><h3 id="response"><a class="markdownIt-Anchor" href="#response"></a> Response</h3><p>Response借助Symfony库对不同类型的响应进行检测，并格式化为统一的对象。然后通过<code>response-&gt;send()</code>将响应输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareResponse</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::toResponse($request, $response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">toResponse</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($response <span class="keyword">instanceof</span> Responsable) &#123;</span><br><span class="line">        $response = $response-&gt;toResponse($request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($response <span class="keyword">instanceof</span> PsrResponseInterface) &#123;</span><br><span class="line">        $response = (<span class="keyword">new</span> HttpFoundationFactory)-&gt;createResponse($response);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (! $response <span class="keyword">instanceof</span> SymfonyResponse &amp;&amp;</span><br><span class="line">                ($response <span class="keyword">instanceof</span> Arrayable ||</span><br><span class="line">                $response <span class="keyword">instanceof</span> Jsonable ||</span><br><span class="line">                $response <span class="keyword">instanceof</span> ArrayObject ||</span><br><span class="line">                $response <span class="keyword">instanceof</span> JsonSerializable ||</span><br><span class="line">                is_array($response))) &#123;</span><br><span class="line">        $response = <span class="keyword">new</span> JsonResponse($response);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (! $response <span class="keyword">instanceof</span> SymfonyResponse) &#123;</span><br><span class="line">        $response = <span class="keyword">new</span> Response($response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($response-&gt;getStatusCode() === Response::HTTP_NOT_MODIFIED) &#123;</span><br><span class="line">        $response-&gt;setNotModified();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response-&gt;prepare($request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-程序退出" name="程序退出"></a></p><h2 id="程序退出"><a class="markdownIt-Anchor" href="#程序退出"></a> 程序退出</h2><p>此时程序响应已经发送出去，但还有一些工作需要处理。首先是Http Kernal遍历注册的中间件，处理它们的退出动作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;terminateMiddleware($request, $response);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;terminate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">terminateMiddleware</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $middlewares = <span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : array_merge(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($request),</span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($middlewares <span class="keyword">as</span> $middleware) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_string($middleware)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">list</span>($name) = <span class="keyword">$this</span>-&gt;parseMiddleware($middleware);</span><br><span class="line"></span><br><span class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;make($name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method_exists($instance, <span class="string">'terminate'</span>)) &#123;</span><br><span class="line">            $instance-&gt;terminate($request, $response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是Application处理程序中注册的程序退出回调。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminating</span><span class="params">(Closure $callback)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;terminatingCallbacks[] = $callback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;terminatingCallbacks <span class="keyword">as</span> $terminating) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call($terminating);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全文完~ 后续会逐步介绍Laravel的各种组件原理，但生命周期是框架的基石，有任何问题，欢迎留言。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始学习这个框架的时候，看文档绕的我半死，主要是因为文档基本在阐述如何使用，而没有过多讲解功能是如何实现的。文档所灌输的一堆概念对初学者并不友好，更适合做入门之后的参考资料。&lt;br&gt;
框架的入口文件（&lt;code&gt;public/index.php&lt;/code&gt;）是我目前见过的最简洁但却最逻辑分明的，暂且跟着程序逻辑，一点点解开Laravel的核心概念。&lt;br&gt;
希望通过这篇文章，我们可以对Laravel程序的生命周期有清晰的认识，更重要的是理解其设计原理，再也不怕文档中的诗兴大发了。&lt;br&gt;
这篇文章会尽量侧重于解释名词和原理，如果你刚了解Laravel，大可不必担心。&lt;/p&gt;
&lt;p&gt;推荐阅读：(框架作者有个文章，讲解他是如何设计Laravel的，看完忘记保存下来了T_T，找到再补)&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#application%E5%92%8Ccontainer&quot;&gt;Application和Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5&quot;&gt;依赖注入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#serviceprovider&quot;&gt;ServiceProvider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#request&quot;&gt;Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bootstrapper&quot;&gt;Bootstrapper&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&quot;&gt;环境变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&quot;&gt;配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7&quot;&gt;异常捕获&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#facades&quot;&gt;Facades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8A%A0%E8%BD%BDserviceprovider&quot;&gt;加载ServiceProvider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pipeline%E5%92%8Cmiddleware&quot;&gt;Pipeline和Middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#router&quot;&gt;Router&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%B7%AF%E7%94%B1%E5%88%86%E5%8F%91&quot;&gt;路由分发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#response&quot;&gt;Response&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%A8%8B%E5%BA%8F%E9%80%80%E5%87%BA&quot;&gt;程序退出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://www.notee.cc/tags/Laravel/"/>
    
      <category term="Framework" scheme="http://www.notee.cc/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>给PHP初学者的一些建议</title>
    <link href="http://www.notee.cc/PHP/suggestion_for_starters/"/>
    <id>http://www.notee.cc/PHP/suggestion_for_starters/</id>
    <published>2019-02-24T05:16:09.000Z</published>
    <updated>2020-09-10T09:30:26.047Z</updated>
    
    <content type="html"><![CDATA[<p>很多人喜欢调侃“PHP是世界上最好的语言”，现在就让我们站在学习者的角度，严肃讨论一下这个问题。</p><p>希望通过这篇文章，你可以清楚了解到：</p><ol><li>它所解决的问题是什么？</li><li>它的局限是什么？</li><li>它是否是一个适合你的语言？</li></ol><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#php%E6%98%AF%E4%BB%80%E4%B9%88">PHP是什么</a><ul><li><a href="#php%E6%98%AF%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84">PHP是跨平台的</a></li><li><a href="#php%E6%98%AF%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">PHP是脚本语言</a></li><li><a href="#php%E6%8A%95%E5%85%A5%E6%88%90%E6%9C%AC%E4%BD%8E">PHP投入成本低</a></li><li><a href="#php%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%BE%88%E5%A4%9A">PHP可以做很多</a></li><li><a href="#%E4%B8%8D%E8%A6%81%E5%AF%B9%E5%AE%83%E6%B8%B4%E6%9C%9B%E5%A4%AA%E5%A4%9A">不要对它渴望太多</a></li></ul></li><li><a href="#php%E7%9A%84%E5%A4%A9%E8%8A%B1%E6%9D%BF">PHP的天花板</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0php">如何学习PHP</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><p><a id="markdown-php是什么" name="php是什么"></a></p><h2 id="php是什么"><a class="markdownIt-Anchor" href="#php是什么"></a> PHP是什么</h2><p>在一切开始之前，我假设你对PHP稍有了解，但进行了更大角度的解释，希望你可以对它有更清晰的宏观轮廓。</p><p>关于PHP的定义，<a href="http://php.net/manual/zh/intro-whatis.php" target="_blank" rel="noopener">官网的解释</a>对初学者比较生涩：</p><blockquote><p>PHP（“PHP: Hypertext Preprocessor”，超文本预处理器的字母缩写）是一种被广泛应用的开放源代码的多用途脚本语言，它可嵌入到 HTML中，尤其适合 web 开发。</p></blockquote><p><a id="markdown-php是跨平台的" name="php是跨平台的"></a></p><h3 id="php是跨平台的"><a class="markdownIt-Anchor" href="#php是跨平台的"></a> PHP是跨平台的</h3><p>PHP可以运行在Windows、Linux、Unix、OSX等操作系统之上。OSX默认安装了PHP，其他平台一般需要安装PHP的运行环境才能运行PHP程序。</p><p>所谓PHP的运行环境其实是一套C语言写的PHP语法解释和执行的软件，以PHP代码可以运行在任何可以安装并执行这套运行环境的操作系统上。</p><p><a id="markdown-php是脚本语言" name="php是脚本语言"></a></p><h3 id="php是脚本语言"><a class="markdownIt-Anchor" href="#php是脚本语言"></a> PHP是脚本语言</h3><p>C语言这类编译型语言则需要在修改后重新编译，利用编译好的新的文件来执行。PHP在执行的时候，会读取代码，然后运用PHP运行环境的能力和操作系统交互，所以代码修改后，重新运行程序即可获得最新的代码执行结果。</p><p>在大型软件构建中，编译发布过程往往耗时数小时甚至更久，这就是为什么PHP语言开发快速的原因。但凡事有利有弊，编译过的软件对操作系统更加友好，执行速度会更快，所以PHP软件是通过牺牲运行时性能来获取高效率的开发的。</p><p>不过牺牲的这点运行性能对PHP来说是无可厚非的，因为PHP的高效开发特点决定了它所面对的应用场景是起步阶段的业务，此时软件的功能和服务才是最重要的，尤其是在飞速发展的互联网时代，只有快速做出业绩使得企业能够生存下去，才有资本去考虑大流量所带来的性能瓶颈。通俗点说，来的客户多了，赚的钱就多了，服务器不够我再加就完事儿了。</p><p><a id="markdown-php投入成本低" name="php投入成本低"></a></p><h3 id="php投入成本低"><a class="markdownIt-Anchor" href="#php投入成本低"></a> PHP投入成本低</h3><p>PHP是开源免费软件，同时操作系统Linux、常用的数据库软件MySQL/Redis、以及Web服务器软件Apache/Nginx也都是免费的，这就意味着PHP软件的运行只需要负担物理服务器的费用即可。同时PHP入门简单，培训和开发成本也相对较低。</p><p>对有其它服务端语言基础的人，在手册的帮助下，几天甚至数小时就可以上手这门语言。社区是PHP的真正力量，无数的PHP资源都会逐步向你敞开。</p><p><a id="markdown-php可以做很多" name="php可以做很多"></a></p><h3 id="php可以做很多"><a class="markdownIt-Anchor" href="#php可以做很多"></a> PHP可以做很多</h3><p>PHP在诞生的时候，是为了解决C语言开发网站的繁琐，这也是PHP目前最主要的功能，最流行的博客系统WordPress正是PHP所开发的。</p><p>除了搭网站，PHP作为服务端语言，也会被用来写网络API，为客户端程序提供服务支持。</p><p>在非CPU密集型的操作上，对于熟悉PHP语言的人来说，借助PHP工具包，可以快速开发出功能脚本。</p><p>很少有人知道，PHP在GUI桌面应用上也有发挥空间。</p><p><a id="markdown-不要对它渴望太多" name="不要对它渴望太多"></a></p><h3 id="不要对它渴望太多"><a class="markdownIt-Anchor" href="#不要对它渴望太多"></a> 不要对它渴望太多</h3><p>随着业务的逐渐壮大，和开发人员不规范的代码产出，PHP的性能瓶颈可能三到五年就达到了。庞大的代码库在代码层面优化起来杯水车薪，盼望PHP引擎的性能升级是不现实的，所以大部分公司成熟起来之后开始用Java/Golang甚至C语言等逐步替换PHP服务，以达到更高的并发要求。</p><p>同时CPU密集型的操作也不是PHP的领域，不过有可能通过调用其他语言的API来集成这些操作。</p><p>不过也不要悲观，就比如卖早报，一辆自行车就能覆盖到一个社区，当业务庞大起来，企业有了资本积累，自然会换摩托车、甚至汽车，但一开始总需要自行车。</p><p>当你摸到PHP的天花板时，自然会寻找新的上升通道。</p><p><a id="markdown-php的天花板" name="php的天花板"></a></p><h2 id="php的天花板"><a class="markdownIt-Anchor" href="#php的天花板"></a> PHP的天花板</h2><p>通过上面的解释，你是否对PHP在应用维度上有了更清晰的理解？在学习PHP之前，有必要先对PHP的天花板有一个简单的了解。</p><p>PHP开发者主要分为三个群体：</p><ol><li>网站开发者，将PHP嵌入到网页中进行网页内容开发</li><li>API开发者，和网页内容展示无交集</li><li>PHP工具开发者，为其他软件提供PHP版本的接口</li></ol><p>网站开发者是大多数PHP开发者入门时的一个阶段，需要学习前端知识(HTML/CSS/JavaScript等)，把PHP脚本嵌入到HTML中，最终生成动态的网站内容。 这相当于是PHP的小学阶段 – 老老实实写1000字作文。除非使用框架，否则网站开发者很难融入PHP社区之中，代码量产出很大，但是完成功能很慢，这时候会有很大的学习空间。API开发者一般采用某种PHP框架协助开发，通过框架，会逐步加深开发者对PHP包的依赖(即对社区的依赖)，这时候会有大量的名词需要了解和学习。而PHP工具开发者就是为PHP生态注入新名词的元素，由于可能只是向PHP生态圈引入自己的产品，他们甚至只需要了解PHP的语法即可。</p><p>会介意PHP天花板的主要在于前两类群体：<strong>对语言的了解很快停滞不前，对工具的了解越来越多，但是PHP生态发展速度太慢，无法随心所欲地去操纵某些工具。</strong></p><p>变通方法一般有三种：</p><ol><li>从开发者转变为管理人员，为业务决策做更多贡献</li><li>从开发者转变为工具开发者，为社区贡献力量(工作中一般没有这种机会)</li><li>在已有知识的基础上，可以选用更合适的语言</li></ol><p>简而言之，由于PHP社区的狭隘(注重Web技术，其它技术类型的开发者很少主动融入)，最终产生了窘境：<strong>资历所带来的知识不能为开发带来更多优势：业务所需要的，PHP不能产出；PHP能产出的，不需老古董也能产出</strong></p><p><a id="markdown-如何学习php" name="如何学习php"></a></p><h2 id="如何学习php"><a class="markdownIt-Anchor" href="#如何学习php"></a> 如何学习PHP</h2><p>如果你决定了开始学习这门语言，那么我用这几年踩的坑，给出一些建议。</p><p>PHP承担了世界上80%左右的网站，PHP开发的WordPress承担了世界上30%以上的网站，60%以上的CMS系统，因此PHP是值得一试的。</p><p>在学习PHP之前，建议先了解一下WordPress，如果你的目的是学习建设网站，你甚至可以不必学习任何一行PHP代码，就能拥有功能强大的网站。</p><p>如果你想使用PHP作为API开发工具，那么你可以完全不去理会任何HTML/CSS/JavaScript/Jquery等前端相关知识，作为后端开发者，数据结构和数据交互才是开发工作的重心。</p><p>至于具体的学习方法，我推荐以下内容：</p><ol><li><a href="php.net">PHP文档</a></li><li><a href="https://phptherightway.com" target="_blank" rel="noopener">PHP the right way</a></li><li>《Modern PHP》</li><li>《PHP Objects, Patterns, and Practice》</li></ol><p>现在PHP已经普遍使用PHP7版本，关于PHP5的内容可以作为了解，暂且不必太过深入。</p><p>Mysql数据库操作是PHP开发者必不可少的技能：</p><ol><li>《Mysql必知必会》</li><li>《Pro Mysql》</li><li>《MySQL技术内幕 InnoDB存储引擎》</li></ol><p>还有其它重要的工具:</p><ol><li>PHPStorm + Vim</li><li>Composer + <a href="http://Packagist.org" target="_blank" rel="noopener">Packagist.org</a></li><li>Apache + Nginx</li><li><a href="http://3v4l.org" target="_blank" rel="noopener">3v4l.org</a></li><li>Github + git</li><li>Laravel</li><li>Regex</li><li>Redis</li></ol><p>PHP既然是服务端语言，Linux当然也是了解的越多越好。其它的深入内容，船到桥头自然直。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人喜欢调侃“PHP是世界上最好的语言”，现在就让我们站在学习者的角度，严肃讨论一下这个问题。&lt;/p&gt;
&lt;p&gt;希望通过这篇文章，你可以清楚了解到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它所解决的问题是什么？&lt;/li&gt;
&lt;li&gt;它的局限是什么？&lt;/li&gt;
&lt;li&gt;它是否是一个适合你的语言？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#php%E6%98%AF%E4%BB%80%E4%B9%88&quot;&gt;PHP是什么&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#php%E6%98%AF%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84&quot;&gt;PHP是跨平台的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#php%E6%98%AF%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80&quot;&gt;PHP是脚本语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#php%E6%8A%95%E5%85%A5%E6%88%90%E6%9C%AC%E4%BD%8E&quot;&gt;PHP投入成本低&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#php%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%BE%88%E5%A4%9A&quot;&gt;PHP可以做很多&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%8D%E8%A6%81%E5%AF%B9%E5%AE%83%E6%B8%B4%E6%9C%9B%E5%A4%AA%E5%A4%9A&quot;&gt;不要对它渴望太多&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#php%E7%9A%84%E5%A4%A9%E8%8A%B1%E6%9D%BF&quot;&gt;PHP的天花板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0php&quot;&gt;如何学习PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="推荐" scheme="http://www.notee.cc/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>PHP 时间与时区你用对了吗？</title>
    <link href="http://www.notee.cc/PHP/syntax_time_and_timezone/"/>
    <id>http://www.notee.cc/PHP/syntax_time_and_timezone/</id>
    <published>2019-02-05T03:07:07.000Z</published>
    <updated>2020-09-10T09:30:26.048Z</updated>
    
    <content type="html"><![CDATA[<p>PHP的默认时区是UTC，可以通过<code>date_default_timezone_set</code>函数来改变默认时区，但你知道究竟哪些函数是基于时区的吗？<br>如果没有理清这一点，可能就会出现“我明明设置了时区，为什么程序好像还是没把时区改过来啊”这样的尴尬场面了。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#time">time</a></li><li><a href="#date">date</a></li><li><a href="#strtotime">strtotime</a></li><li><a href="#datetimetimeintervaldatetimezone">DateTime/TimeInterval/DateTimeZone</a></li><li><a href="#carbon">Carbon</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><blockquote><p>代码是PHP7.1.16的官方release版本 <a href="https://github.com/php/php-src/tree/PHP-7.1.16" target="_blank" rel="noopener">下载</a></p></blockquote><p><a id="markdown-time" name="time"></a></p><h2 id="time"><a class="markdownIt-Anchor" href="#time"></a> time</h2><p>对<a href="https://en.cppreference.com/w/c/chrono/time" target="_blank" rel="noopener">time</a>的简单处理，返回POISX时间戳，和时区无关。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &#123;&#123;&#123; proto int time(void)</span></span><br><span class="line"><span class="comment">   Return current UNIX timestamp */</span></span><br><span class="line">PHP_FUNCTION(time)</span><br><span class="line">&#123;</span><br><span class="line">RETURN_LONG((zend_long)time(<span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure><p><a id="markdown-date" name="date"></a></p><h2 id="date"><a class="markdownIt-Anchor" href="#date"></a> date</h2><p>会为时戳加上时区偏移，然后再格式化输出，不过通过<code>date('U')</code>参数仍可以读取到原始的UNIX时间戳副本(即无时区偏移的时间戳)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &#123;&#123;&#123; proto string date(string format [, long timestamp])</span></span><br><span class="line"><span class="comment">   Format a local date/time */</span></span><br><span class="line">PHP_FUNCTION(date)</span><br><span class="line">&#123;</span><br><span class="line">php_date(INTERNAL_FUNCTION_PARAM_PASSTHRU, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">php_date</span><span class="params">(INTERNAL_FUNCTION_PARAMETERS, <span class="keyword">int</span> localtime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>   *format;</span><br><span class="line"><span class="keyword">size_t</span>     format_len;</span><br><span class="line">zend_long    ts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">"s|l"</span>, &amp;format, &amp;format_len, &amp;ts) == FAILURE) &#123;</span><br><span class="line">RETURN_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ZEND_NUM_ARGS() == <span class="number">1</span>) &#123;</span><br><span class="line">ts = time(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RETURN_STR(php_format_date(format, format_len, ts, localtime));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="function">PHPAPI zend_string *<span class="title">php_format_date</span><span class="params">(<span class="keyword">char</span> *format, <span class="keyword">size_t</span> format_len, <span class="keyword">time_t</span> ts, <span class="keyword">int</span> localtime)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">timelib_time   *t;</span><br><span class="line">timelib_tzinfo *tzi;</span><br><span class="line">zend_string *<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">t = timelib_time_ctor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (localtime) &#123;</span><br><span class="line">tzi = get_timezone_info();</span><br><span class="line">t-&gt;tz_info = tzi;</span><br><span class="line">t-&gt;zone_type = TIMELIB_ZONETYPE_ID;</span><br><span class="line">timelib_unixtime2local(t, ts);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tzi = <span class="literal">NULL</span>;</span><br><span class="line">timelib_unixtime2gmt(t, ts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> = date_format(format, format_len, t, localtime);</span><br><span class="line"></span><br><span class="line">timelib_time_dtor(t);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timelib_unixtime2local</span><span class="params">(timelib_time *tm, timelib_sll ts)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">timelib_time_offset *gmt_offset;</span><br><span class="line">timelib_tzinfo      *tz = tm-&gt;tz_info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (tm-&gt;zone_type) &#123;</span><br><span class="line"><span class="keyword">case</span> TIMELIB_ZONETYPE_ABBR:</span><br><span class="line"><span class="keyword">case</span> TIMELIB_ZONETYPE_OFFSET: &#123;</span><br><span class="line"><span class="keyword">int</span> z = tm-&gt;z;</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> dst = tm-&gt;dst;</span><br><span class="line"></span><br><span class="line">timelib_unixtime2gmt(tm, ts - (tm-&gt;z * <span class="number">60</span>) + (tm-&gt;dst * <span class="number">3600</span>));</span><br><span class="line"></span><br><span class="line">tm-&gt;sse = ts;</span><br><span class="line">tm-&gt;z = z;</span><br><span class="line">tm-&gt;dst = dst;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> TIMELIB_ZONETYPE_ID:</span><br><span class="line">gmt_offset = timelib_get_time_zone_info(ts, tz);</span><br><span class="line">timelib_unixtime2gmt(tm, ts + gmt_offset-&gt;offset);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* we need to reset the sse here as unixtime2gmt modifies it */</span></span><br><span class="line">tm-&gt;sse = ts;</span><br><span class="line">tm-&gt;dst = gmt_offset-&gt;is_dst;</span><br><span class="line">tm-&gt;z = gmt_offset-&gt;offset;</span><br><span class="line">tm-&gt;tz_info = tz;</span><br><span class="line"></span><br><span class="line">timelib_time_tz_abbr_update(tm, gmt_offset-&gt;abbr);</span><br><span class="line">timelib_time_offset_dtor(gmt_offset);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">tm-&gt;is_localtime = <span class="number">0</span>;</span><br><span class="line">tm-&gt;have_zone = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tm-&gt;is_localtime = <span class="number">1</span>;</span><br><span class="line">tm-&gt;have_zone = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-strtotime" name="strtotime"></a></p><h2 id="strtotime"><a class="markdownIt-Anchor" href="#strtotime"></a> strtotime</h2><p>解析描述时间的字符串，然后返回对应的时戳。通过<code>strtotime('now')</code>可获得UNIX时戳。</p><p>可以通过<code>strtotime('+0')</code>获取对应时区偏移的时戳，表示对应时区在这个时间的UNIX时戳是多少。看下面的例子理解一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">date_default_timezone_set(<span class="string">'Asia/Shanghai'</span>); <span class="comment">// 东8区</span></span><br><span class="line">strtotime(<span class="string">'now'</span>); <span class="comment">// 1583636230</span></span><br><span class="line">strtotime(<span class="string">'+0'</span>);  <span class="comment">// 等同于 'now +0' 1583665030</span></span><br><span class="line">strtotime(<span class="string">'America/New_York'</span>);  <span class="comment">// 西5区 1583679430</span></span><br><span class="line">date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'now'</span>)); <span class="comment">// "2020-03-08 10:57:10"</span></span><br><span class="line">date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'+0'</span>));  <span class="comment">// "2020-03-08 18:57:10"</span></span><br><span class="line">date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'America/New_York'</span>));  <span class="comment">// "2020-03-08 22:57:10"</span></span><br></pre></td></tr></table></figure><p>以纽约为例，现在时间是2020-03-08 10:57:10，那么纽约时间2020-03-08 10:57:10，对应的时戳就是1583679430。</p><p><a id="markdown-datetimetimeintervaldatetimezone" name="datetimetimeintervaldatetimezone"></a></p><h2 id="datetimetimeintervaldatetimezone"><a class="markdownIt-Anchor" href="#datetimetimeintervaldatetimezone"></a> DateTime/TimeInterval/DateTimeZone</h2><p>todo</p><p><a id="markdown-carbon" name="carbon"></a></p><h2 id="carbon"><a class="markdownIt-Anchor" href="#carbon"></a> Carbon</h2><p>todo</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP的默认时区是UTC，可以通过&lt;code&gt;date_default_timezone_set&lt;/code&gt;函数来改变默认时区，但你知道究竟哪些函数是基于时区的吗？&lt;br&gt;
如果没有理清这一点，可能就会出现“我明明设置了时区，为什么程序好像还是没把时区改过来啊”这样的尴尬场面了。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#time&quot;&gt;time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#date&quot;&gt;date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#strtotime&quot;&gt;strtotime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#datetimetimeintervaldatetimezone&quot;&gt;DateTime/TimeInterval/DateTimeZone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#carbon&quot;&gt;Carbon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="todo" scheme="http://www.notee.cc/tags/todo/"/>
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Oops!" scheme="http://www.notee.cc/tags/Oops/"/>
    
      <category term="Syntax" scheme="http://www.notee.cc/tags/Syntax/"/>
    
  </entry>
  
  <entry>
    <title>转 给创业公司的技术合伙人们一些人生忠告</title>
    <link href="http://www.notee.cc/Forward/FengDaHui_suggestions_for_tech_partner/"/>
    <id>http://www.notee.cc/Forward/FengDaHui_suggestions_for_tech_partner/</id>
    <published>2019-01-31T10:47:17.000Z</published>
    <updated>2020-09-10T09:30:26.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>世上只有一种英雄主义，就是在认清生活真相之后依然热爱生活。</p></blockquote><p>不过生活哪有那么容易摸清套路，知道那里有坑，少踩点坑罢了。</p><p>转自《<a href="https://weibo.com/1577826897/EwLWXoxtG?type=comment" target="_blank" rel="noopener">给创业公司的技术合伙人们一些人生忠告</a>》</p><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><p>给创业公司的技术合伙人们一些人生忠告</p><p>今天，你可能被一篇《就算老公一毛钱股份都没拿到，在我心里，他依然是最牛逼的创业者》的文章刷屏了。你，你可能是某创业公司的技术合伙人，你可能是个 CTO，或是技术 VP 或是有其他什么的头衔，可能觉得这事情跟你无关，是当事人遇人不淑，事情还没落到你头上，你很庆幸。但是，我还是想给你一些建议，希望对你有用。</p><ol><li><p>看看你的期权和股权文件（如果有），怎么写的，然后找律师帮你看看。里面有没有什么问题。</p></li><li><p>如果你以为自己是公司股东，去查询一下公司在工商的注册信息，有没有你的名字。海外架构的公司股东有没有你的名字，从公司要一下股东名册。</p></li><li><p>如果只是口头上的约定，而你已经跟公司做了几年，找创始人问问，期权股份的事情，什么时候能搞定。落实到纸面文件上（虽然有时候也耍赖）。如果对方好奇，为什么突然来问，你就拿上面提到的那篇文章给他看。他就明白了。</p></li><li><p>如果合伙人跟你说国家政策要求什么的不能给你登记，或是你不懂的一些借口和理由，找律师问问咨询一下，其实也不贵。</p></li><li><p>亲兄弟，明算账。没有规则约束的情况下，人性本恶。别把别人想的跟你一样好。</p></li><li><p>越早界定这些信息越好。别不好意思，你越不好意思，对方越坑你。</p></li><li><p>别再相信什么事成之后可以分钱之类的空头支票空口许诺，去他妈的。</p></li><li><p>当初可以和你共患难的兄弟，在某一天有了新的合作伙伴、新高管、新投资人之后，人是会变的，人是趋利避害的动物。。</p></li><li><p>争取自己的利益是天经地义的事情。是你的权利。别觉得你的所作所为可能影响公司走下坡路，你不吭声，会有更多人被坑。从长期来看，只有这个公司讲规则，公司才可能做的更大。</p></li><li><p>不行的话，赶紧撤，及时止损。</p></li><li><p>男人的胸怀是被委屈撑大的（女人的可能也是）。当你有一天被质疑，泼污水，别想不开，这就是世界，这就是现实。依然要热爱生活。</p></li><li><p>利用业余时间保持一点写代码的能力，你懂的。（写公众号/自媒体无疑是减分的行为）</p></li></ol><p>当你仍然想不开的时候，记住，这个行业里有比你还惨的人。</p><p>还有这句鸡汤要经常服用：</p><p>世上只有一种英雄主义，就是在认清生活真相之后依然热爱生活。-- 罗曼·罗兰</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;世上只有一种英雄主义，就是在认清生活真相之后依然热爱生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过生活哪有那么容易摸清套路，知道那里有坑，少踩点坑罢了。&lt;/p&gt;
&lt;p&gt;转自《&lt;a href=&quot;https://weibo.com/1577826897/EwLWXoxtG?type=comment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;给创业公司的技术合伙人们一些人生忠告&lt;/a&gt;》&lt;/p&gt;
    
    </summary>
    
      <category term="Froward" scheme="http://www.notee.cc/categories/Froward/"/>
    
    
      <category term="Forward" scheme="http://www.notee.cc/tags/Forward/"/>
    
      <category term="Life" scheme="http://www.notee.cc/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Laravel的一些使用感受</title>
    <link href="http://www.notee.cc/PHP/framework_laravel_my_opinion/"/>
    <id>http://www.notee.cc/PHP/framework_laravel_my_opinion/</id>
    <published>2019-01-27T02:57:47.000Z</published>
    <updated>2020-09-10T09:30:26.047Z</updated>
    
    <content type="html"><![CDATA[<p>用了半年多的Laravel框架，不说怎么使用，说下使用体验吧，希望能帮助到一些刚接触这个框架的人。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#%E5%B8%B8%E8%A7%81php%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF">常见PHP框架的发展趋势</a></li><li><a href="#laravel%E7%9A%84%E5%AE%9A%E4%BD%8D">Laravel的定位</a><ul><li><a href="#%E5%8A%9F%E8%83%BD%E6%AF%94%E8%BE%83%E5%85%A8%E9%9D%A2%E7%9A%84%E6%A1%86%E6%9E%B6">功能比较全面的框架</a></li><li><a href="#%E9%97%A8%E6%A7%9B%E6%AF%94%E8%BE%83%E9%AB%98%E7%9A%84%E5%85%A8%E6%A0%88%E6%A1%86%E6%9E%B6">门槛比较高的全栈框架</a></li><li><a href="#%E5%BC%80%E5%8F%91%E9%80%9F%E5%BA%A6%E5%BE%88%E5%BF%AB">开发速度很快</a></li><li><a href="#%E5%A4%A7%E5%AE%B6%E9%83%BD%E8%AF%B4%E5%AE%83%E8%BF%90%E8%A1%8C%E6%AF%94%E8%BE%83%E6%85%A2">大家都说它运行比较慢</a></li><li><a href="#%E5%AE%83%E7%9A%84%E7%A4%BE%E5%8C%BA">它的社区</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><p><a id="markdown-常见php框架的发展趋势" name="常见php框架的发展趋势"></a></p><h2 id="常见php框架的发展趋势"><a class="markdownIt-Anchor" href="#常见php框架的发展趋势"></a> 常见PHP框架的发展趋势</h2><script type="text/javascript" src="https://ssl.gstatic.com/trends_nrtr/1709_RC01/embed_loader.js"></script> <script type="text/javascript"> trends.embed.renderExploreWidget("TIMESERIES", {"comparisonItem":[{"keyword":"/m/02qgdkj","geo":"","time":"all"},{"keyword":"Laravel","geo":"","time":"all"},{"keyword":"Symfony","geo":"","time":"all"},{"keyword":"CakePHP","geo":"","time":"all"},{"keyword":"Zend","geo":"","time":"all"}],"category":0,"property":""}, {"exploreQuery":"date=all&q=%2Fm%2F02qgdkj,Laravel,Symfony,CakePHP,Zend","guestPath":"https://trends.google.com:443/trends/embed/"}); </script> <script type="text/javascript" src="https://ssl.gstatic.com/trends_nrtr/1709_RC01/embed_loader.js"></script> <script type="text/javascript"> trends.embed.renderExploreWidget("GEO_MAP", {"comparisonItem":[{"keyword":"/m/02qgdkj","geo":"","time":"all"},{"keyword":"Laravel","geo":"","time":"all"},{"keyword":"Symfony","geo":"","time":"all"},{"keyword":"CakePHP","geo":"","time":"all"},{"keyword":"Zend","geo":"","time":"all"}],"category":0,"property":""}, {"exploreQuery":"date=all&q=%2Fm%2F02qgdkj,Laravel,Symfony,CakePHP,Zend","guestPath":"https://trends.google.com:443/trends/embed/"}); </script> <p>可以看出来Zend经过时间的沉淀，在语言层面上已经淡出开发者的视野，这也说明PHP的内核实现已经封装的比较好了；Laravel基本上一推出就吞并了其他框架，但东南亚比较“特立独行”呀。</p><p><a id="markdown-laravel的定位" name="laravel的定位"></a></p><h2 id="laravel的定位"><a class="markdownIt-Anchor" href="#laravel的定位"></a> Laravel的定位</h2><p><a id="markdown-功能比较全面的框架" name="功能比较全面的框架"></a></p><h3 id="功能比较全面的框架"><a class="markdownIt-Anchor" href="#功能比较全面的框架"></a> 功能比较全面的框架</h3><p>开箱即用的Redis、Mysql、Log、基于Redis的队列、基于Puhser的实时广播、电子邮件、模板语法、代码缓存，甚至还默认提供了一套简单的用户系统。</p><p>在语言扩展方面，请求响应的封装、Session的封装、数组的封装(Collection)、数据校验、文件存储、加密解密等。</p><p>在数据库方面，提供了数据库建表、模拟数据的生成，还有基于数据库的简单数据库版本控制。</p><p>在测试上，集成了web测试、命令行测试、单元测试，还提供了浏览器扩展工具。</p><p>在命令行扩展上，集成了流行的命令行渲染工具，同时提供了一套命令行工具协助管理框架。</p><p>为了方便本地开发，直接提供了一个重量级的Homestead虚拟机，配置好了Laravel所需的环境需求。</p><p>此外在站点安全方面也内置了CSRF等功能。</p><p><a id="markdown-门槛比较高的全栈框架" name="门槛比较高的全栈框架"></a></p><h3 id="门槛比较高的全栈框架"><a class="markdownIt-Anchor" href="#门槛比较高的全栈框架"></a> 门槛比较高的全栈框架</h3><p>首先环境要求比较高，PHP7，MySQL，Composer是标配，还需要一些Nginx的配置，PHP扩展的开启。</p><p>对前端开发来说，使用Vue/React+scss/css技术栈即可，集成了一些常用的npm包，做了一些适应框架的预设。</p><p>对后端开发来说，至少需要熟练掌握PHP才可能理解该框架的执行，还有许多让人看了几遍文档还很懵逼的艺术名词。</p><p>同时掌握其提供的庞大的工具箱也是一件门槛比较高的事。</p><p><a id="markdown-开发速度很快" name="开发速度很快"></a></p><h3 id="开发速度很快"><a class="markdownIt-Anchor" href="#开发速度很快"></a> 开发速度很快</h3><p>新项目开发的典型流程就是：</p><ol><li>建立一个项目git仓库</li><li>生成一份框架文件，配好数据库</li><li>然后添加虚拟的host，加一下Homestead的host，重启一下虚拟机</li><li>接下来就开始设计表结构和业务逻辑</li><li>利用提供的命令行工具生成Model层和Controller，写代码</li><li>测试和部署</li></ol><p>前三步的时间花销非常小，五分钟就可以搞定开发环境的搭建。<br>开发过程中，提供了许多好用的工具，可以将精力放在代码结构和逻辑交互上。<br>部署的时候，只需要运维配置好环境，修改一个叫.env的项目配置文件即可。</p><p><a id="markdown-大家都说它运行比较慢" name="大家都说它运行比较慢"></a></p><h3 id="大家都说它运行比较慢"><a class="markdownIt-Anchor" href="#大家都说它运行比较慢"></a> 大家都说它运行比较慢</h3><p>第一印象是报错的时候40+深度的调用栈，这么长的路由主要是走了几个代码中间件。</p><p>对框架本身而言，真正慢的是它的模板引擎，但和它所提高的开发效率相比，还是很不错的特性。而且对于前后端分离的项目，这个问题就不存在了。</p><p>对项目来说，花费时间最多的就是各种包的require了，花费的时间在10%以上，线上这个开销可以通过composer的包缓存来消减。</p><p>但在实际的使用当中，我最先遇到的程序瓶颈是由于数据库索引不完善导致的，所以Lavavel的性能还是可以接受的。</p><p>最后就是代码的逻辑了，也是最重要的。考虑一下代码中各种api调用和数据库查询的网络开销，这里一般会有许多可以优化的空间，不要把慢一开始就归咎于框架。</p><p>个人使用感受就是，一般Laravel的慢并会不轻易体现出来，当代码慢的时候，一般是业务逻辑比较庞大，或者是逻辑中网络调用过多，这个时候框架的时间消耗就显得微不足道了。</p><p><a id="markdown-它的社区" name="它的社区"></a></p><h3 id="它的社区"><a class="markdownIt-Anchor" href="#它的社区"></a> 它的社区</h3><p>整个框架就是建立在开源社区的努力上，集成了许多开源项目，同时也有比较好的使用文档。国内也有中文站点，推送正式站点的文章翻译。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了半年多的Laravel框架，不说怎么使用，说下使用体验吧，希望能帮助到一些刚接触这个框架的人。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B8%B8%E8%A7%81php%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF&quot;&gt;常见PHP框架的发展趋势&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#laravel%E7%9A%84%E5%AE%9A%E4%BD%8D&quot;&gt;Laravel的定位&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8A%9F%E8%83%BD%E6%AF%94%E8%BE%83%E5%85%A8%E9%9D%A2%E7%9A%84%E6%A1%86%E6%9E%B6&quot;&gt;功能比较全面的框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%97%A8%E6%A7%9B%E6%AF%94%E8%BE%83%E9%AB%98%E7%9A%84%E5%85%A8%E6%A0%88%E6%A1%86%E6%9E%B6&quot;&gt;门槛比较高的全栈框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BC%80%E5%8F%91%E9%80%9F%E5%BA%A6%E5%BE%88%E5%BF%AB&quot;&gt;开发速度很快&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A4%A7%E5%AE%B6%E9%83%BD%E8%AF%B4%E5%AE%83%E8%BF%90%E8%A1%8C%E6%AF%94%E8%BE%83%E6%85%A2&quot;&gt;大家都说它运行比较慢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%83%E7%9A%84%E7%A4%BE%E5%8C%BA&quot;&gt;它的社区&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://www.notee.cc/tags/Laravel/"/>
    
      <category term="Framework" scheme="http://www.notee.cc/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>PHP 记一次代码更新无效的奇怪问题</title>
    <link href="http://www.notee.cc/PHP/code_update_not_work/"/>
    <id>http://www.notee.cc/PHP/code_update_not_work/</id>
    <published>2019-01-26T01:35:54.000Z</published>
    <updated>2020-09-10T09:30:26.042Z</updated>
    
    <content type="html"><![CDATA[<p>昨天碰到个PHP代码不更新奇怪的问题：原文件a.php直接修改不生效，复制到b.php并修改nginx路由即可修改。<br>最终重启了fpm，修改才可以生效，问题很奇怪，没有找到原因，记录一下。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#%E9%97%AE%E9%A2%98%E8%AF%A6%E6%83%85">问题详情</a></li><li><a href="#nginx">Nginx</a></li><li><a href="#fpm">FPM</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><p><a id="markdown-问题详情" name="问题详情"></a></p><h2 id="问题详情"><a class="markdownIt-Anchor" href="#问题详情"></a> 问题详情</h2><p>首先修改了Laravel的database的config文件，发布到线上之后，发现数据库似乎没有切换，但是测试环境一切正常，于是上到正式环境排查问题：</p><ol><li>添加debug代码，没有生效</li><li>强行把控制器流程退出，无效，怀疑laravel框架问题。</li><li>修改index.php入口文件，无效，怀疑nginx有变动。</li><li>查看nginx配置，没有变动。重启nginx，问题依然存在。</li><li>拷贝一份代码入口文件，把nginx修改成新的入口文件，新的文件可以正常修改，（奇怪的是旧的文件不能修改，新的却可以，可能是旧的在缓存里，新的没有）</li><li>吃了个午饭回来，问题还在，最终重启fpm，一切正常。</li></ol><p>基本确定是PHP文件缓存的问题，需要查看opcache和fpm的文件缓存策略相关的代码。</p><p><a id="markdown-nginx" name="nginx"></a></p><h2 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> Nginx</h2><p>nginx是常规Laravel配置，加了指定接口的ip白名单，其他没有什么特别的。</p><p><a id="markdown-fpm" name="fpm"></a></p><h2 id="fpm"><a class="markdownIt-Anchor" href="#fpm"></a> FPM</h2><p>运维新申请的机器已经启动了fpm，用的是这个已有的fpm，但是它的配置和重启之后的配置是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">opcache.blacklist_filename =&gt; no value =&gt; no value</span><br><span class="line">opcache.consistency_checks =&gt; 0 =&gt; 0</span><br><span class="line">opcache.dups_fix =&gt; Off =&gt; Off</span><br><span class="line">opcache.enable =&gt; On =&gt; On</span><br><span class="line">opcache.enable_cli =&gt; Off =&gt; Off</span><br><span class="line">opcache.enable_file_override =&gt; Off =&gt; Off</span><br><span class="line">opcache.error_log =&gt; no value =&gt; no value</span><br><span class="line">opcache.fast_shutdown =&gt; 0 =&gt; 0</span><br><span class="line">opcache.file_cache =&gt; no value =&gt; no value</span><br><span class="line">opcache.file_cache_consistency_checks =&gt; 1 =&gt; 1</span><br><span class="line">opcache.file_cache_only =&gt; 0 =&gt; 0</span><br><span class="line">opcache.file_update_protection =&gt; 2 =&gt; 2</span><br><span class="line">opcache.force_restart_timeout =&gt; 180 =&gt; 180</span><br><span class="line">opcache.huge_code_pages =&gt; Off =&gt; Off</span><br><span class="line">opcache.inherited_hack =&gt; On =&gt; On</span><br><span class="line">opcache.interned_strings_buffer =&gt; 4 =&gt; 4</span><br><span class="line">opcache.lockfile_path =&gt; /tmp =&gt; /tmp</span><br><span class="line">opcache.log_verbosity_level =&gt; 1 =&gt; 1</span><br><span class="line">opcache.max_accelerated_files =&gt; 2000 =&gt; 2000</span><br><span class="line">opcache.max_file_size =&gt; 0 =&gt; 0</span><br><span class="line">opcache.max_wasted_percentage =&gt; 5 =&gt; 5</span><br><span class="line">opcache.memory_consumption =&gt; 64 =&gt; 64</span><br><span class="line">opcache.optimization_level =&gt; 0x7FFFBFFF =&gt; 0x7FFFBFFF</span><br><span class="line">opcache.preferred_memory_model =&gt; no value =&gt; no value</span><br><span class="line">opcache.protect_memory =&gt; 0 =&gt; 0</span><br><span class="line">opcache.restrict_api =&gt; no value =&gt; no value</span><br><span class="line">opcache.revalidate_freq =&gt; 2 =&gt; 2</span><br><span class="line">opcache.revalidate_path =&gt; Off =&gt; Off</span><br><span class="line">opcache.save_comments =&gt; 1 =&gt; 1</span><br><span class="line">opcache.use_cwd =&gt; On =&gt; On</span><br><span class="line">opcache.validate_permission =&gt; Off =&gt; Off</span><br><span class="line">opcache.validate_root =&gt; Off =&gt; Off</span><br><span class="line">opcache.validate_timestamps =&gt; On =&gt; On</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天碰到个PHP代码不更新奇怪的问题：原文件a.php直接修改不生效，复制到b.php并修改nginx路由即可修改。&lt;br&gt;
最终重启了fpm，修改才可以生效，问题很奇怪，没有找到原因，记录一下。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%97%AE%E9%A2%98%E8%AF%A6%E6%83%85&quot;&gt;问题详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nginx&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fpm&quot;&gt;FPM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
    
      <category term="todo" scheme="http://www.notee.cc/tags/todo/"/>
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Strange" scheme="http://www.notee.cc/tags/Strange/"/>
    
  </entry>
  
  <entry>
    <title>PHP FPM和CLI模式对比</title>
    <link href="http://www.notee.cc/PHP/engine_cli_and_fpm/"/>
    <id>http://www.notee.cc/PHP/engine_cli_and_fpm/</id>
    <published>2018-12-26T03:12:22.000Z</published>
    <updated>2020-09-10T09:30:26.043Z</updated>
    
    <content type="html"><![CDATA[<p>理解了CLI的运行模式之后，FPM就比较好理顺了，FPM相对于CLI多了一部分进程管理的工作。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#fpm">fpm</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><p><a id="markdown-fpm" name="fpm"></a></p><h1 id="fpm"><a class="markdownIt-Anchor" href="#fpm"></a> fpm</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理解了CLI的运行模式之后，FPM就比较好理顺了，FPM相对于CLI多了一部分进程管理的工作。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#fpm&quot;&gt;fpm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Zend Engine" scheme="http://www.notee.cc/tags/Zend-Engine/"/>
    
  </entry>
  
  <entry>
    <title>PHP Zend脚本执行总结</title>
    <link href="http://www.notee.cc/PHP/engine_how_php_compile_works/"/>
    <id>http://www.notee.cc/PHP/engine_how_php_compile_works/</id>
    <published>2018-12-26T03:12:22.000Z</published>
    <updated>2020-09-10T09:30:26.045Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是对zend_execute_scripts阶段的总结，包括了PHP代码的分析、编译、执行。客串了OpCache是如何加速这一过程的。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#zend_execute_scripts">zend_execute_scripts</a><ul><li><a href="#zendparse">zendparse</a></li><li><a href="#zend_compile">zend_compile</a></li><li><a href="#zend_execute">zend_execute</a></li></ul></li><li><a href="#opcache">OpCache</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><p><a id="markdown-zend_execute_scripts" name="zend_execute_scripts"></a></p><h1 id="zend_execute_scripts"><a class="markdownIt-Anchor" href="#zend_execute_scripts"></a> zend_execute_scripts</h1><p><a id="markdown-zendparse" name="zendparse"></a></p><h2 id="zendparse"><a class="markdownIt-Anchor" href="#zendparse"></a> zendparse</h2><p>Zend分别使用了<code>Flex</code>和<code>Bison</code>版本的<code>Lex</code>和<code>Yacc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">           lexical        grammar</span><br><span class="line">            rules          rules</span><br><span class="line">              |              |</span><br><span class="line">              v              v</span><br><span class="line">         +---------+    +---------+</span><br><span class="line">         |   Lex   |    |  Yacc   |</span><br><span class="line">         +---------+    +---------+</span><br><span class="line">              |              |</span><br><span class="line">              v              v</span><br><span class="line">         +---------+    +---------+</span><br><span class="line">Input -&gt; |  yylex  | -&gt; | yyparse | -&gt; Parsed input</span><br><span class="line">         +---------+    +---------+</span><br><span class="line"></span><br><span class="line">             /--------------\</span><br><span class="line">             | Lex with Yacc|</span><br><span class="line">             \--------------/</span><br></pre></td></tr></table></figure><ul><li><a href="http://dinosaur.compilertools.net/" target="_blank" rel="noopener">The Lex &amp; Yacc Page</a></li><li><a href="http://westes.github.io/flex/manual/Start-Conditions.html" target="_blank" rel="noopener">Flex: Start Conditions</a></li><li><a href="https://www.cs.uic.edu/~spopuri/cparser.html#yyparse" target="_blank" rel="noopener">Understanding C parsers generated by GNU Bison</a></li><li><a href="https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html#index-yacc-1" target="_blank" rel="noopener">GNU: Catalogue of Built-In Rules</a></li></ul><p><a id="markdown-zend_compile" name="zend_compile"></a></p><h2 id="zend_compile"><a class="markdownIt-Anchor" href="#zend_compile"></a> zend_compile</h2><img src="https://www.plantuml.com/plantuml/svg/XP71IiD048Rl-nH3JYsbVO0YWhIX7hGL5G-Mi2pP8LrCTfTaj57fkpj9cv245FUM-R_vP-OF6KeHVj1g6RlCcnI5L_67Ilf5ISxBWZA2Nm7yHfcENhrzBQg28fZVyfTr6gDblmLBdxSDrX52KEkO6P9bMGQW2kXLElQr8SpPV9peLSyxL1NdenevYHRgNT3uTOlY9CRZ6CAj84ISkazzoME_sanKJEOBURnKUQw-fn6RDZbwLHIIZkw2vnYJiWd_cU1uO5kOS5TgBCvcS0CyRnfqWtQ-qY1ZmTZa7FTxk5tBjqVv4hxAtTDgjmxb_Trs_H0-Jyxuj4dX94QtWqMw62IxX0H9MYo9ET6c2GlDvFY9LrBJl69pyxNnbUa_p7n_C5gZZVBgv44CVm00"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_ast</span> &#123;</span></span><br><span class="line">    zend_ast_kind kind; <span class="comment">/* type of the node (zend_ast_* enum constant) */</span></span><br><span class="line">    zend_ast_attr attr; <span class="comment">/* additional attribute, use depending on node type */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> lineno;    <span class="comment">/* line number */</span></span><br><span class="line">    zend_ast *child[<span class="number">1</span>]; <span class="comment">/* array of children (using struct hack) */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">znode</span> &#123;</span> <span class="comment">/* used only during compilation */</span></span><br><span class="line">    zend_uchar op_type;</span><br><span class="line">    zend_uchar flag;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        znode_op op;</span><br><span class="line">        zval constant; <span class="comment">/* replaced by literal/zv */</span></span><br><span class="line">    &#125; u;</span><br><span class="line">&#125; znode;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_op</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span> *handler;</span><br><span class="line">    znode_op op1;</span><br><span class="line">    znode_op op2;</span><br><span class="line">    znode_op result;</span><br><span class="line">    <span class="keyword">uint32_t</span> extended_value;</span><br><span class="line">    <span class="keyword">uint32_t</span> lineno;</span><br><span class="line">    zend_uchar opcode;</span><br><span class="line">    zend_uchar op1_type;</span><br><span class="line">    zend_uchar op2_type;</span><br><span class="line">    zend_uchar result_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _znode_op &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span>      constant;</span><br><span class="line">    <span class="keyword">uint32_t</span>      var;</span><br><span class="line">    <span class="keyword">uint32_t</span>      num;</span><br><span class="line">    <span class="keyword">uint32_t</span>      opline_num; <span class="comment">/*  needs to be signed */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> zend_use_abs_jmp_addr</span></span><br><span class="line">    zend_op       *jmp_addr;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">uint32_t</span>      jmp_offset;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> zend_use_abs_const_addr</span></span><br><span class="line">    zval          *zv;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; znode_op;</span><br></pre></td></tr></table></figure><p><a id="markdown-zend_execute" name="zend_execute"></a></p><h2 id="zend_execute"><a class="markdownIt-Anchor" href="#zend_execute"></a> zend_execute</h2><img src="https://www.plantuml.com/plantuml/svg/XL9BReCm4Drp2YlPW28MFK3PHRr2fGYD9lOuM3KsCYPjMkNkDP-cc2Bw5hOqy-RtPhpocjWd6G7qGRppb3J8t_0I6zbNmW9EW-rQG-i32PgkhO2ZrY0TrbIoNEG5Eqqn8D1ZNhIt-cmrU3nhAiSi6uGfXG9bb8SvSOpjOMneI9FqpCfrAjjBAH_y7iVNr3PQ6ShOCxCDe7DuomlRS2keNLArykHGjp7vnxfakyw0LpK5ANYrA13x7f51nc6CmR0cUFWdpNiuuXxD9MngzrwfyALFsMxc7rGTvykB2etGvDAv8jdQRaAZnvUKTywHYGNCoYXrBFW_TVP2YYWwblzmY9oH43tkoU-xljjnaEqk_jxPrh13oiLjIqSql-ta_Wq0"><p><a id="markdown-opcache" name="opcache"></a></p><h1 id="opcache"><a class="markdownIt-Anchor" href="#opcache"></a> OpCache</h1><p>OpCache是一个Zend扩展，通过替换<code>zend_compile_file</code>来缓存和优化OpCodes，<br>避免Zend每次启动PHP脚本都要重新扫描编译PHP代码。</p><p><code>ext/opcache/ZendAccelerator.c:3071</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ZEND_EXT_API zend_extension zend_extension_entry = &#123;</span><br><span class="line">    ACCELERATOR_PRODUCT_NAME,               <span class="comment">/* name */</span></span><br><span class="line">    PHP_VERSION,<span class="comment">/* version */</span></span><br><span class="line">    <span class="string">"Zend Technologies"</span>,<span class="comment">/* author */</span></span><br><span class="line">    <span class="string">"http://www.zend.com/"</span>,<span class="comment">/* URL */</span></span><br><span class="line">    <span class="string">"Copyright (c) 1999-2018"</span>,<span class="comment">/* copyright */</span></span><br><span class="line">    accel_startup,   <span class="comment">/* startup */</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">/* shutdown */</span></span><br><span class="line">    accel_activate,<span class="comment">/* per-script activation */</span></span><br><span class="line">    accel_deactivate,<span class="comment">/* per-script deactivation */</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">/* message handler */</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">/* op_array handler */</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">/* extended statement handler */</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">/* extended fcall begin handler */</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">/* extended fcall end handler */</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">/* op_array ctor */</span></span><br><span class="line">    <span class="literal">NULL</span>,<span class="comment">/* op_array dtor */</span></span><br><span class="line">    STANDARD_ZEND_EXTENSION_PROPERTIES</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>ext/opcache/ZendAccelerator.c:2894</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Override compiler */</span></span><br><span class="line">accelerator_orig_compile_file = zend_compile_file;</span><br><span class="line">zend_compile_file = persistent_compile_file;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是对zend_execute_scripts阶段的总结，包括了PHP代码的分析、编译、执行。客串了OpCache是如何加速这一过程的。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#zend_execute_scripts&quot;&gt;zend_execute_scripts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#zendparse&quot;&gt;zendparse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zend_compile&quot;&gt;zend_compile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zend_execute&quot;&gt;zend_execute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#opcache&quot;&gt;OpCache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Zend Engine" scheme="http://www.notee.cc/tags/Zend-Engine/"/>
    
  </entry>
  
  <entry>
    <title>PHP 为什么crypt($p, $s)等于crypt($p,crypt($p, $s))</title>
    <link href="http://www.notee.cc/PHP/engine_why_cryptpass-equals-cryptpass-cryptpass/"/>
    <id>http://www.notee.cc/PHP/engine_why_cryptpass-equals-cryptpass-cryptpass/</id>
    <published>2018-09-05T10:10:32.000Z</published>
    <updated>2020-09-10T09:30:26.045Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$pass = <span class="number">123</span>;</span><br><span class="line">$salt = <span class="string">'$2a$10$mpthXeDXOjMPgl3uTDMSxeF69N8Rr2LcZnFoiERMH6RZlPAFP2tva'</span>;</span><br><span class="line"><span class="keyword">echo</span> crypt($pass,$salt).PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> crypt($pass,crypt($pass, $salt)).PHP_EOL;</span><br></pre></td></tr></table></figure><p>运行后输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$2a$10$mpthXeDXOjMPgl3uTDMSxe0BcfReIl2Wk63WEYwtYFVpHQzouG9JO</span><br><span class="line">$2a$10$mpthXeDXOjMPgl3uTDMSxe0BcfReIl2Wk63WEYwtYFVpHQzouG9JO</span><br></pre></td></tr></table></figure><p>第二次加密为什么没有效果？</p><p>目录：</p><!-- MarkdownTOC --><ul><li><a href="#%E5%AE%9A%E4%BD%8D%E5%87%BD%E6%95%B0crypt">定位函数crypt</a></li><li><a href="#%E7%BB%93%E8%AE%BA">结论</a></li></ul><!-- /MarkdownTOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><blockquote><p>代码是PHP7.1.16的官方release版本 <a href="http://jp2.php.net/get/php-7.1.16.tar.gz/from/this/mirror" target="_blank" rel="noopener">下载</a></p></blockquote><p><a id="%E5%AE%9A%E4%BD%8D%E5%87%BD%E6%95%B0crypt"></a></p><h2 id="定位函数crypt"><a class="markdownIt-Anchor" href="#定位函数crypt"></a> 定位函数crypt</h2><p>全局搜索<code>PHP_FUNCTION(crypt)</code>，定位到函数定义<code>ext/standard/crypt.c:241</code>。顺藤摸瓜，<code>PHP_FUNCTION(crypt)</code>-&gt;<code>php_crypt</code>-&gt;<code>php_crypt_blowfish_rn</code>-&gt;<code>BF_crypt</code>，最终定位到加密函数<a href="https://github.com/php/php-src/blob/PHP-7.1.16/ext/standard/crypt_blowfish.c#L658" target="_blank" rel="noopener">BF_crypt</a>。</p><p>或者采用gdb调试debug版本的PHP，在<code>zif_crypt</code>处打断点，也可以定位到<code>crypt</code>函数，<code>zif</code>(zend internal function)，是<code>PHP_FUNCTION</code>这个宏给PHP内置函数添加的前缀。最终也可以定位到<code>BF_crypt</code>。</p><p>函数声明:</p><pre><code>static char *BF_crypt(const char *key, const char *setting,char *output, int size,BF_word min)</code></pre><p><code>key</code>，<code>setting</code>，<code>output</code>分别对应了PHP函数<code>string crypt ( string $str [, string $salt ] )</code>中的<code>$str</code>，<code>$salt</code>和返回值。</p><p>通过查看源码可以发现:</p><p>第一，在777行，<code>memcpy(output, setting, 7 + 22 - 1);</code>，把$salt的前29个字符（从 0 到7 + 22 - 1，共计29个）拷贝到返回值上，就是上面的<code>$2a$10$mpthXeDXOjMPgl3uTDMSxe</code>。</p><p>第二，$salt的剩余部分没有再被使用过。</p><p>第三，在784行，<code>BF_encode(&amp;output[7 + 22], data.binary.output, 23);</code>，把加密过的字符串追加到返回值上。</p><p>第四，在785行，<code>output[7 + 22 + 31] = '\0';</code>，设置字符串截断，长度60。</p><p><a id="%E7%BB%93%E8%AE%BA"></a></p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2><p>对于crypt函数的BlowFish算法，只有被加密的<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;和&#039; at position 4: str和̲">str和</span>salt的前29位对加密结果会产生影响，加密的结果最终被保存在返回值的30-60位。</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$pass = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$salt = &lt;span class=&quot;string&quot;&gt;&#39;$2a$10$mpthXeDXOjMPgl3uTDMSxeF69N8Rr2LcZnFoiERMH6RZlPAFP2tva&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; crypt($pass,$salt).PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; crypt($pass,crypt($pass, $salt)).PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行后输出：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$2a$10$mpthXeDXOjMPgl3uTDMSxe0BcfReIl2Wk63WEYwtYFVpHQzouG9JO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$2a$10$mpthXeDXOjMPgl3uTDMSxe0BcfReIl2Wk63WEYwtYFVpHQzouG9JO&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二次加密为什么没有效果？&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- MarkdownTOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%9A%E4%BD%8D%E5%87%BD%E6%95%B0crypt&quot;&gt;定位函数crypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%BB%93%E8%AE%BA&quot;&gt;结论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Zend Engine" scheme="http://www.notee.cc/tags/Zend-Engine/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码的一生（七）VLD和OpCodes</title>
    <link href="http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_7/"/>
    <id>http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_7/</id>
    <published>2018-08-22T03:15:55.000Z</published>
    <updated>2020-09-10T09:30:26.045Z</updated>
    
    <content type="html"><![CDATA[<p>分析过Zend编译阶段的Token机制，这里简单说说借助VLD扩展分析Opcode。</p><p>VLD比较适合分析语法上的小点，分析业务逻辑时建议使用BlackFire等工具。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90">一个简单的例子</a></li><li><a href="#%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%82%B9">验证一个语法点</a></li><li><a href="#%E5%AE%9A%E4%BD%8Dopcode%E7%9A%84%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81">定位OpCode的执行代码</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><blockquote><p>代码是PHP7.1.16的官方release版本 <a href="https://github.com/php/php-src/tree/PHP-7.1.16" target="_blank" rel="noopener">下载</a></p></blockquote><p><a id="markdown-一个简单的例子" name="一个简单的例子"></a></p><h2 id="一个简单的例子"><a class="markdownIt-Anchor" href="#一个简单的例子"></a> 一个简单的例子</h2><p>3v4l网站的代码运行环境已经支持了Vld的分析，不想安装扩展的话，可以参考这个<a href="https://3v4l.org/SUGKn/vld#output" target="_blank" rel="noopener">例子</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compiled vars:  !0 = $greeter</span><br></pre></td></tr></table></figure><p>入参$greeter被保存在CV !0中</p><blockquote><p>There are multiple types of variables within the Zend Engine. All variables use numeric identifiers.</p><p>Variable prefixed with an exclamation point (!) are compiled variables (CVs) — these are pointers to userland variables<br>Variables prefixed with a tilde (~) are temporary variables used for temporary storage (TMP_VARs) of in-process operations<br>Variables prefixed with a dollar ($) are another type of temporary variables (VARs) which are tied to userland variables like CVs and therefore require things like refcounting.<br>Variables prefixed with a colon (: ) are  temporary variables used for the storage of the result of lookups in the class hashtable</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">line     #* E I O op                           fetch          ext  return  operands</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">   2     0  E &gt;   NOP                                                      </span><br><span class="line">   9     1        NEW                                              $2      :-5</span><br><span class="line">         2        DO_FCALL                                      0          </span><br><span class="line">         3        ASSIGN                                                   !0, $2</span><br><span class="line">  10     4        INIT_METHOD_CALL                                         !0, &apos;sayHello&apos;</span><br><span class="line">         5        SEND_VAL_EX                                              &apos;World&apos;</span><br><span class="line">         6        DO_FCALL                                      0          </span><br><span class="line">         7      &gt; RETURN                                                   1</span><br></pre></td></tr></table></figure><p>line: 对应PHP代码中的行号<br>#*: 带星号的表示执行不到的行，PHP可能把这些opcode丢弃<br>E I O: Entry In Out，程序的入口和出口<br>op: opcode<br>fetch: Details on global variable fetches (super globals, or the use of the global keyword)<br>ext: Extra data associated with the opcode, for example the opcode to which it should JMP<br>return: 它将保存操作的返回值<br>operands: 它指明了操作数</p><p>参考链接：<a href="https://derickrethans.nl/more-source-analysis-with-vld.html" target="_blank" rel="noopener">More source analysis with VLD</a></p><p><a id="markdown-验证一个语法点" name="验证一个语法点"></a></p><h2 id="验证一个语法点"><a class="markdownIt-Anchor" href="#验证一个语法点"></a> 验证一个语法点</h2><p>赋值运算的返回值是一个临时变量，接下来验证一下：</p><p><a href="https://3v4l.org/mSBD0/vld#output" target="_blank" rel="noopener">例子</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure><p>被转换成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ASSIGN                                                   !0, 1</span><br><span class="line">ECHO                                                     !0</span><br></pre></td></tr></table></figure><p>而</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> ($a = <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>被转换成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ASSIGN                                           $2      !0, 1</span><br><span class="line">ECHO                                                     $2</span><br></pre></td></tr></table></figure><p>可见第二次<code>echo</code>接收到的参数是一个临时变量<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;，&#039; at position 2: 2，̲而不是!0(也就是">2，而不是!0(也就是</span>a)。</p><p><a id="markdown-定位opcode的执行代码" name="定位opcode的执行代码"></a></p><h2 id="定位opcode的执行代码"><a class="markdownIt-Anchor" href="#定位opcode的执行代码"></a> 定位OpCode的执行代码</h2><p>参考这篇文章：<a href="http://www.php-internals.com/book/?p=chapt02/02-03-03-from-opcode-to-handler#%E5%91%BD%E5%90%8D%E6%9F%A5%E6%89%BE%E6%B3%95" target="_blank" rel="noopener">opcode处理函数查找</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分析过Zend编译阶段的Token机制，这里简单说说借助VLD扩展分析Opcode。&lt;/p&gt;
&lt;p&gt;VLD比较适合分析语法上的小点，分析业务逻辑时建议使用BlackFire等工具。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90&quot;&gt;一个简单的例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%82%B9&quot;&gt;验证一个语法点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%9A%E4%BD%8Dopcode%E7%9A%84%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81&quot;&gt;定位OpCode的执行代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Zend Engine" scheme="http://www.notee.cc/tags/Zend-Engine/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码的一生（六）Lex和Tokenizing</title>
    <link href="http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_6/"/>
    <id>http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_6/</id>
    <published>2018-08-21T06:29:39.000Z</published>
    <updated>2020-09-10T09:30:26.045Z</updated>
    
    <content type="html"><![CDATA[<p>认识了那么多的ZEND_AST_XXX，他们是如何和Token、和PHP的关键字关联起来的呢？</p><p>PHP的<code>token_get_all</code>函数可以打印出PHP语法解析的结果，但是怎么拿来分析呢？</p><p>在上一篇Bison的基础上，来看看Zend是怎么分析PHP语法的。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#zend%E7%9A%84bison%E6%96%87%E4%BB%B6">Zend的Bison文件</a><ul><li><a href="#c-declarations">C declarations</a></li><li><a href="#bison-declarations">Bison declarations</a></li><li><a href="#grammar-rules">Grammar rules</a></li></ul></li><li><a href="#yyparse%E5%87%BD%E6%95%B0">yyparse函数</a><ul><li><a href="#lex%E7%9A%84token%E7%94%9F%E6%88%90">Lex的Token生成</a></li></ul></li><li><a href="#token_get_all">token_get_all</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><blockquote><p>代码是PHP7.1.16的官方release版本 <a href="https://github.com/php/php-src/tree/PHP-7.1.16" target="_blank" rel="noopener">下载</a></p></blockquote><p><a id="markdown-zend的bison文件" name="zend的bison文件"></a></p><h2 id="zend的bison文件"><a class="markdownIt-Anchor" href="#zend的bison文件"></a> Zend的Bison文件</h2><p>Bison文件的整体布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">C declarations</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">Bison declarations</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">Grammar rules</span><br><span class="line">%%</span><br><span class="line">Additional C code</span><br></pre></td></tr></table></figure><blockquote><p>The C declarations may define types and variables used in the actions. You can also use preprocessor commands to define macros used there, and use #include to include header files that do any of these things.</p></blockquote><blockquote><p>The Bison declarations declare the names of the terminal and nonterminal symbols, and may also describe operator precedence and the data types of semantic values of various symbols.</p></blockquote><blockquote><p>The grammar rules define how to construct each nonterminal symbol from its parts.</p></blockquote><blockquote><p>The additional C code can contain any C code you want to use. Often the definition of the lexical analyzer yylex goes here, plus subroutines called by the actions in the grammar rules. In a simple program, all the rest of the program can go here.</p></blockquote><p>下文请参考<a href="https://github.com/php/php-src/blob/PHP-7.1.16/Zend/zend_language_parser.y" target="_blank" rel="noopener">Zend/zend_language_parser.y</a>文件；并了解一定的<a href="http://dinosaur.compilertools.net/bison/bison_6.html#SEC36" target="_blank" rel="noopener">Bison语法</a>，文中不再赘述。</p><p><a id="markdown-c-declarations" name="c-declarations"></a></p><h3 id="c-declarations"><a class="markdownIt-Anchor" href="#c-declarations"></a> C declarations</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* $Id$ */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zend_compile.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zend.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zend_list.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zend_globals.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zend_API.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zend_constants.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zend_language_scanner.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YYSIZE_T size_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yytnamerr zend_yytnamerr</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> YYSIZE_T <span class="title">zend_yytnamerr</span><span class="params">(<span class="keyword">char</span>*, <span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YYERROR_VERBOSE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YYSTYPE zend_parser_stack_elem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YYMALLOC malloc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YYFREE free</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-bison-declarations" name="bison-declarations"></a></p><h3 id="bison-declarations"><a class="markdownIt-Anchor" href="#bison-declarations"></a> Bison declarations</h3><p>可以在这里找到PHP所有的运算符和它们的优先级。</p><p><a href="http://www.php.net/manual/en/language.operators.precedence.php" target="_blank" rel="noopener">运算符优先级和左右结合性</a>就在这里声明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">%left T_INCLUDE T_INCLUDE_ONCE T_EVAL T_REQUIRE T_REQUIRE_ONCE</span><br><span class="line">%left <span class="string">','</span></span><br><span class="line">%left T_LOGICAL_OR</span><br><span class="line">%left T_LOGICAL_XOR</span><br><span class="line">%left T_LOGICAL_AND</span><br><span class="line">%right T_PRINT</span><br><span class="line">%right T_YIELD</span><br><span class="line">%right T_DOUBLE_ARROW</span><br><span class="line">%right T_YIELD_FROM</span><br><span class="line">%left <span class="string">'='</span> T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_SL_EQUAL T_SR_EQUAL T_POW_EQUAL</span><br><span class="line">%left <span class="string">'?'</span> <span class="string">':'</span></span><br><span class="line">%right T_COALESCE</span><br><span class="line">%left T_BOOLEAN_OR</span><br><span class="line">%left T_BOOLEAN_AND</span><br><span class="line">%left <span class="string">'|'</span></span><br><span class="line">%left <span class="string">'^'</span></span><br><span class="line">%left <span class="string">'&amp;'</span></span><br><span class="line">%nonassoc T_IS_EQUAL T_IS_NOT_EQUAL T_IS_IDENTICAL T_IS_NOT_IDENTICAL T_SPACESHIP</span><br><span class="line">%nonassoc <span class="string">'&lt;'</span> T_IS_SMALLER_OR_EQUAL <span class="string">'&gt;'</span> T_IS_GREATER_OR_EQUAL</span><br><span class="line">%left T_SL T_SR</span><br><span class="line">%left <span class="string">'+'</span> <span class="string">'-'</span> <span class="string">'.'</span></span><br><span class="line">%left <span class="string">'*'</span> <span class="string">'/'</span> <span class="string">'%'</span></span><br><span class="line">%right <span class="string">'!'</span></span><br><span class="line">%nonassoc T_INSTANCEOF</span><br><span class="line">%right <span class="string">'~'</span> T_INC T_DEC T_INT_CAST T_DOUBLE_CAST T_STRING_CAST T_ARRAY_CAST T_OBJECT_CAST T_BOOL_CAST T_UNSET_CAST <span class="string">'@'</span></span><br><span class="line">%right T_POW</span><br><span class="line">%right <span class="string">'['</span></span><br><span class="line">%nonassoc T_NEW T_CLONE</span><br><span class="line">%left T_NOELSE</span><br><span class="line">%left T_ELSEIF</span><br><span class="line">%left T_ELSE</span><br><span class="line">%left T_ENDIF</span><br><span class="line">%right T_STATIC T_ABSTRACT T_FINAL T_PRIVATE T_PROTECTED T_PUBLIC</span><br></pre></td></tr></table></figure><blockquote><p>Bison allows you to specify these choices with the operator precedence declarations %left and %right. Each such declaration contains a list of tokens, which are operators whose precedence and associativity is being declared. <strong>The %left declaration makes all those operators left-associative and the %right declaration makes them right-associative</strong>. A third alternative is %nonassoc, which declares that it is a syntax error to find the same operator twice “in a row”.</p><p>The relative precedence of different operators is controlled by the order in which they are declared. <strong>The first %left or %right declaration in the file declares the operators whose precedence is lowest</strong>, the next such declaration declares the operators whose precedence is a little higher, and so on.</p></blockquote><p>参考链接：<a href="http://dinosaur.compilertools.net/bison/bison_8.html#SEC73" target="_blank" rel="noopener">Specifying Operator Precedence</a></p><p>上面运算符所引用的token关键字定义在下面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">%token &lt;ast&gt; T_LNUMBER   <span class="string">"integer number (T_LNUMBER)"</span></span><br><span class="line">%token &lt;ast&gt; T_DNUMBER   <span class="string">"floating-point number (T_DNUMBER)"</span></span><br><span class="line">%token &lt;ast&gt; T_STRING    <span class="string">"identifier (T_STRING)"</span></span><br><span class="line">%token &lt;ast&gt; T_VARIABLE  <span class="string">"variable (T_VARIABLE)"</span></span><br><span class="line">%token &lt;ast&gt; T_INLINE_HTML</span><br><span class="line">%token &lt;ast&gt; T_ENCAPSED_AND_WHITESPACE  <span class="string">"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"</span></span><br><span class="line">%token &lt;ast&gt; T_CONSTANT_ENCAPSED_STRING <span class="string">"quoted-string (T_CONSTANT_ENCAPSED_STRING)"</span></span><br><span class="line">%token &lt;ast&gt; T_STRING_VARNAME <span class="string">"variable name (T_STRING_VARNAME)"</span></span><br><span class="line">%token &lt;ast&gt; T_NUM_STRING <span class="string">"number (T_NUM_STRING)"</span></span><br><span class="line"></span><br><span class="line">%token END <span class="number">0</span> <span class="string">"end of file"</span></span><br><span class="line">%token T_INCLUDE      <span class="string">"include (T_INCLUDE)"</span></span><br><span class="line">%token T_INCLUDE_ONCE <span class="string">"include_once (T_INCLUDE_ONCE)"</span></span><br><span class="line">%token T_EVAL         <span class="string">"eval (T_EVAL)"</span></span><br><span class="line">%token T_REQUIRE      <span class="string">"require (T_REQUIRE)"</span></span><br><span class="line">%token T_REQUIRE_ONCE <span class="string">"require_once (T_REQUIRE_ONCE)"</span></span><br><span class="line">%token T_LOGICAL_OR   <span class="string">"or (T_LOGICAL_OR)"</span></span><br><span class="line">%token T_LOGICAL_XOR  <span class="string">"xor (T_LOGICAL_XOR)"</span></span><br><span class="line">%token T_LOGICAL_AND  <span class="string">"and (T_LOGICAL_AND)"</span></span><br><span class="line">%token T_PRINT        <span class="string">"print (T_PRINT)"</span></span><br><span class="line">%token T_YIELD        <span class="string">"yield (T_YIELD)"</span></span><br><span class="line">%token T_YIELD_FROM   <span class="string">"yield from (T_YIELD_FROM)"</span></span><br><span class="line">%token T_PLUS_EQUAL   <span class="string">"+= (T_PLUS_EQUAL)"</span></span><br><span class="line">%token T_MINUS_EQUAL  <span class="string">"-= (T_MINUS_EQUAL)"</span></span><br><span class="line">%token T_MUL_EQUAL    <span class="string">"*= (T_MUL_EQUAL)"</span></span><br><span class="line">%token T_DIV_EQUAL    <span class="string">"/= (T_DIV_EQUAL)"</span></span><br><span class="line">%token T_CONCAT_EQUAL <span class="string">".= (T_CONCAT_EQUAL)"</span></span><br><span class="line">%token T_MOD_EQUAL    <span class="string">"%= (T_MOD_EQUAL)"</span></span><br><span class="line">%token T_AND_EQUAL    <span class="string">"&amp;= (T_AND_EQUAL)"</span></span><br><span class="line">%token T_OR_EQUAL     <span class="string">"|= (T_OR_EQUAL)"</span></span><br><span class="line">%token T_XOR_EQUAL    <span class="string">"^= (T_XOR_EQUAL)"</span></span><br><span class="line">%token T_SL_EQUAL     <span class="string">"&lt;&lt;= (T_SL_EQUAL)"</span></span><br><span class="line">%token T_SR_EQUAL     <span class="string">"&gt;&gt;= (T_SR_EQUAL)"</span></span><br><span class="line">%token T_BOOLEAN_OR   <span class="string">"|| (T_BOOLEAN_OR)"</span></span><br><span class="line">%token T_BOOLEAN_AND  <span class="string">"&amp;&amp; (T_BOOLEAN_AND)"</span></span><br><span class="line">%token T_IS_EQUAL     <span class="string">"== (T_IS_EQUAL)"</span></span><br><span class="line">%token T_IS_NOT_EQUAL <span class="string">"!= (T_IS_NOT_EQUAL)"</span></span><br><span class="line">%token T_IS_IDENTICAL <span class="string">"=== (T_IS_IDENTICAL)"</span></span><br><span class="line">%token T_IS_NOT_IDENTICAL <span class="string">"!== (T_IS_NOT_IDENTICAL)"</span></span><br><span class="line">%token T_IS_SMALLER_OR_EQUAL <span class="string">"&lt;= (T_IS_SMALLER_OR_EQUAL)"</span></span><br><span class="line">%token T_IS_GREATER_OR_EQUAL <span class="string">"&gt;= (T_IS_GREATER_OR_EQUAL)"</span></span><br><span class="line">%token T_SPACESHIP <span class="string">"&lt;=&gt; (T_SPACESHIP)"</span></span><br><span class="line">%token T_SL <span class="string">"&lt;&lt; (T_SL)"</span></span><br><span class="line">%token T_SR <span class="string">"&gt;&gt; (T_SR)"</span></span><br><span class="line">%token T_INSTANCEOF  <span class="string">"instanceof (T_INSTANCEOF)"</span></span><br><span class="line">%token T_INC <span class="string">"++ (T_INC)"</span></span><br><span class="line">%token T_DEC <span class="string">"-- (T_DEC)"</span></span><br><span class="line">%token T_INT_CAST    <span class="string">"(int) (T_INT_CAST)"</span></span><br><span class="line">%token T_DOUBLE_CAST <span class="string">"(double) (T_DOUBLE_CAST)"</span></span><br><span class="line">%token T_STRING_CAST <span class="string">"(string) (T_STRING_CAST)"</span></span><br><span class="line">%token T_ARRAY_CAST  <span class="string">"(array) (T_ARRAY_CAST)"</span></span><br><span class="line">%token T_OBJECT_CAST <span class="string">"(object) (T_OBJECT_CAST)"</span></span><br><span class="line">%token T_BOOL_CAST   <span class="string">"(bool) (T_BOOL_CAST)"</span></span><br><span class="line">%token T_UNSET_CAST  <span class="string">"(unset) (T_UNSET_CAST)"</span></span><br><span class="line">%token T_NEW       <span class="string">"new (T_NEW)"</span></span><br><span class="line">%token T_CLONE     <span class="string">"clone (T_CLONE)"</span></span><br><span class="line">%token T_EXIT      <span class="string">"exit (T_EXIT)"</span></span><br><span class="line">%token T_IF        <span class="string">"if (T_IF)"</span></span><br><span class="line">%token T_ELSEIF    <span class="string">"elseif (T_ELSEIF)"</span></span><br><span class="line">%token T_ELSE      <span class="string">"else (T_ELSE)"</span></span><br><span class="line">%token T_ENDIF     <span class="string">"endif (T_ENDIF)"</span></span><br><span class="line">%token T_ECHO       <span class="string">"echo (T_ECHO)"</span></span><br><span class="line">%token T_DO         <span class="string">"do (T_DO)"</span></span><br><span class="line">%token T_WHILE      <span class="string">"while (T_WHILE)"</span></span><br><span class="line">%token T_ENDWHILE   <span class="string">"endwhile (T_ENDWHILE)"</span></span><br><span class="line">%token T_FOR        <span class="string">"for (T_FOR)"</span></span><br><span class="line">%token T_ENDFOR     <span class="string">"endfor (T_ENDFOR)"</span></span><br><span class="line">%token T_FOREACH    <span class="string">"foreach (T_FOREACH)"</span></span><br><span class="line">%token T_ENDFOREACH <span class="string">"endforeach (T_ENDFOREACH)"</span></span><br><span class="line">%token T_DECLARE    <span class="string">"declare (T_DECLARE)"</span></span><br><span class="line">%token T_ENDDECLARE <span class="string">"enddeclare (T_ENDDECLARE)"</span></span><br><span class="line">%token T_AS         <span class="string">"as (T_AS)"</span></span><br><span class="line">%token T_SWITCH     <span class="string">"switch (T_SWITCH)"</span></span><br><span class="line">%token T_ENDSWITCH  <span class="string">"endswitch (T_ENDSWITCH)"</span></span><br><span class="line">%token T_CASE       <span class="string">"case (T_CASE)"</span></span><br><span class="line">%token T_DEFAULT    <span class="string">"default (T_DEFAULT)"</span></span><br><span class="line">%token T_BREAK      <span class="string">"break (T_BREAK)"</span></span><br><span class="line">%token T_CONTINUE   <span class="string">"continue (T_CONTINUE)"</span></span><br><span class="line">%token T_GOTO       <span class="string">"goto (T_GOTO)"</span></span><br><span class="line">%token T_FUNCTION   <span class="string">"function (T_FUNCTION)"</span></span><br><span class="line">%token T_CONST      <span class="string">"const (T_CONST)"</span></span><br><span class="line">%token T_RETURN     <span class="string">"return (T_RETURN)"</span></span><br><span class="line">%token T_TRY        <span class="string">"try (T_TRY)"</span></span><br><span class="line">%token T_CATCH      <span class="string">"catch (T_CATCH)"</span></span><br><span class="line">%token T_FINALLY    <span class="string">"finally (T_FINALLY)"</span></span><br><span class="line">%token T_THROW      <span class="string">"throw (T_THROW)"</span></span><br><span class="line">%token T_USE        <span class="string">"use (T_USE)"</span></span><br><span class="line">%token T_INSTEADOF  <span class="string">"insteadof (T_INSTEADOF)"</span></span><br><span class="line">%token T_GLOBAL     <span class="string">"global (T_GLOBAL)"</span></span><br><span class="line">%token T_STATIC     <span class="string">"static (T_STATIC)"</span></span><br><span class="line">%token T_ABSTRACT   <span class="string">"abstract (T_ABSTRACT)"</span></span><br><span class="line">%token T_FINAL      <span class="string">"final (T_FINAL)"</span></span><br><span class="line">%token T_PRIVATE    <span class="string">"private (T_PRIVATE)"</span></span><br><span class="line">%token T_PROTECTED  <span class="string">"protected (T_PROTECTED)"</span></span><br><span class="line">%token T_PUBLIC     <span class="string">"public (T_PUBLIC)"</span></span><br><span class="line">%token T_VAR        <span class="string">"var (T_VAR)"</span></span><br><span class="line">%token T_UNSET      <span class="string">"unset (T_UNSET)"</span></span><br><span class="line">%token T_ISSET      <span class="string">"isset (T_ISSET)"</span></span><br><span class="line">%token T_EMPTY      <span class="string">"empty (T_EMPTY)"</span></span><br><span class="line">%token T_HALT_COMPILER <span class="string">"__halt_compiler (T_HALT_COMPILER)"</span></span><br><span class="line">%token T_CLASS      <span class="string">"class (T_CLASS)"</span></span><br><span class="line">%token T_TRAIT      <span class="string">"trait (T_TRAIT)"</span></span><br><span class="line">%token T_INTERFACE  <span class="string">"interface (T_INTERFACE)"</span></span><br><span class="line">%token T_EXTENDS    <span class="string">"extends (T_EXTENDS)"</span></span><br><span class="line">%token T_IMPLEMENTS <span class="string">"implements (T_IMPLEMENTS)"</span></span><br><span class="line">%token T_OBJECT_OPERATOR <span class="string">"-&gt; (T_OBJECT_OPERATOR)"</span></span><br><span class="line">%token T_DOUBLE_ARROW    <span class="string">"=&gt; (T_DOUBLE_ARROW)"</span></span><br><span class="line">%token T_LIST            <span class="string">"list (T_LIST)"</span></span><br><span class="line">%token T_ARRAY           <span class="string">"array (T_ARRAY)"</span></span><br><span class="line">%token T_CALLABLE        <span class="string">"callable (T_CALLABLE)"</span></span><br><span class="line">%token T_LINE            <span class="string">"__LINE__ (T_LINE)"</span></span><br><span class="line">%token T_FILE            <span class="string">"__FILE__ (T_FILE)"</span></span><br><span class="line">%token T_DIR             <span class="string">"__DIR__ (T_DIR)"</span></span><br><span class="line">%token T_CLASS_C         <span class="string">"__CLASS__ (T_CLASS_C)"</span></span><br><span class="line">%token T_TRAIT_C         <span class="string">"__TRAIT__ (T_TRAIT_C)"</span></span><br><span class="line">%token T_METHOD_C        <span class="string">"__METHOD__ (T_METHOD_C)"</span></span><br><span class="line">%token T_FUNC_C          <span class="string">"__FUNCTION__ (T_FUNC_C)"</span></span><br><span class="line">%token T_COMMENT         <span class="string">"comment (T_COMMENT)"</span></span><br><span class="line">%token T_DOC_COMMENT     <span class="string">"doc comment (T_DOC_COMMENT)"</span></span><br><span class="line">%token T_OPEN_TAG        <span class="string">"open tag (T_OPEN_TAG)"</span></span><br><span class="line">%token T_OPEN_TAG_WITH_ECHO <span class="string">"open tag with echo (T_OPEN_TAG_WITH_ECHO)"</span></span><br><span class="line">%token T_CLOSE_TAG       <span class="string">"close tag (T_CLOSE_TAG)"</span></span><br><span class="line">%token T_WHITESPACE      <span class="string">"whitespace (T_WHITESPACE)"</span></span><br><span class="line">%token T_START_HEREDOC   <span class="string">"heredoc start (T_START_HEREDOC)"</span></span><br><span class="line">%token T_END_HEREDOC     <span class="string">"heredoc end (T_END_HEREDOC)"</span></span><br><span class="line">%token T_DOLLAR_OPEN_CURLY_BRACES <span class="string">"$&#123; (T_DOLLAR_OPEN_CURLY_BRACES)"</span></span><br><span class="line">%token T_CURLY_OPEN      <span class="string">"&#123;$ (T_CURLY_OPEN)"</span></span><br><span class="line">%token T_PAAMAYIM_NEKUDOTAYIM <span class="string">":: (T_PAAMAYIM_NEKUDOTAYIM)"</span></span><br><span class="line">%token T_NAMESPACE       <span class="string">"namespace (T_NAMESPACE)"</span></span><br><span class="line">%token T_NS_C            <span class="string">"__NAMESPACE__ (T_NS_C)"</span></span><br><span class="line">%token T_NS_SEPARATOR    <span class="string">"\\ (T_NS_SEPARATOR)"</span></span><br><span class="line">%token T_ELLIPSIS        <span class="string">"... (T_ELLIPSIS)"</span></span><br><span class="line">%token T_COALESCE        <span class="string">"?? (T_COALESCE)"</span></span><br><span class="line">%token T_POW             <span class="string">"** (T_POW)"</span></span><br><span class="line">%token T_POW_EQUAL       <span class="string">"**= (T_POW_EQUAL)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Token used to force a parse error from the lexer */</span></span><br><span class="line">%token T_ERROR</span><br></pre></td></tr></table></figure><p>然后是命名了一些句法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">%type &lt;ast&gt; top_statement namespace_name name statement function_declaration_statement</span><br><span class="line">%type &lt;ast&gt; class_declaration_statement trait_declaration_statement</span><br><span class="line">%type &lt;ast&gt; interface_declaration_statement interface_extends_list</span><br><span class="line">%type &lt;ast&gt; group_use_declaration inline_use_declarations inline_use_declaration</span><br><span class="line">%type &lt;ast&gt; mixed_group_use_declaration use_declaration unprefixed_use_declaration</span><br><span class="line">%type &lt;ast&gt; unprefixed_use_declarations const_decl inner_statement</span><br><span class="line">%type &lt;ast&gt; expr optional_expr while_statement for_statement foreach_variable</span><br><span class="line">%type &lt;ast&gt; foreach_statement declare_statement finally_statement unset_variable variable</span><br><span class="line">%type &lt;ast&gt; extends_from parameter optional_type argument expr_without_variable global_var</span><br><span class="line">%type &lt;ast&gt; static_var class_statement trait_adaptation trait_precedence trait_alias</span><br><span class="line">%type &lt;ast&gt; absolute_trait_method_reference trait_method_reference property echo_expr</span><br><span class="line">%type &lt;ast&gt; new_expr anonymous_class class_name class_name_reference simple_variable</span><br><span class="line">%type &lt;ast&gt; internal_functions_in_yacc</span><br><span class="line">%type &lt;ast&gt; exit_expr scalar backticks_expr lexical_var function_call member_name property_name</span><br><span class="line">%type &lt;ast&gt; variable_class_name dereferencable_scalar constant dereferencable</span><br><span class="line">%type &lt;ast&gt; callable_expr callable_variable static_member new_variable</span><br><span class="line">%type &lt;ast&gt; encaps_var encaps_var_offset isset_variables</span><br><span class="line">%type &lt;ast&gt; top_statement_list use_declarations const_list inner_statement_list if_stmt</span><br><span class="line">%type &lt;ast&gt; alt_if_stmt for_exprs switch_case_list global_var_list static_var_list</span><br><span class="line">%type &lt;ast&gt; echo_expr_list unset_variables catch_name_list catch_list parameter_list class_statement_list</span><br><span class="line">%type &lt;ast&gt; implements_list case_list if_stmt_without_else</span><br><span class="line">%type &lt;ast&gt; non_empty_parameter_list argument_list non_empty_argument_list property_list</span><br><span class="line">%type &lt;ast&gt; class_const_list class_const_decl name_list trait_adaptations method_body non_empty_for_exprs</span><br><span class="line">%type &lt;ast&gt; ctor_arguments alt_if_stmt_without_else trait_adaptation_list lexical_vars</span><br><span class="line">%type &lt;ast&gt; lexical_var_list encaps_list</span><br><span class="line">%type &lt;ast&gt; array_pair non_empty_array_pair_list array_pair_list possible_array_pair</span><br><span class="line">%type &lt;ast&gt; isset_variable type return_type type_expr</span><br><span class="line">%type &lt;ast&gt; identifier</span><br><span class="line"></span><br><span class="line">%type &lt;num&gt; returns_ref function is_reference is_variadic variable_modifiers</span><br><span class="line">%type &lt;num&gt; method_modifiers non_empty_member_modifiers member_modifier</span><br><span class="line">%type &lt;num&gt; class_modifiers class_modifier use_type backup_fn_flags</span><br><span class="line"></span><br><span class="line">%type &lt;str&gt; backup_doc_comment</span><br></pre></td></tr></table></figure><blockquote><p>When you use %union to specify multiple value types, you must declare the value type of each nonterminal symbol for which values are used. This is done with a %type declaration, like this:</p><p>%type <type> nonterminal…</type></p><p>Here nonterminal is the name of a nonterminal symbol, and type is the name given in the %union to the alternative that you want (see section The Collection of Value Types). You can give any number of nonterminal symbols in the same %type declaration, if they have the same value type. Use spaces to separate the symbol names.</p><p>You can also declare the value type of a terminal symbol. To do this, use the same <type> construction in a declaration for the terminal symbol. All kinds of token declarations allow <type>.</type></type></p></blockquote><blockquote><p>A nonterminal symbol stands for a class of syntactically equivalent groupings. The symbol name is used in writing grammar rules. By convention, it should be all lower case.</p></blockquote><p>参考链接：<a href="http://dinosaur.compilertools.net/bison/bison_6.html#SEC53" target="_blank" rel="noopener">Nonterminal Symbols</a>，<a href="http://dinosaur.compilertools.net/bison/bison_6.html#SEC40" target="_blank" rel="noopener">Symbols, Terminal and Nonterminal</a>。</p><p><a id="markdown-grammar-rules" name="grammar-rules"></a></p><h3 id="grammar-rules"><a class="markdownIt-Anchor" href="#grammar-rules"></a> Grammar rules</h3><p>句法分析规则请参考<a href="http://dinosaur.compilertools.net/bison/bison_6.html#SEC41" target="_blank" rel="noopener">Syntax of Grammar Rules</a>。</p><blockquote><p>An action accompanies a syntactic rule and contains C code to be executed each time an instance of that rule is recognized.</p></blockquote><p>参考链接：<a href="http://dinosaur.compilertools.net/bison/bison_6.html#SEC46" target="_blank" rel="noopener">Actions</a></p><p>句法的定义比较多，就全不贴出来了，举个例子：</p><p><code>isset</code>函数的的文档如下：</p><pre><code>bool isset ( mixed $var [, mixed $... ] )</code></pre><p>来看看它是怎么完成句法分析的，<code>Zend/zend_language_scanner.l:1405</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ST_IN_SCRIPTING&gt;&quot;isset&quot; &#123;</span><br><span class="line">    RETURN_TOKEN(T_ISSET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当扫描到<code>isset</code>的时候，产生了token<code>T_ISSET</code>。然后在<code>Zend/zend_language_parser.y</code>中匹配到<code>T_ISSET '(' isset_variables ')'</code>，对应的Rule：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">internal_functions_in_yacc:</span><br><span class="line">        T_ISSET &apos;(&apos; isset_variables &apos;)&apos; &#123; $$ = $3; &#125;</span><br><span class="line">    |   T_EMPTY &apos;(&apos; expr &apos;)&apos; &#123; $$ = zend_ast_create(ZEND_AST_EMPTY, $3); &#125;</span><br><span class="line">    |   T_INCLUDE expr</span><br><span class="line">            &#123; $$ = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_INCLUDE, $2); &#125;</span><br><span class="line">    |   T_INCLUDE_ONCE expr</span><br><span class="line">            &#123; $$ = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_INCLUDE_ONCE, $2); &#125;</span><br><span class="line">    |   T_EVAL &apos;(&apos; expr &apos;)&apos;</span><br><span class="line">            &#123; $$ = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_EVAL, $3); &#125;</span><br><span class="line">    |   T_REQUIRE expr</span><br><span class="line">            &#123; $$ = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_REQUIRE, $2); &#125;</span><br><span class="line">    |   T_REQUIRE_ONCE expr</span><br><span class="line">            &#123; $$ = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_REQUIRE_ONCE, $2); &#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>然后执行Action: <code>{ $$ = $3; }</code>，将该Rule的返回值<code>$$</code>设置为第三个匹配项<code>isset_variables</code>的返回值<code>$3</code>。然后把<code>$x, $y, $z</code>传递给<code>isset_variables</code>作为匹配，对应的Rule:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isset_variables:</span><br><span class="line">        isset_variable &#123; $$ = $1; &#125;</span><br><span class="line">    |   isset_variables &apos;,&apos; isset_variable</span><br><span class="line">            &#123; $$ = zend_ast_create(ZEND_AST_AND, $1, $3); &#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>接下来匹配到了<code>isset_variables ',' isset_variable</code>，执行Action<code>{ $$ = zend_ast_create(ZEND_AST_AND, $1, $3); }</code>，将该Rule的返回值<code>$$</code>设置为函数<code>zend_ast_create</code>的返回值，其参数分别为ZEND_AST_AND、第一个匹配项的返回值<code>$1</code>、第三个匹配项的返回值<code>$3</code>。</p><p>假设<sub>是一个运算符，又有表达式a</sub>b<sub>c，如果</sub>是左结合的，那么该表达式被解析为(a<sub>b)</sub>c，如果<sub>是右结合的，那么该表达式将被解析为a</sub>(b~c)。</p><pre><code>%left ','</code></pre><p>逗号的结合性左结合，所以<code>isset_variables</code>接收到的是<code>$x, $y</code>，<code>isset_variable</code>接收到的是<code>$z</code>。一直递归下去。</p><p>以<code>$z</code>为例，它接下来匹配的Rule是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isset_variable:</span><br><span class="line">        expr &#123; $$ = zend_ast_create(ZEND_AST_ISSET, $1); &#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>匹配到了<code>expr</code>，执行Action<code>{ $$ = zend_ast_create(ZEND_AST_ISSET, $1); }</code>，将该Rule的返回值<code>$$</code>设置为函数<code>zend_ast_create</code>的返回值，其参数分别为ZEND_AST_ISSET、第一个匹配项的返回值<code>$1</code>。对应的Rule：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expr:</span><br><span class="line">        variable                    &#123; $$ = $1; &#125;</span><br><span class="line">    |   expr_without_variable       &#123; $$ = $1; &#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>尝试匹配<code>variable</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">variable:</span><br><span class="line">        callable_variable</span><br><span class="line">            &#123; $$ = $1; &#125;</span><br><span class="line">    |   static_member</span><br><span class="line">            &#123; $$ = $1; &#125;</span><br><span class="line">    |   dereferencable T_OBJECT_OPERATOR property_name</span><br><span class="line">            &#123; $$ = zend_ast_create(ZEND_AST_PROP, $1, $3); &#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>尝试匹配<code>callable_variable</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">callable_variable:</span><br><span class="line">        simple_variable</span><br><span class="line">            &#123; $$ = zend_ast_create(ZEND_AST_VAR, $1); &#125;</span><br><span class="line">    |   dereferencable &apos;[&apos; optional_expr &apos;]&apos;</span><br><span class="line">            &#123; $$ = zend_ast_create(ZEND_AST_DIM, $1, $3); &#125;</span><br><span class="line">    |   constant &apos;[&apos; optional_expr &apos;]&apos;</span><br><span class="line">            &#123; $$ = zend_ast_create(ZEND_AST_DIM, $1, $3); &#125;</span><br><span class="line">    |   dereferencable &apos;&#123;&apos; expr &apos;&#125;&apos;</span><br><span class="line">            &#123; $$ = zend_ast_create(ZEND_AST_DIM, $1, $3); &#125;</span><br><span class="line">    |   dereferencable T_OBJECT_OPERATOR property_name argument_list</span><br><span class="line">            &#123; $$ = zend_ast_create(ZEND_AST_METHOD_CALL, $1, $3, $4); &#125;</span><br><span class="line">    |   function_call &#123; $$ = $1; &#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>尝试匹配<code>simple_variable</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">simple_variable:</span><br><span class="line">        T_VARIABLE          &#123; $$ = $1; &#125;</span><br><span class="line">    |   &apos;$&apos; &apos;&#123;&apos; expr &apos;&#125;&apos;    &#123; $$ = $3; &#125;</span><br><span class="line">    |   &apos;$&apos; simple_variable &#123; $$ = zend_ast_create(ZEND_AST_VAR, $2); &#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><code>T_VARIABLE</code>的匹配规则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ST_IN_SCRIPTING,ST_DOUBLE_QUOTES,ST_HEREDOC,ST_BACKQUOTE,ST_VAR_OFFSET&gt;&quot;$&quot;&#123;LABEL&#125; &#123;</span><br><span class="line">    zend_copy_value(zendlval, (yytext+1), (yyleng-1));</span><br><span class="line">    RETURN_TOKEN(T_VARIABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它匹配了在php代码块、双引号、<code>&lt;&lt;&lt;</code>定界符、反引号、花括号中，一个<code>$</code>后面跟着<code>LABEL</code>。<code>LABEL</code>匹配的是变量名：</p><pre><code>LABEL   [a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*</code></pre><p>当扫描<code>$z</code>时符合了这条匹配规则，产生了<code>T_VARIABLE</code>，所以解析时会匹配到<code>simple_variable</code>，执行Action<code>{ $$ = $1; }</code>，返回变量<code>$z</code>的值。</p><p>然后返回值依次出栈，并执行对应的Action，直到最终<code>internal_functions_in_yacc</code>得到返回值。</p><p>关于PHP是如何识别变量的，请参考这个问题的回答。<a href="https://stackoverflow.com/questions/51946909/how-does-zend-recognize-a-variable-by-specify-the-dollar-prefix-when-parse-it" target="_blank" rel="noopener">How does Zend recognize a variable by specify the dollar prefix when parse it?</a></p><p><a id="markdown-yyparse函数" name="yyparse函数"></a></p><h2 id="yyparse函数"><a class="markdownIt-Anchor" href="#yyparse函数"></a> yyparse函数</h2><p>Bison只是一个句法分析工具，它输出了半成品的文件，zend还需要继续完善yyparse函数，让它解析PHP文件时可以给CG(ast)提供赋值。</p><p>程序入口，参考<a href="https://www.gnu.org/software/bison/manual/html_node/Multiple-start_002dsymbols.html" target="_blank" rel="noopener">Multiple start-symbols</a>，<code>Zend/zend_language_parser.y:265</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">    top_statement_list&#123; CG(ast) = $1; &#125;</span><br></pre></td></tr></table></figure><p>这里就是ast的赋值了，它的值是动作<code>top_statement_list</code>的结果。</p><p><a href="https://www.cs.uic.edu/~spopuri/cparser.html#yyparse" target="_blank" rel="noopener">Understanding C parsers generated by GNU Bison</a>，yyparse是一个goto形成的大循环，频繁的调用Lex获取Token。</p><p><a id="markdown-lex的token生成" name="lex的token生成"></a></p><h3 id="lex的token生成"><a class="markdownIt-Anchor" href="#lex的token生成"></a> Lex的Token生成</h3><p><code>Zend/zend_language_scanner.l:1100</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">int lex_scan(zval *zendlval)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int start_line = CG(zend_lineno);</span><br><span class="line"></span><br><span class="line">restart:</span><br><span class="line">SCNG(yy_text) = YYCURSOR;</span><br><span class="line"></span><br><span class="line">/*!re2c</span><br><span class="line">re2c:yyfill:check = 0;</span><br><span class="line">LNUM[0-9]+</span><br><span class="line">DNUM([0-9]*&quot;.&quot;[0-9]+)|([0-9]+&quot;.&quot;[0-9]*)</span><br><span class="line">EXPONENT_DNUM((&#123;LNUM&#125;|&#123;DNUM&#125;)[eE][+-]?&#123;LNUM&#125;)</span><br><span class="line">HNUM&quot;0x&quot;[0-9a-fA-F]+</span><br><span class="line">BNUM&quot;0b&quot;[01]+</span><br><span class="line">LABEL[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*</span><br><span class="line">WHITESPACE [ \n\r\t]+</span><br><span class="line">TABS_AND_SPACES [ \t]*</span><br><span class="line">TOKENS [;:,.\[\]()|^&amp;+-/*=%!~$&lt;&gt;?@]</span><br><span class="line">ANY_CHAR [^]</span><br><span class="line">NEWLINE (&quot;\r&quot;|&quot;\n&quot;|&quot;\r\n&quot;)</span><br><span class="line"></span><br><span class="line">/* compute yyleng before each rule */</span><br><span class="line">&lt;!*&gt; := yyleng = YYCURSOR - SCNG(yy_text);</span><br><span class="line"></span><br><span class="line">&lt;ST_IN_SCRIPTING&gt;&quot;exit&quot; &#123;</span><br><span class="line">RETURN_TOKEN(T_EXIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ST_IN_SCRIPTING&gt;&quot;die&quot; &#123;</span><br><span class="line">RETURN_TOKEN(T_EXIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ST_IN_SCRIPTING&gt;&quot;function&quot; &#123;</span><br><span class="line">RETURN_TOKEN(T_FUNCTION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ST_IN_SCRIPTING&gt;&quot;const&quot; &#123;</span><br><span class="line">RETURN_TOKEN(T_CONST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ST_IN_SCRIPTING&gt; &quot;exit&quot; &#123;</span><br><span class="line">RETURN_TOKEN(T_EXIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以这个代码为例，它的意思是在<code>ST_IN_SCRIPTING</code>状态下，匹配到exit的时候，执行动作，返回<code>T_EXIT</code>这个Token。</p><p>参考 <a href="http://westes.github.io/flex/manual/Start-Conditions.html" target="_blank" rel="noopener">Flex: Start Conditions</a></p><p><a id="markdown-token_get_all" name="token_get_all"></a></p><h2 id="token_get_all"><a class="markdownIt-Anchor" href="#token_get_all"></a> token_get_all</h2><p>通过该函数可以查看PHP代码串在解析时被识别的Token。举个例子:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">($to)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello $to"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$greeter = <span class="keyword">new</span> Greeting();</span><br><span class="line">$greeter-&gt;sayHello(<span class="string">"World"</span>);</span><br></pre></td></tr></table></figure><p>把上面的文件命名为<code>hello_world.php</code>，由token_get_all读取：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$tokens = token_get_all(file_get_contents(<span class="string">'./hello_world.php'</span>));</span><br><span class="line"></span><br><span class="line">printf(<span class="string">"line   #    token name                    matches\n"</span>);</span><br><span class="line">printf(<span class="string">"--------------------------------------------------\n"</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($token)) &#123;</span><br><span class="line">        printf(<span class="string">"%-7s%-5d%-30s'%-s'\n"</span>, $token[<span class="number">2</span>], $token[<span class="number">0</span>], token_name($token[<span class="number">0</span>]), str_replace(<span class="string">"\n"</span>, <span class="string">"⤸"</span>, $token[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">line   #    token name                    matches</span><br><span class="line">--------------------------------------------------</span><br><span class="line">1      379  T_OPEN_TAG                    &apos;&lt;?php⤸&apos;</span><br><span class="line">2      361  T_CLASS                       &apos;class&apos;</span><br><span class="line">2      382  T_WHITESPACE                  &apos; &apos;</span><br><span class="line">2      319  T_STRING                      &apos;Greeting&apos;</span><br><span class="line">2      382  T_WHITESPACE                  &apos; &apos;</span><br><span class="line">2      382  T_WHITESPACE                  &apos;⤸    &apos;</span><br><span class="line">3      316  T_PUBLIC                      &apos;public&apos;</span><br><span class="line">3      382  T_WHITESPACE                  &apos; &apos;</span><br><span class="line">3      346  T_FUNCTION                    &apos;function&apos;</span><br><span class="line">3      382  T_WHITESPACE                  &apos; &apos;</span><br><span class="line">3      319  T_STRING                      &apos;sayHello&apos;</span><br><span class="line">3      320  T_VARIABLE                    &apos;$to&apos;</span><br><span class="line">3      382  T_WHITESPACE                  &apos; ⤸    &apos;</span><br><span class="line">4      382  T_WHITESPACE                  &apos;⤸        &apos;</span><br><span class="line">5      328  T_ECHO                        &apos;echo&apos;</span><br><span class="line">5      382  T_WHITESPACE                  &apos; &apos;</span><br><span class="line">5      322  T_ENCAPSED_AND_WHITESPACE     &apos;Hello &apos;</span><br><span class="line">5      320  T_VARIABLE                    &apos;$to&apos;</span><br><span class="line">5      382  T_WHITESPACE                  &apos;⤸    &apos;</span><br><span class="line">6      382  T_WHITESPACE                  &apos;⤸&apos;</span><br><span class="line">7      382  T_WHITESPACE                  &apos;⤸&apos;</span><br><span class="line">8      320  T_VARIABLE                    &apos;$greeter&apos;</span><br><span class="line">8      382  T_WHITESPACE                  &apos; &apos;</span><br><span class="line">8      382  T_WHITESPACE                  &apos; &apos;</span><br><span class="line">8      305  T_NEW                         &apos;new&apos;</span><br><span class="line">8      382  T_WHITESPACE                  &apos; &apos;</span><br><span class="line">8      319  T_STRING                      &apos;Greeting&apos;</span><br><span class="line">8      382  T_WHITESPACE                  &apos;⤸&apos;</span><br><span class="line">9      320  T_VARIABLE                    &apos;$greeter&apos;</span><br><span class="line">9      366  T_OBJECT_OPERATOR             &apos;-&gt;&apos;</span><br><span class="line">9      319  T_STRING                      &apos;sayHello&apos;</span><br><span class="line">9      323  T_CONSTANT_ENCAPSED_STRING    &apos;&quot;World&quot;&apos;</span><br><span class="line">9      382  T_WHITESPACE                  &apos;⤸&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;认识了那么多的ZEND_AST_XXX，他们是如何和Token、和PHP的关键字关联起来的呢？&lt;/p&gt;
&lt;p&gt;PHP的&lt;code&gt;token_get_all&lt;/code&gt;函数可以打印出PHP语法解析的结果，但是怎么拿来分析呢？&lt;/p&gt;
&lt;p&gt;在上一篇Bison的基础上，来看看Zend是怎么分析PHP语法的。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#zend%E7%9A%84bison%E6%96%87%E4%BB%B6&quot;&gt;Zend的Bison文件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#c-declarations&quot;&gt;C declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bison-declarations&quot;&gt;Bison declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#grammar-rules&quot;&gt;Grammar rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yyparse%E5%87%BD%E6%95%B0&quot;&gt;yyparse函数&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#lex%E7%9A%84token%E7%94%9F%E6%88%90&quot;&gt;Lex的Token生成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#token_get_all&quot;&gt;token_get_all&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Zend Engine" scheme="http://www.notee.cc/tags/Zend-Engine/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码的一生（五）YACC和AST</title>
    <link href="http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_5/"/>
    <id>http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_5/</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2020-09-10T09:30:26.045Z</updated>
    
    <content type="html"><![CDATA[<p><code>AST(Abstract Syntax Tree)</code>是Zend编译PHP代码的基础，那么<code>CG(ast)</code>究竟是怎么来的呢？</p><p>20世纪70年代的<code>YACC(Yet Another Compiler-Compiler)</code>和<code>Lex(A Lexical Analyzer Generator)</code>被<code>Zend Engine</code>所使用，<code>PHP</code>的语法分析也就站在了它的肩膀上。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#ast">AST</a></li><li><a href="#yacc">YACC</a><ul><li><a href="#bison">Bison</a></li></ul></li><li><a href="#lex">Lex</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><blockquote><p>代码是PHP7.1.16的官方release版本 <a href="https://github.com/php/php-src/tree/PHP-7.1.16" target="_blank" rel="noopener">下载</a></p></blockquote><p><a id="markdown-ast" name="ast"></a></p><h2 id="ast"><a class="markdownIt-Anchor" href="#ast"></a> AST</h2><p>暂且放下“<code>CG(ast)</code>是怎么来的”这个问题，先看一下这个AST究竟是个什么东西。</p><p><code>Zend/zend_ast.h:153</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_ast</span> &#123;</span></span><br><span class="line">    zend_ast_kind kind; <span class="comment">/* Type of the node (ZEND_AST_* enum constant) */</span></span><br><span class="line">    zend_ast_attr attr; <span class="comment">/* Additional attribute, use depending on node type */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> lineno;    <span class="comment">/* Line number */</span></span><br><span class="line">    zend_ast *child[<span class="number">1</span>]; <span class="comment">/* Array of children (using struct hack) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>zend_ast_kind</code>一个无符号短整型:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> zend_ast_kind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">uint16_t</span>;</span><br></pre></td></tr></table></figure><p><code>zend_ast_kind</code>刚好在内存上和所定义的<code>_zend_ast_kind</code>枚举类型长度相等，所以用<code>ast-&gt;kind</code>时就可以使用这些枚举常量了，如：<code>if (ast-&gt;kind != ZEND_AST_CLOSURE) {}</code>。</p><p><code>Zend/zend_ast.h:28</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_AST_SPECIAL_SHIFT      6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_AST_IS_LIST_SHIFT      7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_AST_NUM_CHILDREN_SHIFT 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> _zend_ast_kind &#123;</span><br><span class="line">    <span class="comment">/* special nodes */</span></span><br><span class="line">    ZEND_AST_ZVAL = <span class="number">1</span> &lt;&lt; ZEND_AST_SPECIAL_SHIFT,</span><br><span class="line">    ZEND_AST_ZNODE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* declaration nodes */</span></span><br><span class="line">    ZEND_AST_FUNC_DECL,</span><br><span class="line">    ZEND_AST_CLOSURE,</span><br><span class="line">    ZEND_AST_METHOD,</span><br><span class="line">    ZEND_AST_CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* list nodes */</span></span><br><span class="line">    ZEND_AST_ARG_LIST = <span class="number">1</span> &lt;&lt; ZEND_AST_IS_LIST_SHIFT,</span><br><span class="line">    ZEND_AST_ARRAY,</span><br><span class="line">    ZEND_AST_ENCAPS_LIST,</span><br><span class="line">    ZEND_AST_EXPR_LIST,</span><br><span class="line">    ZEND_AST_STMT_LIST,</span><br><span class="line">    ZEND_AST_IF,</span><br><span class="line">    ZEND_AST_SWITCH_LIST,</span><br><span class="line">    ZEND_AST_CATCH_LIST,</span><br><span class="line">    ZEND_AST_PARAM_LIST,</span><br><span class="line">    ZEND_AST_CLOSURE_USES,</span><br><span class="line">    ZEND_AST_PROP_DECL,</span><br><span class="line">    ZEND_AST_CONST_DECL,</span><br><span class="line">    ZEND_AST_CLASS_CONST_DECL,</span><br><span class="line">    ZEND_AST_NAME_LIST,</span><br><span class="line">    ZEND_AST_TRAIT_ADAPTATIONS,</span><br><span class="line">    ZEND_AST_USE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 0 child nodes */</span></span><br><span class="line">    ZEND_AST_MAGIC_CONST = <span class="number">0</span> &lt;&lt; ZEND_AST_NUM_CHILDREN_SHIFT,</span><br><span class="line">    ZEND_AST_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1 child node */</span></span><br><span class="line">    ZEND_AST_VAR = <span class="number">1</span> &lt;&lt; ZEND_AST_NUM_CHILDREN_SHIFT,</span><br><span class="line">    ZEND_AST_CONST,</span><br><span class="line">    ZEND_AST_UNPACK,</span><br><span class="line">    ZEND_AST_UNARY_PLUS,</span><br><span class="line">    ZEND_AST_UNARY_MINUS,</span><br><span class="line">    ZEND_AST_CAST,</span><br><span class="line">    ZEND_AST_EMPTY,</span><br><span class="line">    ZEND_AST_ISSET,</span><br><span class="line">    ZEND_AST_SILENCE,</span><br><span class="line">    ZEND_AST_SHELL_EXEC,</span><br><span class="line">    ZEND_AST_CLONE,</span><br><span class="line">    ZEND_AST_EXIT,</span><br><span class="line">    ZEND_AST_PRINT,</span><br><span class="line">    ZEND_AST_INCLUDE_OR_EVAL,</span><br><span class="line">    ZEND_AST_UNARY_OP,</span><br><span class="line">    ZEND_AST_PRE_INC,</span><br><span class="line">    ZEND_AST_PRE_DEC,</span><br><span class="line">    ZEND_AST_POST_INC,</span><br><span class="line">    ZEND_AST_POST_DEC,</span><br><span class="line">    ZEND_AST_YIELD_FROM,</span><br><span class="line"></span><br><span class="line">    ZEND_AST_GLOBAL,</span><br><span class="line">    ZEND_AST_UNSET,</span><br><span class="line">    ZEND_AST_RETURN,</span><br><span class="line">    ZEND_AST_LABEL,</span><br><span class="line">    ZEND_AST_REF,</span><br><span class="line">    ZEND_AST_HALT_COMPILER,</span><br><span class="line">    ZEND_AST_ECHO,</span><br><span class="line">    ZEND_AST_THROW,</span><br><span class="line">    ZEND_AST_GOTO,</span><br><span class="line">    ZEND_AST_BREAK,</span><br><span class="line">    ZEND_AST_CONTINUE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2 child nodes */</span></span><br><span class="line">    ZEND_AST_DIM = <span class="number">2</span> &lt;&lt; ZEND_AST_NUM_CHILDREN_SHIFT,</span><br><span class="line">    ZEND_AST_PROP,</span><br><span class="line">    ZEND_AST_STATIC_PROP,</span><br><span class="line">    ZEND_AST_CALL,</span><br><span class="line">    ZEND_AST_CLASS_CONST,</span><br><span class="line">    ZEND_AST_ASSIGN,</span><br><span class="line">    ZEND_AST_ASSIGN_REF,</span><br><span class="line">    ZEND_AST_ASSIGN_OP,</span><br><span class="line">    ZEND_AST_BINARY_OP,</span><br><span class="line">    ZEND_AST_GREATER,</span><br><span class="line">    ZEND_AST_GREATER_EQUAL,</span><br><span class="line">    ZEND_AST_AND,</span><br><span class="line">    ZEND_AST_OR,</span><br><span class="line">    ZEND_AST_ARRAY_ELEM,</span><br><span class="line">    ZEND_AST_NEW,</span><br><span class="line">    ZEND_AST_INSTANCEOF,</span><br><span class="line">    ZEND_AST_YIELD,</span><br><span class="line">    ZEND_AST_COALESCE,</span><br><span class="line"></span><br><span class="line">    ZEND_AST_STATIC,</span><br><span class="line">    ZEND_AST_WHILE,</span><br><span class="line">    ZEND_AST_DO_WHILE,</span><br><span class="line">    ZEND_AST_IF_ELEM,</span><br><span class="line">    ZEND_AST_SWITCH,</span><br><span class="line">    ZEND_AST_SWITCH_CASE,</span><br><span class="line">    ZEND_AST_DECLARE,</span><br><span class="line">    ZEND_AST_USE_TRAIT,</span><br><span class="line">    ZEND_AST_TRAIT_PRECEDENCE,</span><br><span class="line">    ZEND_AST_METHOD_REFERENCE,</span><br><span class="line">    ZEND_AST_NAMESPACE,</span><br><span class="line">    ZEND_AST_USE_ELEM,</span><br><span class="line">    ZEND_AST_TRAIT_ALIAS,</span><br><span class="line">    ZEND_AST_GROUP_USE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3 child nodes */</span></span><br><span class="line">    ZEND_AST_METHOD_CALL = <span class="number">3</span> &lt;&lt; ZEND_AST_NUM_CHILDREN_SHIFT,</span><br><span class="line">    ZEND_AST_STATIC_CALL,</span><br><span class="line">    ZEND_AST_CONDITIONAL,</span><br><span class="line"></span><br><span class="line">    ZEND_AST_TRY,</span><br><span class="line">    ZEND_AST_CATCH,</span><br><span class="line">    ZEND_AST_PARAM,</span><br><span class="line">    ZEND_AST_PROP_ELEM,</span><br><span class="line">    ZEND_AST_CONST_ELEM,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4 child nodes */</span></span><br><span class="line">    ZEND_AST_FOR = <span class="number">4</span> &lt;&lt; ZEND_AST_NUM_CHILDREN_SHIFT,</span><br><span class="line">    ZEND_AST_FOREACH,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>zend_compile</code>阶段就通过检测<code>ZEND_AST</code>的类型，然后调用相应的函数最终产生<code>zend_op</code>。</p><p>关于这个<code>CG(ast)</code>怎么来的，得再回来看<code>zend_compile</code>函数。<code>Zend/zend_language_scanner.c:578</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">sapi_module_struct *sapi_module = &amp;cli_sapi_modulestatic zend_op_array *zend_compile(<span class="keyword">int</span> type)</span><br><span class="line">&#123;</span><br><span class="line">    zend_op_array *op_array = <span class="literal">NULL</span>;</span><br><span class="line">    zend_bool original_in_compilation = CG(in_compilation);</span><br><span class="line"></span><br><span class="line">    CG(in_compilation) = <span class="number">1</span>;</span><br><span class="line">    CG(ast) = <span class="literal">NULL</span>;</span><br><span class="line">    CG(ast_arena) = zend_arena_create(<span class="number">1024</span> * <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!zendparse()) &#123;</span><br><span class="line">        <span class="keyword">int</span> last_lineno = CG(zend_lineno);</span><br><span class="line">        zend_file_context original_file_context;</span><br><span class="line">        zend_oparray_context original_oparray_context;</span><br><span class="line">        zend_op_array *original_active_op_array = CG(active_op_array);</span><br><span class="line"></span><br><span class="line">        op_array = emalloc(<span class="keyword">sizeof</span>(zend_op_array));</span><br><span class="line">        init_op_array(op_array, type, INITIAL_OP_ARRAY_SIZE);</span><br><span class="line">        CG(active_op_array) = op_array;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (zend_ast_process) &#123;</span><br><span class="line">            zend_ast_process(CG(ast));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zend_file_context_begin(&amp;original_file_context);</span><br><span class="line">        zend_oparray_context_begin(&amp;original_oparray_context);</span><br><span class="line">        zend_compile_top_stmt(CG(ast));</span><br><span class="line">        CG(zend_lineno) = last_lineno;</span><br><span class="line">        zend_emit_final_return(type == ZEND_USER_FUNCTION);</span><br><span class="line">        op_array-&gt;line_start = <span class="number">1</span>;</span><br><span class="line">        op_array-&gt;line_end = last_lineno;</span><br><span class="line">        pass_two(op_array);</span><br><span class="line">        zend_oparray_context_end(&amp;original_oparray_context);</span><br><span class="line">        zend_file_context_end(&amp;original_file_context);</span><br><span class="line"></span><br><span class="line">        CG(active_op_array) = original_active_op_array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zend_ast_destroy(CG(ast));</span><br><span class="line">    zend_arena_destroy(CG(ast_arena));</span><br><span class="line"></span><br><span class="line">    CG(in_compilation) = original_in_compilation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> op_array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CG(ast)</code>的赋值就发生在<code>zendparse</code>函数中，<code>Zend/zend_language_parser.c:63</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yyparse         zendparse</span></span><br></pre></td></tr></table></figure><p><code>Zend/zend_language_parser.c</code>这个文件非常难以阅读，其实它是由程序所生成的。这就是<code>YACC</code>的工作了。</p><p><a id="markdown-yacc" name="yacc"></a></p><h2 id="yacc"><a class="markdownIt-Anchor" href="#yacc"></a> YACC</h2><p>文档链接：<a href="http://dinosaur.compilertools.net/yacc" target="_blank" rel="noopener">Yacc Manual</a></p><blockquote><p>Computer program input generally has some structure; in fact, every computer program that does input can be thought of as defining an ``input language’’ which it accepts. An input language may be as complex as a programming language, or as simple as a sequence of numbers. Unfortunately, usual input facilities are limited, difficult to use, and often are lax about checking their inputs for validity.</p></blockquote><blockquote><p>Yacc provides a general tool for describing the input to a computer program. The Yacc user specifies the structures of his input, together with code to be invoked as each such structure is recognized. Yacc turns such a specification into a subroutine that handles the input process; frequently, it is convenient and appropriate to have most of the flow of control in the user’s application handled by this subroutine.</p></blockquote><p>简单的说，它是一个C语言的语法分析工具。它的结构是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declarations</span><br><span class="line">%%</span><br><span class="line">rules</span><br><span class="line">%%</span><br><span class="line">programs</span><br></pre></td></tr></table></figure><p>举个例子，文件看起来大概是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#  include  &lt;stdio.h&gt;</span><br><span class="line">#  include  &lt;ctype.h&gt;</span><br><span class="line"></span><br><span class="line">int  regs[26];</span><br><span class="line">int  base;</span><br><span class="line"></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%start  list</span><br><span class="line"></span><br><span class="line">%token  DIGIT  LETTER</span><br><span class="line"></span><br><span class="line">%left  &apos;|&apos;</span><br><span class="line">%left  &apos;&amp;&apos;</span><br><span class="line">%left  &apos;+&apos;  &apos;-&apos;</span><br><span class="line">%left  &apos;*&apos;  &apos;/&apos;  &apos;%&apos;</span><br><span class="line">%left  UMINUS      /*  supplies  precedence  for  unary  minus  */</span><br><span class="line"></span><br><span class="line">%%      /*  beginning  of  rules  section  */</span><br><span class="line"></span><br><span class="line">list :    /*  empty  */</span><br><span class="line">     |    list  stat  &apos;\n&apos;</span><br><span class="line">     |    list  error  &apos;\n&apos;</span><br><span class="line">               &#123;    yyerrok;  &#125;</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line">stat :    expr</span><br><span class="line">               &#123;    printf( &quot;%d\n&quot;, $1 );  &#125;</span><br><span class="line">     |    LETTER  &apos;=&apos;  expr</span><br><span class="line">               &#123;    regs[$1]  =  $3;  &#125;</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">expr :    &apos;(&apos;  expr  &apos;)&apos;</span><br><span class="line">               &#123;    $$  =  $2;  &#125;</span><br><span class="line">     |    expr  &apos;+&apos;  expr</span><br><span class="line">               &#123;    $$  =  $1  +  $3;  &#125;</span><br><span class="line">     |    expr  &apos;-&apos;  expr</span><br><span class="line">               &#123;    $$  =  $1  -  $3;  &#125;</span><br><span class="line">     |    expr  &apos;*&apos;  expr</span><br><span class="line">               &#123;    $$  =  $1  *  $3;  &#125;</span><br><span class="line">     |    expr  &apos;/&apos;  expr</span><br><span class="line">               &#123;    $$  =  $1  /  $3;  &#125;</span><br><span class="line">     |    expr  &apos;%&apos;  expr</span><br><span class="line">               &#123;    $$  =  $1  %  $3;  &#125;</span><br><span class="line">     |    expr  &apos;&amp;&apos;  expr</span><br><span class="line">               &#123;    $$  =  $1  &amp;  $3;  &#125;</span><br><span class="line">     |    expr  &apos;|&apos;  expr</span><br><span class="line">               &#123;    $$  =  $1  |  $3;  &#125;</span><br><span class="line">     |    &apos;-&apos;  expr        %prec  UMINUS</span><br><span class="line">               &#123;    $$  =  -  $2;  &#125;</span><br><span class="line">     |    LETTER</span><br><span class="line">               &#123;    $$  =  regs[$1];  &#125;</span><br><span class="line">     |    number</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line">number    :    DIGIT</span><br><span class="line">               &#123;    $$ = $1;    base  =  ($1==0)  ?  8  :  10;  &#125;</span><br><span class="line">     |    number  DIGIT</span><br><span class="line">               &#123;    $$  =  base * $1  +  $2;  &#125;</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line">%%      /*  start  of  programs  */</span><br><span class="line"></span><br><span class="line">yylex() &#123;      /*  lexical  analysis  routine  */</span><br><span class="line">              /*  returns  LETTER  for  a  lower  case  letter,  yylval = 0  through  25  */</span><br><span class="line">              /*  return  DIGIT  for  a  digit,  yylval = 0  through  9  */</span><br><span class="line">              /*  all  other  characters  are  returned  immediately  */</span><br><span class="line"></span><br><span class="line">     int  c;</span><br><span class="line"></span><br><span class="line">     while(  (c=getchar())  ==  &apos; &apos;  )  &#123;/*  skip  blanks  */  &#125;</span><br><span class="line"></span><br><span class="line">     /*  c  is  now  nonblank  */</span><br><span class="line"></span><br><span class="line">     if(  islower(  c  )  )  &#123;</span><br><span class="line">          yylval  =  c  -  &apos;a&apos;;</span><br><span class="line">          return  (  LETTER  );</span><br><span class="line">          &#125;</span><br><span class="line">     if(  isdigit(  c  )  )  &#123;</span><br><span class="line">          yylval  =  c  -  &apos;0&apos;;</span><br><span class="line">          return(  DIGIT  );</span><br><span class="line">          &#125;</span><br><span class="line">     return(  c  );</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><code>Zend/zend_language_parser.y</code>、<code>Zend/zend_ini_parser.y</code>都是用的<code>YACC</code>来解析的。</p><p><code>make</code>工具对<code>YACC</code>文件提供了支持。<a href="https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html#Catalogue-of-Rules" target="_blank" rel="noopener">Catalogue of Built-In Rules</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yacc for C programs</span><br><span class="line">    n.c is made automatically from n.y by </span><br><span class="line">    running Yacc with the recipe ‘$(YACC) $(YFLAGS)’</span><br></pre></td></tr></table></figure><p>然后在<code>Makefile</code>里写进去就行了。比如我的<code>Makefile:539</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/github/php<span class="number">-7.1</span><span class="number">.16</span>/Zend/zend_language_scanner.c: /github/php<span class="number">-7.1</span><span class="number">.16</span>/Zend/zend_language_scanner.l</span><br><span class="line">    @(cd $(top_srcdir); $(RE2C) $(RE2C_FLAGS) --no-generation-date --<span class="keyword">case</span>-inverted -cbdFt Zend/zend_language_scanner_defs.h -oZend/zend_language_scanner.c Zend/zend_language_scanner.l)</span><br></pre></td></tr></table></figure><p>更多的细节，这里就先不探究了。</p><p><a id="markdown-bison" name="bison"></a></p><h3 id="bison"><a class="markdownIt-Anchor" href="#bison"></a> Bison</h3><p>顺便提一句，YACC有很多版本，<a href="https://en.wikipedia.org/wiki/GNU_bison" target="_blank" rel="noopener">参考wiki</a>，Zend所采用的是<a href="http://dinosaur.compilertools.net/#bison" target="_blank" rel="noopener">GNU Bison</a>这个版本。除此之外，MySQL、Go、Ruby和Bash等也都采用的Bison做语法解析。</p><p><a id="markdown-lex" name="lex"></a></p><h2 id="lex"><a class="markdownIt-Anchor" href="#lex"></a> Lex</h2><p>Lex和Yacc是一对工具，Yacc每当解析句法需要一个Token时，它便向Lex要，然后分析句法，执行相应的动作。</p><figure class="highlight plain"><figcaption><span>&#123;cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">           lexical        grammar</span><br><span class="line">            rules          rules</span><br><span class="line">              |              |</span><br><span class="line">              v              v</span><br><span class="line">         +---------+    +---------+</span><br><span class="line">         |   Lex   |    |  Yacc   |</span><br><span class="line">         +---------+    +---------+</span><br><span class="line">              |              |</span><br><span class="line">              v              v</span><br><span class="line">         +---------+    +---------+</span><br><span class="line">Input -&gt; |  yylex  | -&gt; | yyparse | -&gt; Parsed input</span><br><span class="line">         +---------+    +---------+</span><br><span class="line"></span><br><span class="line">             /--------------\</span><br><span class="line">             | Lex with Yacc|</span><br><span class="line">             \--------------/</span><br></pre></td></tr></table></figure><p>Zend采用的是<a href="http://dinosaur.compilertools.net/#flex" target="_blank" rel="noopener">Flex</a>版本的Lex。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;AST(Abstract Syntax Tree)&lt;/code&gt;是Zend编译PHP代码的基础，那么&lt;code&gt;CG(ast)&lt;/code&gt;究竟是怎么来的呢？&lt;/p&gt;
&lt;p&gt;20世纪70年代的&lt;code&gt;YACC(Yet Another Compiler-Compiler)&lt;/code&gt;和&lt;code&gt;Lex(A Lexical Analyzer Generator)&lt;/code&gt;被&lt;code&gt;Zend Engine&lt;/code&gt;所使用，&lt;code&gt;PHP&lt;/code&gt;的语法分析也就站在了它的肩膀上。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ast&quot;&gt;AST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yacc&quot;&gt;YACC&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#bison&quot;&gt;Bison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lex&quot;&gt;Lex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Zend Engine" scheme="http://www.notee.cc/tags/Zend-Engine/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码的一生（四）zend_execute</title>
    <link href="http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_4/"/>
    <id>http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_4/</id>
    <published>2018-08-15T16:00:00.000Z</published>
    <updated>2020-09-10T09:30:26.044Z</updated>
    
    <content type="html"><![CDATA[<p>有了<code>op_array</code>，接下来就是zend引擎的解释执行了。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#%E7%A8%8B%E5%BA%8F%E6%B5%81">程序流</a></li><li><a href="#zend_execute_data">zend_execute_data</a></li><li><a href="#zend_vm_stack_push_call_frame">zend_vm_stack_push_call_frame</a></li><li><a href="#i_init_execute_data">i_init_execute_data</a></li><li><a href="#zend_execute_ex">zend_execute_ex</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><blockquote><p>代码是PHP7.1.16的官方release版本 <a href="https://github.com/php/php-src/tree/PHP-7.1.16" target="_blank" rel="noopener">下载</a></p></blockquote><p><a id="markdown-程序流" name="程序流"></a></p><h2 id="程序流"><a class="markdownIt-Anchor" href="#程序流"></a> 程序流</h2><p><code>Zend/zend_vm_execute.h:457</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">zend_execute</span><span class="params">(zend_op_array *op_array, zval *return_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_execute_data *execute_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EG(exception) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execute_data = zend_vm_stack_push_call_frame(ZEND_CALL_TOP_CODE | ZEND_CALL_HAS_SYMBOL_TABLE,</span><br><span class="line">        (zend_function*)op_array, <span class="number">0</span>, zend_get_called_scope(EG(current_execute_data)), zend_get_this_object(EG(current_execute_data)));</span><br><span class="line">    <span class="keyword">if</span> (EG(current_execute_data)) &#123;</span><br><span class="line">        execute_data-&gt;symbol_table = zend_rebuild_symbol_table();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        execute_data-&gt;symbol_table = &amp;EG(symbol_table);</span><br><span class="line">    &#125;</span><br><span class="line">    EX(prev_execute_data) = EG(current_execute_data);</span><br><span class="line">    i_init_execute_data(execute_data, op_array, return_value);</span><br><span class="line">    zend_execute_ex(execute_data);</span><br><span class="line">    zend_vm_stack_free_call_frame(execute_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-zend_execute_data" name="zend_execute_data"></a></p><h2 id="zend_execute_data"><a class="markdownIt-Anchor" href="#zend_execute_data"></a> zend_execute_data</h2><p>在看具体函数之前，先了解一下<code>zend_execute_data</code>。</p><p><code>Zend/zend_types.h:82</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_execute_data</span>    <span class="title">zend_execute_data</span>;</span></span><br></pre></td></tr></table></figure><p><code>Zend/zend_compile.h:449</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_execute_data</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> zend_op       *opline;           <span class="comment">/* executed opline                */</span></span><br><span class="line">    zend_execute_data   *call;             <span class="comment">/* current call                   */</span></span><br><span class="line">    zval                *return_value;</span><br><span class="line">    zend_function       *func;             <span class="comment">/* executed function              */</span></span><br><span class="line">    zval                 This;             <span class="comment">/* this + call_info + num_args    */</span></span><br><span class="line">    zend_execute_data   *prev_execute_data;</span><br><span class="line">    zend_array          *symbol_table;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZEND_EX_USE_RUN_TIME_CACHE</span></span><br><span class="line">    <span class="keyword">void</span>               **run_time_cache;   <span class="comment">/* cache op_array-&gt;run_time_cache */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZEND_EX_USE_LITERALS</span></span><br><span class="line">    zval                *literals;         <span class="comment">/* cache op_array-&gt;literals       */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>opline</code>：执行的opline。<br><code>call</code>：此次执行时的调用信息，指向<code>zend_execute_data</code>本身。<br><code>return_value</code>：调用的返回值。<br><code>func</code>：执行的函数。<br><code>This</code>：此次执行的<code>zend_execute_data</code>。<br><code>prev_execute_data</code>：上一次执行的信息。</p><p><a id="markdown-zend_vm_stack_push_call_frame" name="zend_vm_stack_push_call_frame"></a></p><h2 id="zend_vm_stack_push_call_frame"><a class="markdownIt-Anchor" href="#zend_vm_stack_push_call_frame"></a> zend_vm_stack_push_call_frame</h2><p><code>Zend/zend_execute.h:207</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zend_always_inline zend_execute_data *<span class="title">zend_vm_stack_push_call_frame</span><span class="params">(<span class="keyword">uint32_t</span> call_info, zend_function *func, <span class="keyword">uint32_t</span> num_args, zend_class_entry *called_scope, zend_object *object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> used_stack = zend_vm_calc_used_stack(num_args, func);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> zend_vm_stack_push_call_frame_ex(used_stack, call_info,</span><br><span class="line">        func, num_args, called_scope, object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>zend_vm_calc_used_stack</code>用来计算栈顶位置，提供给<code>zend_vm_stack_push_call_frame_ex</code>。后者构造一个栈顶的<code>zend_execute_data</code>，保存到<code>call</code>里面，然后为其初始化并返回。</p><p><code>Zend/zend_execute.h:197</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zend_always_inline uint32_t <span class="title">zend_vm_calc_used_stack</span><span class="params">(<span class="keyword">uint32_t</span> num_args, zend_function *func)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> used_stack = ZEND_CALL_FRAME_SLOT + num_args;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EXPECTED(ZEND_USER_CODE(func-&gt;type))) &#123;</span><br><span class="line">        used_stack += func-&gt;op_array.last_var + func-&gt;op_array.T - MIN(func-&gt;op_array.num_args, num_args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> used_stack * <span class="keyword">sizeof</span>(zval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Zend/zend_execute.h:179</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zend_always_inline zend_execute_data *<span class="title">zend_vm_stack_push_call_frame_ex</span><span class="params">(<span class="keyword">uint32_t</span> used_stack, <span class="keyword">uint32_t</span> call_info, zend_function *func, <span class="keyword">uint32_t</span> num_args, zend_class_entry *called_scope, zend_object *object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_execute_data *call = (zend_execute_data*)EG(vm_stack_top);</span><br><span class="line"></span><br><span class="line">    ZEND_ASSERT_VM_STACK_GLOBAL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (UNEXPECTED(used_stack &gt; (<span class="keyword">size_t</span>)(((<span class="keyword">char</span>*)EG(vm_stack_end)) - (<span class="keyword">char</span>*)call))) &#123;</span><br><span class="line">        call = (zend_execute_data*)zend_vm_stack_extend(used_stack);</span><br><span class="line">        ZEND_ASSERT_VM_STACK_GLOBAL;</span><br><span class="line">        zend_vm_init_call_frame(call, call_info | ZEND_CALL_ALLOCATED, func, num_args, called_scope, object);</span><br><span class="line">        <span class="keyword">return</span> call;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        EG(vm_stack_top) = (zval*)((<span class="keyword">char</span>*)call + used_stack);</span><br><span class="line">        zend_vm_init_call_frame(call, call_info, func, num_args, called_scope, object);</span><br><span class="line">        <span class="keyword">return</span> call;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Zend/zend_execute.h:166</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zend_always_inline <span class="keyword">void</span> <span class="title">zend_vm_init_call_frame</span><span class="params">(zend_execute_data *call, <span class="keyword">uint32_t</span> call_info, zend_function *func, <span class="keyword">uint32_t</span> num_args, zend_class_entry *called_scope, zend_object *object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    call-&gt;func = func;</span><br><span class="line">    <span class="keyword">if</span> (object) &#123;</span><br><span class="line">        Z_OBJ(call-&gt;This) = object;</span><br><span class="line">        ZEND_SET_CALL_INFO(call, <span class="number">1</span>, call_info);</span><br><span class="line">    &#125; <span class="keyword">else</span> d&#123;</span><br><span class="line">        Z_CE(call-&gt;This) = called_scope;</span><br><span class="line">        ZEND_SET_CALL_INFO(call, <span class="number">0</span>, call_info);</span><br><span class="line">    &#125;</span><br><span class="line">    ZEND_CALL_NUM_ARGS(call) = num_args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Zend/zend_compile.h:489</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_SET_CALL_INFO(call, object, info) do &#123; \</span></span><br><span class="line">        Z_TYPE_INFO((call)-&gt;This) = ((object) ? IS_OBJECT_EX : IS_UNDEF) | ((info) &lt;&lt; ZEND_CALL_INFO_SHIFT); \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>Zend/zend_compile.h:501</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_CALL_NUM_ARGS(call) \</span></span><br><span class="line">    (call)-&gt;This.u2.num_args</span><br></pre></td></tr></table></figure><p><a id="markdown-i_init_execute_data" name="i_init_execute_data"></a></p><h2 id="i_init_execute_data"><a class="markdownIt-Anchor" href="#i_init_execute_data"></a> i_init_execute_data</h2><p>建立<code>op_array</code>与<code>execute_data</code>之间的联系，并将<code>execute_data</code>赋值给<code>current_execute_data</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EX(element) ((execute_data)-&gt;element)</span></span><br></pre></td></tr></table></figure><p><code>Zend/zend_execute.c:2208</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zend_always_inline <span class="keyword">void</span> <span class="title">i_init_execute_data</span><span class="params">(zend_execute_data *execute_data, zend_op_array *op_array, zval *return_value)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ZEND_ASSERT(EX(func) == (zend_function*)op_array);</span><br><span class="line"></span><br><span class="line">    EX(opline) = op_array-&gt;opcodes;</span><br><span class="line">    EX(call) = <span class="literal">NULL</span>;</span><br><span class="line">    EX(return_value) = return_value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EX_CALL_INFO() &amp; ZEND_CALL_HAS_SYMBOL_TABLE) &#123;</span><br><span class="line">        zend_attach_symbol_table(execute_data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> first_extra_arg, num_args;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Handle arguments */</span></span><br><span class="line">        first_extra_arg = op_array-&gt;num_args;</span><br><span class="line">        num_args = EX_NUM_ARGS();</span><br><span class="line">        <span class="keyword">if</span> (UNEXPECTED(num_args &gt; first_extra_arg)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EXPECTED(!(op_array-&gt;fn_flags &amp; ZEND_ACC_CALL_VIA_TRAMPOLINE))) &#123;</span><br><span class="line">                zval *end, *src, *dst;</span><br><span class="line">                <span class="keyword">uint32_t</span> type_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (EXPECTED((op_array-&gt;fn_flags &amp; ZEND_ACC_HAS_TYPE_HINTS) == <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* Skip useless ZEND_RECV and ZEND_RECV_INIT opcodes */</span></span><br><span class="line">                    EX(opline) += first_extra_arg;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* move extra args into separate array after all CV and TMP vars */</span></span><br><span class="line">                end = EX_VAR_NUM(first_extra_arg - <span class="number">1</span>);</span><br><span class="line">                src = end + (num_args - first_extra_arg);</span><br><span class="line">                dst = src + (op_array-&gt;last_var + op_array-&gt;T - first_extra_arg);</span><br><span class="line">                <span class="keyword">if</span> (EXPECTED(src != dst)) &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        type_flags |= Z_TYPE_INFO_P(src);</span><br><span class="line">                        ZVAL_COPY_VALUE(dst, src);</span><br><span class="line">                        ZVAL_UNDEF(src);</span><br><span class="line">                        src--;</span><br><span class="line">                        dst--;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (src != end);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        type_flags |= Z_TYPE_INFO_P(src);</span><br><span class="line">                        src--;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (src != end);</span><br><span class="line">                &#125;</span><br><span class="line">                ZEND_ADD_CALL_FLAG(execute_data, ((type_flags &gt;&gt; Z_TYPE_FLAGS_SHIFT) &amp; IS_TYPE_REFCOUNTED));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EXPECTED((op_array-&gt;fn_flags &amp; ZEND_ACC_HAS_TYPE_HINTS) == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">/* Skip useless ZEND_RECV and ZEND_RECV_INIT opcodes */</span></span><br><span class="line">            EX(opline) += num_args;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Initialize CV variables (skip arguments) */</span></span><br><span class="line">        <span class="keyword">if</span> (EXPECTED((<span class="keyword">int</span>)num_args &lt; op_array-&gt;last_var)) &#123;</span><br><span class="line">            zval *var = EX_VAR_NUM(num_args);</span><br><span class="line">            zval *end = EX_VAR_NUM(op_array-&gt;last_var);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                ZVAL_UNDEF(var);</span><br><span class="line">                var++;</span><br><span class="line">            &#125; <span class="keyword">while</span> (var != end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!op_array-&gt;run_time_cache) &#123;</span><br><span class="line">        <span class="keyword">if</span> (op_array-&gt;function_name) &#123;</span><br><span class="line">            op_array-&gt;run_time_cache = zend_arena_alloc(&amp;CG(arena), op_array-&gt;cache_size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            op_array-&gt;run_time_cache = emalloc(op_array-&gt;cache_size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(op_array-&gt;run_time_cache, <span class="number">0</span>, op_array-&gt;cache_size);</span><br><span class="line">    &#125;</span><br><span class="line">    EX_LOAD_RUN_TIME_CACHE(op_array);</span><br><span class="line">    EX_LOAD_LITERALS(op_array);</span><br><span class="line"></span><br><span class="line">    EG(current_execute_data) = execute_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>zend_attach_symbol_table</code>主要是绑定全局变量hash表，<code>Zend/zend_execute_API.c:1593</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">zend_attach_symbol_table</span><span class="params">(zend_execute_data *execute_data)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_op_array *op_array = &amp;execute_data-&gt;func-&gt;op_array;</span><br><span class="line">    HashTable *ht = execute_data-&gt;symbol_table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy real values from symbol table into CV slots and create</span></span><br><span class="line"><span class="comment">       INDIRECT references to CV in symbol table  */</span></span><br><span class="line">    <span class="keyword">if</span> (EXPECTED(op_array-&gt;last_var)) &#123;</span><br><span class="line">        zend_string **str = op_array-&gt;vars;</span><br><span class="line">        zend_string **end = str + op_array-&gt;last_var;</span><br><span class="line">        zval *var = EX_VAR_NUM(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            zval *zv = zend_hash_find(ht, *str);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (zv) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</span><br><span class="line">                    zval *val = Z_INDIRECT_P(zv);</span><br><span class="line"></span><br><span class="line">                    ZVAL_COPY_VALUE(var, val);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ZVAL_COPY_VALUE(var, zv);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ZVAL_UNDEF(var);</span><br><span class="line">                zv = zend_hash_add_new(ht, *str, var);</span><br><span class="line">            &#125;</span><br><span class="line">            ZVAL_INDIRECT(zv, var);</span><br><span class="line">            str++;</span><br><span class="line">            var++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (str != end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-zend_execute_ex" name="zend_execute_ex"></a></p><h2 id="zend_execute_ex"><a class="markdownIt-Anchor" href="#zend_execute_ex"></a> zend_execute_ex</h2><p><code>Zend/zend_execute_API.c:45</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEND_API <span class="title">void</span> <span class="params">(*zend_execute_ex)</span><span class="params">(zend_execute_data *execute_data)</span></span>;</span><br></pre></td></tr></table></figure><p><code>zend_execute_ex</code>是一个函数指针，<code>Zend/zend.c:717</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_execute_ex = execute_ex;</span><br></pre></td></tr></table></figure><p>走到这一步，<code>opcodes</code>运行所需要的信息都已经处理完毕了，接下来就是按照逻辑调用他们的处理函数了。</p><p><code>Zend/zend_vm_execute.h:406</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">execute_ex</span><span class="params">(zend_execute_data *ex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DCL_OPLINE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ZEND_VM_IP_GLOBAL_REG</span></span><br><span class="line">    <span class="keyword">const</span> zend_op *orig_opline = opline;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ZEND_VM_FP_GLOBAL_REG</span></span><br><span class="line">    zend_execute_data *orig_execute_data = execute_data;</span><br><span class="line">    execute_data = ex;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    zend_execute_data *execute_data = ex;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    LOAD_OPLINE();</span><br><span class="line">    ZEND_VM_LOOP_INTERRUPT_CHECK();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(ZEND_VM_FP_GLOBAL_REG) || !defined(ZEND_VM_IP_GLOBAL_REG)</span></span><br><span class="line">            <span class="keyword">int</span> ret;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ZEND_VM_FP_GLOBAL_REG) &amp;&amp; defined(ZEND_VM_IP_GLOBAL_REG)</span></span><br><span class="line">        ((<span class="keyword">opcode_handler_t</span>)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">        <span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="keyword">if</span> (UNEXPECTED((ret = ((<span class="keyword">opcode_handler_t</span>)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU)) != <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ZEND_VM_FP_GLOBAL_REG</span></span><br><span class="line">            execute_data = orig_execute_data;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> ZEND_VM_IP_GLOBAL_REG</span></span><br><span class="line">            opline = orig_opline;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">if</span> (EXPECTED(ret &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">                execute_data = EG(current_execute_data);</span><br><span class="line">                ZEND_VM_LOOP_INTERRUPT_CHECK();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"># ifdef ZEND_VM_IP_GLOBAL_REG</span><br><span class="line">                opline = orig_opline;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    zend_error_noreturn(E_CORE_ERROR, <span class="string">"Arrived at end of main loop which shouldn't happen"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个while循环就是在执行opcode了，整理一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (UNEXPECTED((ret = ((<span class="keyword">opcode_handler_t</span>)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU)) != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (EXPECTED(ret &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            execute_data = EG(current_execute_data);</span><br><span class="line">            ZEND_VM_LOOP_INTERRUPT_CHECK();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要看这句<code>(ret = ((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU)) != 0)</code></p><p><code>ZEND_OPCODE_HANDLER_ARGS_PASSTHRU</code>是<code>execute_data</code>，<code>Zend/zend_vm_execute.h:343</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ZEND_OPCODE_HANDLER_ARGS_PASSTHRU execute_data</span></span><br></pre></td></tr></table></figure><p><code>OPLINE</code>这个宏是取当前的opline，<code>Zend/zend_vm_execute.h:380</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> OPLINE EX(opline)</span></span><br></pre></td></tr></table></figure><p>而opline是zend_op结构体，在之前的<code>i_init_execute_data</code>中开头有这么一行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EX(opline) = op_array-&gt;opcodes;</span><br></pre></td></tr></table></figure><p>所以这块循环就是不停的调用当前<code>opline</code>的handler函数，检查返回值，然后<code>execute_data = EG(current_execute_data)</code>，检查中断，然后继续下一个循环。</p><p><code>opline</code>指针的指向是如何运作的？其实在每一个handler函数中，会结合自身的数据结构，通过<code>ZEND_VM_SET_OPCODE</code>这么一个宏或者其他的方式，来控制<code>opline</code>向前推进。</p><p>参考这篇文章：<a href="http://www.php-internals.com/book/?p=chapt02/02-03-03-from-opcode-to-handler#%E5%91%BD%E5%90%8D%E6%9F%A5%E6%89%BE%E6%B3%95" target="_blank" rel="noopener">opcode处理函数查找</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有了&lt;code&gt;op_array&lt;/code&gt;，接下来就是zend引擎的解释执行了。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%A8%8B%E5%BA%8F%E6%B5%81&quot;&gt;程序流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zend_execute_data&quot;&gt;zend_execute_data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zend_vm_stack_push_call_frame&quot;&gt;zend_vm_stack_push_call_frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#i_init_execute_data&quot;&gt;i_init_execute_data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zend_execute_ex&quot;&gt;zend_execute_ex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.notee.cc/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Zend Engine" scheme="http://www.notee.cc/tags/Zend-Engine/"/>
    
  </entry>
  
  <entry>
    <title>Hi from p5.js</title>
    <link href="http://www.notee.cc/JavaScript/p5_hi/"/>
    <id>http://www.notee.cc/JavaScript/p5_hi/</id>
    <published>2018-08-10T16:00:00.000Z</published>
    <updated>2020-09-10T09:30:26.040Z</updated>
    
    <content type="html"><![CDATA[<div id="p5Container" style="width: 100%;overflow: hidden;"><style type="text/css">.p5Canvas{margin: 0 auto;display: block !important;}</style><script src="https://cdn.jsdelivr.net/npm/p5@0.7.1/lib/p5.min.js"></script></div><script>function sketch($) {var font;var vehicles = [];$.preload = function () {  font = $.loadFont('/fonts/AvenirNextLTPro-Demi.otf');}$.setup = function () {  var points = font.textToPoints('Hi', 40, 220, 200, {    sampleFactor: 0.15  });  for (var i = 0; i < points.length; i++) {    var pt = points[i];    var vehicle = new Vehicle(pt.x, pt.y);    vehicles.push(vehicle);  }}$.draw = function () {  $.createCanvas(280, 300)  for (var i = 0; i < vehicles.length; i++) {    var v = vehicles[i];    v.behaviors();    v.update();    v.show();  }}function Vehicle(x, y) {  this.pos = $.createVector($.random($.width), $.random($.height));  this.target = $.createVector(x, y);  this.vel = p5.Vector.random2D();  this.acc = $.createVector();  this.color = [$.random(255), $.random(255), $.random(255)];  this.r = 8;  this.maxspeed = 10;  this.maxforce = 1;}Vehicle.prototype.behaviors = function() {  var arrive = this.arrive(this.target);  var mouse = $.createVector($.mouseX, $.mouseY);  var flee = this.flee(mouse);  arrive.mult(1);  flee.mult(5);  this.applyForce(arrive);  this.applyForce(flee);}Vehicle.prototype.applyForce = function(f) {  this.acc.add(f);}Vehicle.prototype.update = function() {  this.pos.add(this.vel);  this.vel.add(this.acc);  this.acc.mult(0);}Vehicle.prototype.show = function() {  $.stroke(this.color);  $.strokeWeight(this.r);  $.point(this.pos.x, this.pos.y);}Vehicle.prototype.arrive = function(target) {  var desired = p5.Vector.sub(target, this.pos);  var d = desired.mag();  var speed = this.maxspeed;  if (d < 100) {    speed = $.map(d, 0, 100, 0, this.maxspeed);  }  desired.setMag(speed);  var steer = p5.Vector.sub(desired, this.vel);  steer.limit(this.maxforce);  return steer;}Vehicle.prototype.flee = function(target) {  var desired = p5.Vector.sub(target, this.pos);  var d = desired.mag();  if (d < 50) {    desired.setMag(this.maxspeed);    desired.mult(-1);    var steer = p5.Vector.sub(desired, this.vel);    steer.limit(this.maxforce);    return steer;  } else {    return $.createVector(0, 0);  }}};new p5(sketch, 'p5Container');</script><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script type="text/javascript">(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerHTML=l;e.href=l})()</script>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;p5Container&quot; style=&quot;width: 100%;overflow: hidden;&quot;&gt;&lt;style type=&quot;text/css&quot;&gt;.p5Canvas{margin: 0 auto;display: block !important;}&lt;/style&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/p5@0.7.1/lib/p5.min.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;
&lt;script&gt;

function sketch($) {
	var font;
	var vehicles = [];

	$.preload = function () {
	  font = $.loadFont(&#39;/fonts/AvenirNextLTPro-Demi.otf&#39;);
	}

	$.setup = function () {
	  var points = font.textToPoints(&#39;Hi&#39;, 40, 220, 200, {
	    sampleFactor: 0.15
	  });

	  for (var i = 0; i &lt; points.length; i++) {
	    var pt = points[i];
	    var vehicle = new Vehicle(pt.x, pt.y);
	    vehicles.push(vehicle);
	  }
	}

	$.draw = function () {
	  $.createCanvas(280, 300)
	  for (var i = 0; i &lt; vehicles.length; i++) {
	    var v = vehicles[i];
	    v.behaviors();
	    v.update();
	    v.show();
	  }
	}

function Vehicle(x, y) {
  this.pos = $.createVector($.random($.width), $.random($.height));
  this.target = $.createVector(x, y);
  this.vel = p5.Vector.random2D();
  this.acc = $.createVector();
  this.color = [$.random(255), $.random(255), $.random(255)];
  this.r = 8;
  this.maxspeed = 10;
  this.maxforce = 1;
}

Vehicle.prototype.behaviors = function() {
  var arrive = this.arrive(this.target);
  var mouse = $.createVector($.mouseX, $.mouseY);
  var flee = this.flee(mouse);

  arrive.mult(1);
  flee.mult(5);

  this.applyForce(arrive);
  this.applyForce(flee);
}

Vehicle.prototype.applyForce = function(f) {
  this.acc.add(f);
}

Vehicle.prototype.update = function() {
  this.pos.add(this.vel);
  this.vel.add(this.acc);
  this.acc.mult(0);
}

Vehicle.prototype.show = function() {
  $.stroke(this.color);
  $.strokeWeight(this.r);
  $.point(this.pos.x, this.pos.y);
}


Vehicle.prototype.arrive = function(target) {
  var desired = p5.Vector.sub(target, this.pos);
  var d = desired.mag();
  var speed = this.maxspeed;
  if (d &lt; 100) {
    speed = $.map(d, 0, 100, 0, this.maxspeed);
  }
  desired.setMag(speed);
  var steer = p5.Vector.sub(desired, this.vel);
  steer.limit(this.maxforce);
  return steer;
}

Vehicle.prototype.flee = function(target) {
  var desired = p5.Vector.sub(target, this.pos);
  var d = desired.mag();
  if (d &lt; 50) {
    desired.setMag(this.maxspeed);
    desired.mult(-1);
    var steer = p5.Vector.sub(desired, this.vel);
    steer.limit(this.maxforce);
    return steer;
  } else {
    return $.createVector(0, 0);
  }
}

};


new p5(sketch, &#39;p5Container&#39;);

&lt;/script&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.notee.cc/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.notee.cc/tags/JavaScript/"/>
    
      <category term="p5.js" scheme="http://www.notee.cc/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码的一生（三）zend_compile</title>
    <link href="http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_3/"/>
    <id>http://www.notee.cc/PHP/engine_general_lifetime_of_php_code_3/</id>
    <published>2018-08-03T16:00:00.000Z</published>
    <updated>2020-09-10T09:30:26.044Z</updated>
    
    <content type="html"><![CDATA[<p>PHP代码被读取后，来到了<code>zend_complie</code>阶段。该阶段主要任务是解析语法，最终产生一个<code>op_array</code>，可通过<code>CG(active_op_array)</code>访问。</p><p>目录：</p><!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --><ul><li><a href="#%E7%A8%8B%E5%BA%8F%E6%B5%81">程序流</a></li><li><a href="#%E9%80%92%E5%BD%92ast%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%94%9F%E6%88%90op_array">递归AST抽象语法树，生成op_array</a></li><li><a href="#%E4%B8%BAopline%E8%AE%BE%E7%BD%AEhandlercompile-time%E5%88%87%E6%8D%A2%E5%88%B0run-time">为opline设置handler，compile-time切换到run-time</a></li></ul><!-- /TOC --><a id="more"></a><blockquote><p>转载请注明出处：<br><a id="jrztaa5p">www.notee.cc</a></p></blockquote><script>(function(){e=document.getElementById('jrztaa5p');l=window.location.href.split('?')[0];e.innerhtml=l;e.text=l;e.href=l})()</script><link href="https://cdn.bootcss.com/KaTeX/0.10.0/katex.min.css" rel="stylesheet"><hr><blockquote><p>代码是PHP7.1.16的官方release版本 <a href="https://github.com/php/php-src/tree/PHP-7.1.16" target="_blank" rel="noopener">下载</a></p></blockquote><p><a id="markdown-程序流" name="程序流"></a></p><h2 id="程序流"><a class="markdownIt-Anchor" href="#程序流"></a> 程序流</h2><p><code>Zend/zend_language_scanner.c:578</code>定义了<code>zend_compile</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">sapi_module_struct *sapi_module = &amp;cli_sapi_modulestatic zend_op_array *zend_compile(<span class="keyword">int</span> type)</span><br><span class="line">&#123;</span><br><span class="line">    zend_op_array *op_array = <span class="literal">NULL</span>;</span><br><span class="line">    zend_bool original_in_compilation = CG(in_compilation);</span><br><span class="line"></span><br><span class="line">    CG(in_compilation) = <span class="number">1</span>;</span><br><span class="line">    CG(ast) = <span class="literal">NULL</span>;</span><br><span class="line">    CG(ast_arena) = zend_arena_create(<span class="number">1024</span> * <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!zendparse()) &#123;</span><br><span class="line">        <span class="keyword">int</span> last_lineno = CG(zend_lineno);</span><br><span class="line">        zend_file_context original_file_context;</span><br><span class="line">        zend_oparray_context original_oparray_context;</span><br><span class="line">        zend_op_array *original_active_op_array = CG(active_op_array);</span><br><span class="line"></span><br><span class="line">        op_array = emalloc(<span class="keyword">sizeof</span>(zend_op_array));</span><br><span class="line">        init_op_array(op_array, type, INITIAL_OP_ARRAY_SIZE);</span><br><span class="line">        CG(active_op_array) = op_array;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (zend_ast_process) &#123;</span><br><span class="line">            zend_ast_process(CG(ast));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zend_file_context_begin(&amp;original_file_context);</span><br><span class="line">        zend_oparray_context_begin(&amp;original_oparray_context);</span><br><span class="line">        zend_compile_top_stmt(CG(ast));</span><br><span class="line">        CG(zend_lineno) = last_lineno;</span><br><span class="line">        zend_emit_final_return(type == ZEND_USER_FUNCTION);</span><br><span class="line">        op_array-&gt;line_start = <span class="number">1</span>;</span><br><span class="line">        op_array-&gt;line_end = last_lineno;</span><br><span class="line">        pass_two(op_array);</span><br><span class="line">        zend_oparray_context_end(&amp;original_oparray_context);</span><br><span class="line">        zend_file_context_end(&amp;original_file_context);</span><br><span class="line"></span><br><span class="line">        CG(active_op_array) = original_active_op_array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zend_ast_destroy(CG(ast));</span><br><span class="line">    zend_arena_destroy(CG(ast_arena));</span><br><span class="line"></span><br><span class="line">    CG(in_compilation) = original_in_compilation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> op_array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init_op_array</code>先初始化op_array，然后<code>zend_compile_top_stmt</code>生成opline，接着<code>pass_two</code>基于op_array里的opline上下文，为opline设置跳转。</p><p><a id="markdown-递归ast抽象语法树生成op_array" name="递归ast抽象语法树生成op_array"></a></p><h2 id="递归ast抽象语法树生成op_array"><a class="markdownIt-Anchor" href="#递归ast抽象语法树生成op_array"></a> 递归AST抽象语法树，生成op_array</h2><p><code>Zend/zend_compile.c:7755</code>，递归<code>AST</code>(Abstract Syntax Tree 抽象语法树)，最终调用<code>zend_compile_stmt</code>。有关<code>AST</code>的细节，这里先不展开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zend_compile_top_stmt</span><span class="params">(zend_ast *ast)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ast) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ast-&gt;kind == ZEND_AST_STMT_LIST) &#123;</span><br><span class="line">        zend_ast_list *<span class="built_in">list</span> = zend_ast_get_list(ast);</span><br><span class="line">        <span class="keyword">uint32_t</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>-&gt;children; ++i) &#123;</span><br><span class="line">            zend_compile_top_stmt(<span class="built_in">list</span>-&gt;child[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zend_compile_stmt(ast);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ast-&gt;kind != ZEND_AST_NAMESPACE &amp;&amp; ast-&gt;kind != ZEND_AST_HALT_COMPILER) &#123;</span><br><span class="line">        zend_verify_namespace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ast-&gt;kind == ZEND_AST_FUNC_DECL || ast-&gt;kind == ZEND_AST_CLASS) &#123;</span><br><span class="line">        CG(zend_lineno) = ((zend_ast_decl *) ast)-&gt;end_lineno;</span><br><span class="line">        zend_do_early_binding();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Zend/zend_compile.c:7782</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zend_compile_stmt</span><span class="params">(zend_ast *ast)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ast) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CG(zend_lineno) = ast-&gt;lineno;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((CG(compiler_options) &amp; ZEND_COMPILE_EXTENDED_INFO) &amp;&amp; !zend_is_unticked_stmt(ast)) &#123;</span><br><span class="line">        zend_do_extended_info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (ast-&gt;kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_STMT_LIST:</span><br><span class="line">            zend_compile_stmt_list(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_GLOBAL:</span><br><span class="line">            zend_compile_global_var(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_STATIC:</span><br><span class="line">            zend_compile_static_var(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_UNSET:</span><br><span class="line">            zend_compile_unset(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_RETURN:</span><br><span class="line">            zend_compile_return(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_ECHO:</span><br><span class="line">            zend_compile_echo(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_THROW:</span><br><span class="line">            zend_compile_throw(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_BREAK:</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_CONTINUE:</span><br><span class="line">            zend_compile_break_continue(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_GOTO:</span><br><span class="line">            zend_compile_goto(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_LABEL:</span><br><span class="line">            zend_compile_label(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_WHILE:</span><br><span class="line">            zend_compile_while(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_DO_WHILE:</span><br><span class="line">            zend_compile_do_while(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_FOR:</span><br><span class="line">            zend_compile_for(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_FOREACH:</span><br><span class="line">            zend_compile_foreach(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_IF:</span><br><span class="line">            zend_compile_if(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_SWITCH:</span><br><span class="line">            zend_compile_switch(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_TRY:</span><br><span class="line">            zend_compile_try(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_DECLARE:</span><br><span class="line">            zend_compile_declare(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_FUNC_DECL:</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_METHOD:</span><br><span class="line">            zend_compile_func_decl(<span class="literal">NULL</span>, ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_PROP_DECL:</span><br><span class="line">            zend_compile_prop_decl(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_CLASS_CONST_DECL:</span><br><span class="line">            zend_compile_class_const_decl(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_USE_TRAIT:</span><br><span class="line">            zend_compile_use_trait(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_CLASS:</span><br><span class="line">            zend_compile_class_decl(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_GROUP_USE:</span><br><span class="line">            zend_compile_group_use(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_USE:</span><br><span class="line">            zend_compile_use(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_CONST_DECL:</span><br><span class="line">            zend_compile_const_decl(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_NAMESPACE:</span><br><span class="line">            zend_compile_namespace(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_AST_HALT_COMPILER:</span><br><span class="line">            zend_compile_halt_compiler(ast);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            znode result;</span><br><span class="line">            zend_compile_expr(&amp;result, ast);</span><br><span class="line">            zend_do_free(&amp;result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FC(declarables).ticks &amp;&amp; !zend_is_unticked_stmt(ast)) &#123;</span><br><span class="line">        zend_emit_tick();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的compile指令比较多，但它们都会调用<code>zend_compile_expr</code>将<code>zend_ast</code>转化成<code>znode</code>，然后调用<code>zend_emit_xxx</code>，将<code>znode</code>转化成<code>zend_op</code>。</p><p>有关<code>znode</code>和<code>zend_op</code>的细节，这里先不展开。</p><p>以<code>zend_emit_op</code>为例，<code>Zend/zend_compile.c:2137</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zend_op *<span class="title">zend_emit_op</span><span class="params">(znode *result, zend_uchar opcode, znode *op1, znode *op2)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_op *opline = get_next_op(CG(active_op_array));</span><br><span class="line">    opline-&gt;opcode = opcode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (op1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        SET_UNUSED(opline-&gt;op1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SET_NODE(opline-&gt;op1, op1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (op2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        SET_UNUSED(opline-&gt;op2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SET_NODE(opline-&gt;op2, op2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zend_check_live_ranges(opline);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        zend_make_var_result(result, opline);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> opline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure><p><code>get_next_op</code>就是从全局的<code>active_op_array</code>获得一个新的<code>opline</code>指针，并初始化。</p><p>然后为其设置对应的opcode和操作数。注意<code>zend_make_var_result</code>并不是计算返回值，只是为返回值进行初始化。如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Zend/zend_compile.c:1999</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zend_make_var_result</span><span class="params">(znode *result, zend_op *opline)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    opline-&gt;result_type = IS_VAR;</span><br><span class="line">    opline-&gt;result.var = get_temporary_variable(CG(active_op_array));</span><br><span class="line">    GET_NODE(result, opline-&gt;result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Zend/zend_compile.c:46</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_NODE(target, src) do &#123; \</span></span><br><span class="line">        (target)-&gt;op_type = src ## _type; \</span><br><span class="line">        <span class="keyword">if</span> ((target)-&gt;op_type == IS_CONST) &#123; \</span><br><span class="line">            ZVAL_COPY_VALUE(&amp;(target)-&gt;u.constant, CT_CONSTANT(src)); \</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; \</span><br><span class="line">            (target)-&gt;u.op = src; \</span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>在递归完成后，op_array的opline链也就生成了，但是此时的opline信息还是不完整的。</p><p><a id="markdown-为opline设置handlercompile-time切换到run-time" name="为opline设置handlercompile-time切换到run-time"></a></p><h2 id="为opline设置handlercompile-time切换到run-time"><a class="markdownIt-Anchor" href="#为opline设置handlercompile-time切换到run-time"></a> 为opline设置handler，compile-time切换到run-time</h2><p><code>Zend/zend_opcode.c:549</code>，<code>pass_two</code>基于opline的上下文信息，为opline设置正确的跳转，主要看一下里面的while遍历:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEND_API <span class="keyword">int</span> <span class="title">pass_two</span><span class="params">(zend_op_array *op_array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_op *opline, *end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ZEND_USER_CODE(op_array-&gt;type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CG(compiler_options) &amp; ZEND_COMPILE_EXTENDED_INFO) &#123;</span><br><span class="line">        zend_update_extended_info(op_array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CG(compiler_options) &amp; ZEND_COMPILE_HANDLE_OP_ARRAY) &#123;</span><br><span class="line">        <span class="keyword">if</span> (zend_extension_flags &amp; ZEND_EXTENSIONS_HAVE_OP_ARRAY_HANDLER) &#123;</span><br><span class="line">            zend_llist_apply_with_argument(&amp;zend_extensions, (<span class="keyword">llist_apply_with_arg_func_t</span>) zend_extension_op_array_handler, op_array);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CG(context).vars_size != op_array-&gt;last_var) &#123;</span><br><span class="line">        op_array-&gt;vars = (zend_string**) erealloc(op_array-&gt;vars, <span class="keyword">sizeof</span>(zend_string*)*op_array-&gt;last_var);</span><br><span class="line">        CG(context).vars_size = op_array-&gt;last_var;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CG(context).opcodes_size != op_array-&gt;last) &#123;</span><br><span class="line">        op_array-&gt;opcodes = (zend_op *) erealloc(op_array-&gt;opcodes, <span class="keyword">sizeof</span>(zend_op)*op_array-&gt;last);</span><br><span class="line">        CG(context).opcodes_size = op_array-&gt;last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CG(context).literals_size != op_array-&gt;last_literal) &#123;</span><br><span class="line">        op_array-&gt;literals = (zval*)erealloc(op_array-&gt;literals, <span class="keyword">sizeof</span>(zval) * op_array-&gt;last_literal);</span><br><span class="line">        CG(context).literals_size = op_array-&gt;last_literal;</span><br><span class="line">    &#125;</span><br><span class="line">    opline = op_array-&gt;opcodes;</span><br><span class="line">    end = opline + op_array-&gt;last;</span><br><span class="line">    <span class="keyword">while</span> (opline &lt; end) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opline-&gt;opcode) &#123;</span><br><span class="line">            <span class="keyword">case</span> ZEND_FAST_CALL:</span><br><span class="line">                opline-&gt;op1.opline_num = op_array-&gt;try_catch_array[opline-&gt;op1.num].finally_op;</span><br><span class="line">                ZEND_PASS_TWO_UPDATE_JMP_TARGET(op_array, opline, opline-&gt;op1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ZEND_BRK:</span><br><span class="line">            <span class="keyword">case</span> ZEND_CONT:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">uint32_t</span> jmp_target = zend_get_brk_cont_target(op_array, opline);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (op_array-&gt;fn_flags &amp; ZEND_ACC_HAS_FINALLY_BLOCK) &#123;</span><br><span class="line">                        zend_check_finally_breakout(op_array, opline - op_array-&gt;opcodes, jmp_target);</span><br><span class="line">                    &#125;</span><br><span class="line">                    opline-&gt;opcode = ZEND_JMP;</span><br><span class="line">                    opline-&gt;op1.opline_num = jmp_target;</span><br><span class="line">                    opline-&gt;op2.num = <span class="number">0</span>;</span><br><span class="line">                    ZEND_PASS_TWO_UPDATE_JMP_TARGET(op_array, opline, opline-&gt;op1);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ZEND_GOTO:</span><br><span class="line">                zend_resolve_goto_label(op_array, opline);</span><br><span class="line">                <span class="keyword">if</span> (op_array-&gt;fn_flags &amp; ZEND_ACC_HAS_FINALLY_BLOCK) &#123;</span><br><span class="line">                    zend_check_finally_breakout(op_array, opline - op_array-&gt;opcodes, opline-&gt;op1.opline_num);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/* break omitted intentionally */</span></span><br><span class="line">            <span class="keyword">case</span> ZEND_JMP:</span><br><span class="line">                ZEND_PASS_TWO_UPDATE_JMP_TARGET(op_array, opline, opline-&gt;op1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ZEND_JMPZNZ:</span><br><span class="line">                <span class="comment">/* absolute index to relative offset */</span></span><br><span class="line">                opline-&gt;extended_value = ZEND_OPLINE_NUM_TO_OFFSET(op_array, opline, opline-&gt;extended_value);</span><br><span class="line">                <span class="comment">/* break omitted intentionally */</span></span><br><span class="line">            <span class="keyword">case</span> ZEND_JMPZ:</span><br><span class="line">            <span class="keyword">case</span> ZEND_JMPNZ:</span><br><span class="line">            <span class="keyword">case</span> ZEND_JMPZ_EX:</span><br><span class="line">            <span class="keyword">case</span> ZEND_JMPNZ_EX:</span><br><span class="line">            <span class="keyword">case</span> ZEND_JMP_SET:</span><br><span class="line">            <span class="keyword">case</span> ZEND_COALESCE:</span><br><span class="line">            <span class="keyword">case</span> ZEND_FE_RESET_R:</span><br><span class="line">            <span class="keyword">case</span> ZEND_FE_RESET_RW:</span><br><span class="line">                ZEND_PASS_TWO_UPDATE_JMP_TARGET(op_array, opline, opline-&gt;op2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ZEND_ASSERT_CHECK:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* If result of assert is unused, result of check is unused as well */</span></span><br><span class="line">                zend_op *call = &amp;op_array-&gt;opcodes[opline-&gt;op2.opline_num - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (call-&gt;opcode == ZEND_EXT_FCALL_END) &#123;</span><br><span class="line">                    call--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (call-&gt;result_type == IS_UNUSED) &#123;</span><br><span class="line">                    opline-&gt;result_type = IS_UNUSED;</span><br><span class="line">                &#125;</span><br><span class="line">                ZEND_PASS_TWO_UPDATE_JMP_TARGET(op_array, opline, opline-&gt;op2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> ZEND_DECLARE_ANON_CLASS:</span><br><span class="line">            <span class="keyword">case</span> ZEND_DECLARE_ANON_INHERITED_CLASS:</span><br><span class="line">            <span class="keyword">case</span> ZEND_CATCH:</span><br><span class="line">            <span class="keyword">case</span> ZEND_FE_FETCH_R:</span><br><span class="line">            <span class="keyword">case</span> ZEND_FE_FETCH_RW:</span><br><span class="line">                <span class="comment">/* absolute index to relative offset */</span></span><br><span class="line">                opline-&gt;extended_value = ZEND_OPLINE_NUM_TO_OFFSET(op_array, opline, opline-&gt;extended_value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ZEND_RETURN:</span><br><span class="line">            <span class="keyword">case</span> ZEND_RETURN_BY_REF:</span><br><span class="line">                <span class="keyword">if</span> (op_array-&gt;fn_flags &amp; ZEND_ACC_GENERATOR) &#123;</span><br><span class="line">                    opline-&gt;opcode = ZEND_GENERATOR_RETURN;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opline-&gt;op1_type == IS_CONST) &#123;</span><br><span class="line">            ZEND_PASS_TWO_UPDATE_CONSTANT(op_array, opline-&gt;op1);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opline-&gt;op1_type &amp; (IS_VAR|IS_TMP_VAR)) &#123;</span><br><span class="line">            opline-&gt;op1.var = (<span class="keyword">uint32_t</span>)(<span class="keyword">zend_intptr_t</span>)ZEND_CALL_VAR_NUM(<span class="literal">NULL</span>, op_array-&gt;last_var + opline-&gt;op1.var);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opline-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">            ZEND_PASS_TWO_UPDATE_CONSTANT(op_array, opline-&gt;op2);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opline-&gt;op2_type &amp; (IS_VAR|IS_TMP_VAR)) &#123;</span><br><span class="line">            opline-&gt;op2.var = (<span class="keyword">uint32_t</span>)(<span class="keyword">zend_intptr_t</span>)ZEND_CALL_VAR_NUM(<span class="literal">NULL</span>, op_array-&gt;last_var + opline-&gt;op2.var);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opline-&gt;result_type &amp; (IS_VAR|IS_TMP_VAR)) &#123;</span><br><span class="line">            opline-&gt;result.var = (<span class="keyword">uint32_t</span>)(<span class="keyword">zend_intptr_t</span>)ZEND_CALL_VAR_NUM(<span class="literal">NULL</span>, op_array-&gt;last_var + opline-&gt;result.var);</span><br><span class="line">        &#125;</span><br><span class="line">        ZEND_VM_SET_OPCODE_HANDLER(opline);</span><br><span class="line">        opline++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (op_array-&gt;live_range) &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; op_array-&gt;last_live_range; i++) &#123;</span><br><span class="line">            op_array-&gt;live_range[i].var =</span><br><span class="line">                (<span class="keyword">uint32_t</span>)(<span class="keyword">zend_intptr_t</span>)ZEND_CALL_VAR_NUM(<span class="literal">NULL</span>, op_array-&gt;last_var + (op_array-&gt;live_range[i].var / <span class="keyword">sizeof</span>(zval))) |</span><br><span class="line">                (op_array-&gt;live_range[i].var &amp; ZEND_LIVE_MASK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    op_array-&gt;fn_flags |= ZEND_ACC_DONE_PASS_TWO;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>past_two</code>函数使用了几个宏，如下:</p><p><code>Zend/zend_compile.h:584</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* convert jump target from compile-time to run-time */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ZEND_PASS_TWO_UPDATE_JMP_TARGET(op_array, opline, node) do &#123; \</span></span><br><span class="line">        (node).jmp_offset = ZEND_OPLINE_NUM_TO_OFFSET(op_array, opline, (node).opline_num); \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Zend/zend_compile.h:544</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_OPLINE_NUM_TO_OFFSET(op_array, opline, opline_num) \</span></span><br><span class="line">    ((<span class="keyword">char</span>*)&amp;(op_array)-&gt;opcodes[opline_num] - (<span class="keyword">char</span>*)(opline))</span><br></pre></td></tr></table></figure><p><code>Zend/zend_compile.h:625</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* convert constant from compile-time to run-time */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ZEND_PASS_TWO_UPDATE_CONSTANT(op_array, node) do &#123; \</span></span><br><span class="line">        (node).constant *= <span class="keyword">sizeof</span>(zval); \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这块地址的计算暂时没有搞明白，待续。</p><p>在循环的最后，通过<code>ZEND_VM_SET_OPCODE_HANDLER</code>宏给opline设置handler，<code>Zend/zend_opcode.c:663</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZEND_VM_SET_OPCODE_HANDLER(opline);</span><br><span class="line">opline++;</span><br></pre></td></tr></table></figure><p><code>Zend/zend_vm.h:35</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_VM_SET_OPCODE_HANDLER(opline) zend_vm_set_opcode_handler(opline)</span></span><br></pre></td></tr></table></figure><!-- 利用objdump工具解析`Zend/.libs/zend_execute.o`文件，在文件末尾可以找到其定义：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000000596c0 g     F .text  000000000000002a zend_vm_set_opcode_handler</span><br></pre></td></tr></table></figure><p>关于各列的具体意义，可参考<a href="http://www.man7.org/linux/man-pages/man1/objdump.1.html">man page</a>： --&gt;</p><p><code>Zend/zend_vm_execute.h:62733</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">void</span> *<span class="title">zend_vm_get_opcode_handler</span><span class="params">(zend_uchar opcode, <span class="keyword">const</span> zend_op* op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zend_vm_get_opcode_handler_ex(zend_spec_handlers[opcode], op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">zend_vm_set_opcode_handler</span><span class="params">(zend_op* op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    op-&gt;handler = zend_vm_get_opcode_handler(zend_user_opcodes[op-&gt;opcode], op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">zend_vm_set_opcode_handler_ex</span><span class="params">(zend_op* op, <span class="keyword">uint32_t</span> op1_info, <span class="keyword">uint32_t</span> op2_info, <span class="keyword">uint32_t</span> res_info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_uchar opcode = zend_user_opcodes[op-&gt;opcode];</span><br><span class="line">    <span class="keyword">uint32_t</span> spec = zend_spec_handlers[opcode];</span><br><span class="line">    <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line">        <span class="keyword">case</span> ZEND_ADD:</span><br><span class="line">            <span class="keyword">if</span> (res_info == MAY_BE_LONG &amp;&amp; op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3631</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3656</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_DOUBLE &amp;&amp; op2_info == MAY_BE_DOUBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3681</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_SUB:</span><br><span class="line">            <span class="keyword">if</span> (res_info == MAY_BE_LONG &amp;&amp; op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3706</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3731</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_DOUBLE &amp;&amp; op2_info == MAY_BE_DOUBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3756</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_MUL:</span><br><span class="line">            <span class="keyword">if</span> (res_info == MAY_BE_LONG &amp;&amp; op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3781</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3806</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_DOUBLE &amp;&amp; op2_info == MAY_BE_DOUBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3831</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_IS_EQUAL:</span><br><span class="line">            <span class="keyword">if</span> (op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3856</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2 | SPEC_RULE_SMART_BRANCH;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_DOUBLE &amp;&amp; op2_info == MAY_BE_DOUBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">3931</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2 | SPEC_RULE_SMART_BRANCH;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_IS_NOT_EQUAL:</span><br><span class="line">            <span class="keyword">if</span> (op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">4006</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2 | SPEC_RULE_SMART_BRANCH;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_DOUBLE &amp;&amp; op2_info == MAY_BE_DOUBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">4081</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2 | SPEC_RULE_SMART_BRANCH;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type &gt; op-&gt;op2_type) &#123;</span><br><span class="line">                    zend_swap_operands(op);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_IS_SMALLER:</span><br><span class="line">            <span class="keyword">if</span> (op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">4156</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2 | SPEC_RULE_SMART_BRANCH;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_DOUBLE &amp;&amp; op2_info == MAY_BE_DOUBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">4231</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2 | SPEC_RULE_SMART_BRANCH;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_IS_SMALLER_OR_EQUAL:</span><br><span class="line">            <span class="keyword">if</span> (op1_info == MAY_BE_LONG &amp;&amp; op2_info == MAY_BE_LONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">4306</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2 | SPEC_RULE_SMART_BRANCH;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_DOUBLE &amp;&amp; op2_info == MAY_BE_DOUBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op-&gt;op1_type == IS_CONST &amp;&amp; op-&gt;op2_type == IS_CONST) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                spec = <span class="number">4381</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2 | SPEC_RULE_SMART_BRANCH;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_QM_ASSIGN:</span><br><span class="line">            <span class="keyword">if</span> (op1_info == MAY_BE_DOUBLE) &#123;</span><br><span class="line">                spec = <span class="number">4546</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(op1_info &amp; ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)))) &#123;</span><br><span class="line">                spec = <span class="number">4551</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_PRE_INC:</span><br><span class="line">            <span class="keyword">if</span> (res_info == MAY_BE_LONG &amp;&amp; op1_info == MAY_BE_LONG) &#123;</span><br><span class="line">                spec = <span class="number">4456</span> | SPEC_RULE_OP1 | SPEC_RULE_RETVAL;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_LONG) &#123;</span><br><span class="line">                spec = <span class="number">4466</span> | SPEC_RULE_OP1 | SPEC_RULE_RETVAL;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == (MAY_BE_LONG|MAY_BE_DOUBLE)) &#123;</span><br><span class="line">                spec = <span class="number">4476</span> | SPEC_RULE_OP1 | SPEC_RULE_RETVAL;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_PRE_DEC:</span><br><span class="line">            <span class="keyword">if</span> (res_info == MAY_BE_LONG &amp;&amp; op1_info == MAY_BE_LONG) &#123;</span><br><span class="line">                spec = <span class="number">4486</span> | SPEC_RULE_OP1 | SPEC_RULE_RETVAL;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_LONG) &#123;</span><br><span class="line">                spec = <span class="number">4496</span> | SPEC_RULE_OP1 | SPEC_RULE_RETVAL;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == (MAY_BE_LONG|MAY_BE_DOUBLE)) &#123;</span><br><span class="line">                spec = <span class="number">4506</span> | SPEC_RULE_OP1 | SPEC_RULE_RETVAL;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_POST_INC:</span><br><span class="line">            <span class="keyword">if</span> (res_info == MAY_BE_LONG &amp;&amp; op1_info == MAY_BE_LONG) &#123;</span><br><span class="line">                spec = <span class="number">4516</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_LONG) &#123;</span><br><span class="line">                spec = <span class="number">4521</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == (MAY_BE_LONG|MAY_BE_DOUBLE)) &#123;</span><br><span class="line">                spec = <span class="number">4526</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_POST_DEC:</span><br><span class="line">            <span class="keyword">if</span> (res_info == MAY_BE_LONG &amp;&amp; op1_info == MAY_BE_LONG) &#123;</span><br><span class="line">                spec = <span class="number">4531</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == MAY_BE_LONG) &#123;</span><br><span class="line">                spec = <span class="number">4536</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op1_info == (MAY_BE_LONG|MAY_BE_DOUBLE)) &#123;</span><br><span class="line">                spec = <span class="number">4541</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_SEND_VAR_EX:</span><br><span class="line">            <span class="keyword">if</span> ((op1_info &amp; (MAY_BE_UNDEF|MAY_BE_REF)) == <span class="number">0</span>) &#123;</span><br><span class="line">                spec = <span class="number">4586</span> | SPEC_RULE_OP1 | SPEC_RULE_QUICK_ARG;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_FETCH_DIM_R:</span><br><span class="line">            <span class="keyword">if</span> (!(op2_info &amp; (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF))) &#123;</span><br><span class="line">                spec = <span class="number">4556</span> | SPEC_RULE_OP1 | SPEC_RULE_OP2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZEND_SEND_VAR:</span><br><span class="line">            <span class="keyword">if</span> ((op1_info &amp; (MAY_BE_UNDEF|MAY_BE_REF)) == <span class="number">0</span>) &#123;</span><br><span class="line">                spec = <span class="number">4581</span> | SPEC_RULE_OP1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    op-&gt;handler = zend_vm_get_opcode_handler_ex(spec, op);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件其实是代码生成的，请参考<code>Zend/zend_vm_execute.skl</code>。</p>-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP代码被读取后，来到了&lt;code&gt;zend_complie&lt;/code&gt;阶段。该阶段主要任务是解析语法，最终产生一个&lt;code&gt;op_array&lt;/code&gt;，可通过&lt;code&gt;CG(active_op_array)&lt;/code&gt;访问。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC depthFrom:1 depthTo:3 insertAnchor:true orderedList:false withLinks:true --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%A8%8B%E5%BA%8F%E6%B5%81&quot;&gt;程序流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%80%92%E5%BD%92ast%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%94%9F%E6%88%90op_array&quot;&gt;递归AST抽象语法树，生成op_array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%BAopline%E8%AE%BE%E7%BD%AEhandlercompile-time%E5%88%87%E6%8D%A2%E5%88%B0run-time&quot;&gt;为opline设置handler，compile-time切换到run-time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.notee.cc/tags/PHP/"/>
    
      <category term="Zend Engine" scheme="http://www.notee.cc/tags/Zend-Engine/"/>
    
  </entry>
  
</feed>
